/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateAuthenticatorPayload =
  | (components.OAuthCredentials & { provider: "atlassian" })
  | (components.OAuthCredentials & { provider: "dropbox" })
  | (components.OAuthCredentials & { provider: "microsoft" })
  | (components.OAuthCredentials & { provider: "salesforce" })
  | (components.OAuthCredentials & { provider: "slack" })
  | (components.OAuthCredentials & { provider: "hubspot" })
  | (components.CreateGoogleAuthenticator & { provider: "google" });

/** @internal */
export const CreateAuthenticatorPayload$inboundSchema: z.ZodType<
  CreateAuthenticatorPayload,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.OAuthCredentials$inboundSchema.and(
    z.object({ provider: z.literal("atlassian") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  components.OAuthCredentials$inboundSchema.and(
    z.object({ provider: z.literal("dropbox") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  components.OAuthCredentials$inboundSchema.and(
    z.object({ provider: z.literal("microsoft") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  components.OAuthCredentials$inboundSchema.and(
    z.object({ provider: z.literal("salesforce") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  components.OAuthCredentials$inboundSchema.and(
    z.object({ provider: z.literal("slack") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  components.OAuthCredentials$inboundSchema.and(
    z.object({ provider: z.literal("hubspot") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  components.CreateGoogleAuthenticator$inboundSchema.and(
    z.object({ provider: z.literal("google") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
]);

/** @internal */
export type CreateAuthenticatorPayload$Outbound =
  | (components.OAuthCredentials$Outbound & { provider: "atlassian" })
  | (components.OAuthCredentials$Outbound & { provider: "dropbox" })
  | (components.OAuthCredentials$Outbound & { provider: "microsoft" })
  | (components.OAuthCredentials$Outbound & { provider: "salesforce" })
  | (components.OAuthCredentials$Outbound & { provider: "slack" })
  | (components.OAuthCredentials$Outbound & { provider: "hubspot" })
  | (components.CreateGoogleAuthenticator$Outbound & { provider: "google" });

/** @internal */
export const CreateAuthenticatorPayload$outboundSchema: z.ZodType<
  CreateAuthenticatorPayload$Outbound,
  z.ZodTypeDef,
  CreateAuthenticatorPayload
> = z.union([
  components.OAuthCredentials$outboundSchema.and(
    z.object({ provider: z.literal("atlassian") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  components.OAuthCredentials$outboundSchema.and(
    z.object({ provider: z.literal("dropbox") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  components.OAuthCredentials$outboundSchema.and(
    z.object({ provider: z.literal("microsoft") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  components.OAuthCredentials$outboundSchema.and(
    z.object({ provider: z.literal("salesforce") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  components.OAuthCredentials$outboundSchema.and(
    z.object({ provider: z.literal("slack") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  components.OAuthCredentials$outboundSchema.and(
    z.object({ provider: z.literal("hubspot") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  components.CreateGoogleAuthenticator$outboundSchema.and(
    z.object({ provider: z.literal("google") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAuthenticatorPayload$ {
  /** @deprecated use `CreateAuthenticatorPayload$inboundSchema` instead. */
  export const inboundSchema = CreateAuthenticatorPayload$inboundSchema;
  /** @deprecated use `CreateAuthenticatorPayload$outboundSchema` instead. */
  export const outboundSchema = CreateAuthenticatorPayload$outboundSchema;
  /** @deprecated use `CreateAuthenticatorPayload$Outbound` instead. */
  export type Outbound = CreateAuthenticatorPayload$Outbound;
}

export function createAuthenticatorPayloadToJSON(
  createAuthenticatorPayload: CreateAuthenticatorPayload,
): string {
  return JSON.stringify(
    CreateAuthenticatorPayload$outboundSchema.parse(createAuthenticatorPayload),
  );
}

export function createAuthenticatorPayloadFromJSON(
  jsonString: string,
): SafeParseResult<CreateAuthenticatorPayload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAuthenticatorPayload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAuthenticatorPayload' from JSON`,
  );
}
