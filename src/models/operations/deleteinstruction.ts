/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteInstructionRequest = {
  /**
   * The ID of the instruction.
   */
  instructionId: string;
};

/** @internal */
export const DeleteInstructionRequest$inboundSchema: z.ZodType<
  DeleteInstructionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  instruction_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "instruction_id": "instructionId",
  });
});

/** @internal */
export type DeleteInstructionRequest$Outbound = {
  instruction_id: string;
};

/** @internal */
export const DeleteInstructionRequest$outboundSchema: z.ZodType<
  DeleteInstructionRequest$Outbound,
  z.ZodTypeDef,
  DeleteInstructionRequest
> = z.object({
  instructionId: z.string(),
}).transform((v) => {
  return remap$(v, {
    instructionId: "instruction_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteInstructionRequest$ {
  /** @deprecated use `DeleteInstructionRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteInstructionRequest$inboundSchema;
  /** @deprecated use `DeleteInstructionRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteInstructionRequest$outboundSchema;
  /** @deprecated use `DeleteInstructionRequest$Outbound` instead. */
  export type Outbound = DeleteInstructionRequest$Outbound;
}

export function deleteInstructionRequestToJSON(
  deleteInstructionRequest: DeleteInstructionRequest,
): string {
  return JSON.stringify(
    DeleteInstructionRequest$outboundSchema.parse(deleteInstructionRequest),
  );
}

export function deleteInstructionRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteInstructionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteInstructionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteInstructionRequest' from JSON`,
  );
}
