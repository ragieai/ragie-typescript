/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeletePartitionPartitionsPartitionIdDeleteRequest = {
  partitionId: string;
};

/** @internal */
export const DeletePartitionPartitionsPartitionIdDeleteRequest$inboundSchema:
  z.ZodType<
    DeletePartitionPartitionsPartitionIdDeleteRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    partition_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "partition_id": "partitionId",
    });
  });

/** @internal */
export type DeletePartitionPartitionsPartitionIdDeleteRequest$Outbound = {
  partition_id: string;
};

/** @internal */
export const DeletePartitionPartitionsPartitionIdDeleteRequest$outboundSchema:
  z.ZodType<
    DeletePartitionPartitionsPartitionIdDeleteRequest$Outbound,
    z.ZodTypeDef,
    DeletePartitionPartitionsPartitionIdDeleteRequest
  > = z.object({
    partitionId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      partitionId: "partition_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeletePartitionPartitionsPartitionIdDeleteRequest$ {
  /** @deprecated use `DeletePartitionPartitionsPartitionIdDeleteRequest$inboundSchema` instead. */
  export const inboundSchema =
    DeletePartitionPartitionsPartitionIdDeleteRequest$inboundSchema;
  /** @deprecated use `DeletePartitionPartitionsPartitionIdDeleteRequest$outboundSchema` instead. */
  export const outboundSchema =
    DeletePartitionPartitionsPartitionIdDeleteRequest$outboundSchema;
  /** @deprecated use `DeletePartitionPartitionsPartitionIdDeleteRequest$Outbound` instead. */
  export type Outbound =
    DeletePartitionPartitionsPartitionIdDeleteRequest$Outbound;
}

export function deletePartitionPartitionsPartitionIdDeleteRequestToJSON(
  deletePartitionPartitionsPartitionIdDeleteRequest:
    DeletePartitionPartitionsPartitionIdDeleteRequest,
): string {
  return JSON.stringify(
    DeletePartitionPartitionsPartitionIdDeleteRequest$outboundSchema.parse(
      deletePartitionPartitionsPartitionIdDeleteRequest,
    ),
  );
}

export function deletePartitionPartitionsPartitionIdDeleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  DeletePartitionPartitionsPartitionIdDeleteRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeletePartitionPartitionsPartitionIdDeleteRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeletePartitionPartitionsPartitionIdDeleteRequest' from JSON`,
  );
}
