/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SetConnectionEnabledConnectionsConnectionIdEnabledPutRequest = {
  connectionId: string;
  setConnectionEnabledPayload: components.SetConnectionEnabledPayload;
};

/** @internal */
export const SetConnectionEnabledConnectionsConnectionIdEnabledPutRequest$inboundSchema:
  z.ZodType<
    SetConnectionEnabledConnectionsConnectionIdEnabledPutRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    connection_id: z.string(),
    SetConnectionEnabledPayload:
      components.SetConnectionEnabledPayload$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "connection_id": "connectionId",
      "SetConnectionEnabledPayload": "setConnectionEnabledPayload",
    });
  });

/** @internal */
export type SetConnectionEnabledConnectionsConnectionIdEnabledPutRequest$Outbound =
  {
    connection_id: string;
    SetConnectionEnabledPayload:
      components.SetConnectionEnabledPayload$Outbound;
  };

/** @internal */
export const SetConnectionEnabledConnectionsConnectionIdEnabledPutRequest$outboundSchema:
  z.ZodType<
    SetConnectionEnabledConnectionsConnectionIdEnabledPutRequest$Outbound,
    z.ZodTypeDef,
    SetConnectionEnabledConnectionsConnectionIdEnabledPutRequest
  > = z.object({
    connectionId: z.string(),
    setConnectionEnabledPayload:
      components.SetConnectionEnabledPayload$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      connectionId: "connection_id",
      setConnectionEnabledPayload: "SetConnectionEnabledPayload",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SetConnectionEnabledConnectionsConnectionIdEnabledPutRequest$ {
  /** @deprecated use `SetConnectionEnabledConnectionsConnectionIdEnabledPutRequest$inboundSchema` instead. */
  export const inboundSchema =
    SetConnectionEnabledConnectionsConnectionIdEnabledPutRequest$inboundSchema;
  /** @deprecated use `SetConnectionEnabledConnectionsConnectionIdEnabledPutRequest$outboundSchema` instead. */
  export const outboundSchema =
    SetConnectionEnabledConnectionsConnectionIdEnabledPutRequest$outboundSchema;
  /** @deprecated use `SetConnectionEnabledConnectionsConnectionIdEnabledPutRequest$Outbound` instead. */
  export type Outbound =
    SetConnectionEnabledConnectionsConnectionIdEnabledPutRequest$Outbound;
}

export function setConnectionEnabledConnectionsConnectionIdEnabledPutRequestToJSON(
  setConnectionEnabledConnectionsConnectionIdEnabledPutRequest:
    SetConnectionEnabledConnectionsConnectionIdEnabledPutRequest,
): string {
  return JSON.stringify(
    SetConnectionEnabledConnectionsConnectionIdEnabledPutRequest$outboundSchema
      .parse(setConnectionEnabledConnectionsConnectionIdEnabledPutRequest),
  );
}

export function setConnectionEnabledConnectionsConnectionIdEnabledPutRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  SetConnectionEnabledConnectionsConnectionIdEnabledPutRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SetConnectionEnabledConnectionsConnectionIdEnabledPutRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'SetConnectionEnabledConnectionsConnectionIdEnabledPutRequest' from JSON`,
  );
}
