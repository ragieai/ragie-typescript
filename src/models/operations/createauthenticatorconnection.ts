/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateAuthenticatorConnectionRequest = {
  authenticatorId: string;
  createAuthenticatorConnection: components.CreateAuthenticatorConnection;
};

/** @internal */
export const CreateAuthenticatorConnectionRequest$inboundSchema: z.ZodType<
  CreateAuthenticatorConnectionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  authenticator_id: z.string(),
  CreateAuthenticatorConnection: z.lazy(() =>
    components.CreateAuthenticatorConnection$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "authenticator_id": "authenticatorId",
    "CreateAuthenticatorConnection": "createAuthenticatorConnection",
  });
});

/** @internal */
export type CreateAuthenticatorConnectionRequest$Outbound = {
  authenticator_id: string;
  CreateAuthenticatorConnection:
    components.CreateAuthenticatorConnection$Outbound;
};

/** @internal */
export const CreateAuthenticatorConnectionRequest$outboundSchema: z.ZodType<
  CreateAuthenticatorConnectionRequest$Outbound,
  z.ZodTypeDef,
  CreateAuthenticatorConnectionRequest
> = z.object({
  authenticatorId: z.string(),
  createAuthenticatorConnection: z.lazy(() =>
    components.CreateAuthenticatorConnection$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    authenticatorId: "authenticator_id",
    createAuthenticatorConnection: "CreateAuthenticatorConnection",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAuthenticatorConnectionRequest$ {
  /** @deprecated use `CreateAuthenticatorConnectionRequest$inboundSchema` instead. */
  export const inboundSchema =
    CreateAuthenticatorConnectionRequest$inboundSchema;
  /** @deprecated use `CreateAuthenticatorConnectionRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateAuthenticatorConnectionRequest$outboundSchema;
  /** @deprecated use `CreateAuthenticatorConnectionRequest$Outbound` instead. */
  export type Outbound = CreateAuthenticatorConnectionRequest$Outbound;
}

export function createAuthenticatorConnectionRequestToJSON(
  createAuthenticatorConnectionRequest: CreateAuthenticatorConnectionRequest,
): string {
  return JSON.stringify(
    CreateAuthenticatorConnectionRequest$outboundSchema.parse(
      createAuthenticatorConnectionRequest,
    ),
  );
}

export function createAuthenticatorConnectionRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateAuthenticatorConnectionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAuthenticatorConnectionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAuthenticatorConnectionRequest' from JSON`,
  );
}
