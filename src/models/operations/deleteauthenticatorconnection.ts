/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteAuthenticatorConnectionRequest = {
  authenticatorId: string;
};

/** @internal */
export const DeleteAuthenticatorConnectionRequest$inboundSchema: z.ZodType<
  DeleteAuthenticatorConnectionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  authenticator_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "authenticator_id": "authenticatorId",
  });
});

/** @internal */
export type DeleteAuthenticatorConnectionRequest$Outbound = {
  authenticator_id: string;
};

/** @internal */
export const DeleteAuthenticatorConnectionRequest$outboundSchema: z.ZodType<
  DeleteAuthenticatorConnectionRequest$Outbound,
  z.ZodTypeDef,
  DeleteAuthenticatorConnectionRequest
> = z.object({
  authenticatorId: z.string(),
}).transform((v) => {
  return remap$(v, {
    authenticatorId: "authenticator_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteAuthenticatorConnectionRequest$ {
  /** @deprecated use `DeleteAuthenticatorConnectionRequest$inboundSchema` instead. */
  export const inboundSchema =
    DeleteAuthenticatorConnectionRequest$inboundSchema;
  /** @deprecated use `DeleteAuthenticatorConnectionRequest$outboundSchema` instead. */
  export const outboundSchema =
    DeleteAuthenticatorConnectionRequest$outboundSchema;
  /** @deprecated use `DeleteAuthenticatorConnectionRequest$Outbound` instead. */
  export type Outbound = DeleteAuthenticatorConnectionRequest$Outbound;
}

export function deleteAuthenticatorConnectionRequestToJSON(
  deleteAuthenticatorConnectionRequest: DeleteAuthenticatorConnectionRequest,
): string {
  return JSON.stringify(
    DeleteAuthenticatorConnectionRequest$outboundSchema.parse(
      deleteAuthenticatorConnectionRequest,
    ),
  );
}

export function deleteAuthenticatorConnectionRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteAuthenticatorConnectionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteAuthenticatorConnectionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteAuthenticatorConnectionRequest' from JSON`,
  );
}
