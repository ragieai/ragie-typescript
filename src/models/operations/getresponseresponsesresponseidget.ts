/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetResponseResponsesResponseIdGetRequest = {
  responseId: string;
};

/** @internal */
export const GetResponseResponsesResponseIdGetRequest$inboundSchema: z.ZodType<
  GetResponseResponsesResponseIdGetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  response_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "response_id": "responseId",
  });
});

/** @internal */
export type GetResponseResponsesResponseIdGetRequest$Outbound = {
  response_id: string;
};

/** @internal */
export const GetResponseResponsesResponseIdGetRequest$outboundSchema: z.ZodType<
  GetResponseResponsesResponseIdGetRequest$Outbound,
  z.ZodTypeDef,
  GetResponseResponsesResponseIdGetRequest
> = z.object({
  responseId: z.string(),
}).transform((v) => {
  return remap$(v, {
    responseId: "response_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetResponseResponsesResponseIdGetRequest$ {
  /** @deprecated use `GetResponseResponsesResponseIdGetRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetResponseResponsesResponseIdGetRequest$inboundSchema;
  /** @deprecated use `GetResponseResponsesResponseIdGetRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetResponseResponsesResponseIdGetRequest$outboundSchema;
  /** @deprecated use `GetResponseResponsesResponseIdGetRequest$Outbound` instead. */
  export type Outbound = GetResponseResponsesResponseIdGetRequest$Outbound;
}

export function getResponseResponsesResponseIdGetRequestToJSON(
  getResponseResponsesResponseIdGetRequest:
    GetResponseResponsesResponseIdGetRequest,
): string {
  return JSON.stringify(
    GetResponseResponsesResponseIdGetRequest$outboundSchema.parse(
      getResponseResponsesResponseIdGetRequest,
    ),
  );
}

export function getResponseResponsesResponseIdGetRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetResponseResponsesResponseIdGetRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetResponseResponsesResponseIdGetRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetResponseResponsesResponseIdGetRequest' from JSON`,
  );
}
