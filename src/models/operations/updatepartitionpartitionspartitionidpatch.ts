/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdatePartitionPartitionsPartitionIdPatchRequest = {
  partitionId: string;
  updatePartitionParams: components.UpdatePartitionParams;
};

/** @internal */
export const UpdatePartitionPartitionsPartitionIdPatchRequest$inboundSchema:
  z.ZodType<
    UpdatePartitionPartitionsPartitionIdPatchRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    partition_id: z.string(),
    UpdatePartitionParams: components.UpdatePartitionParams$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "partition_id": "partitionId",
      "UpdatePartitionParams": "updatePartitionParams",
    });
  });

/** @internal */
export type UpdatePartitionPartitionsPartitionIdPatchRequest$Outbound = {
  partition_id: string;
  UpdatePartitionParams: components.UpdatePartitionParams$Outbound;
};

/** @internal */
export const UpdatePartitionPartitionsPartitionIdPatchRequest$outboundSchema:
  z.ZodType<
    UpdatePartitionPartitionsPartitionIdPatchRequest$Outbound,
    z.ZodTypeDef,
    UpdatePartitionPartitionsPartitionIdPatchRequest
  > = z.object({
    partitionId: z.string(),
    updatePartitionParams: components.UpdatePartitionParams$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      partitionId: "partition_id",
      updatePartitionParams: "UpdatePartitionParams",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePartitionPartitionsPartitionIdPatchRequest$ {
  /** @deprecated use `UpdatePartitionPartitionsPartitionIdPatchRequest$inboundSchema` instead. */
  export const inboundSchema =
    UpdatePartitionPartitionsPartitionIdPatchRequest$inboundSchema;
  /** @deprecated use `UpdatePartitionPartitionsPartitionIdPatchRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePartitionPartitionsPartitionIdPatchRequest$outboundSchema;
  /** @deprecated use `UpdatePartitionPartitionsPartitionIdPatchRequest$Outbound` instead. */
  export type Outbound =
    UpdatePartitionPartitionsPartitionIdPatchRequest$Outbound;
}

export function updatePartitionPartitionsPartitionIdPatchRequestToJSON(
  updatePartitionPartitionsPartitionIdPatchRequest:
    UpdatePartitionPartitionsPartitionIdPatchRequest,
): string {
  return JSON.stringify(
    UpdatePartitionPartitionsPartitionIdPatchRequest$outboundSchema.parse(
      updatePartitionPartitionsPartitionIdPatchRequest,
    ),
  );
}

export function updatePartitionPartitionsPartitionIdPatchRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdatePartitionPartitionsPartitionIdPatchRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdatePartitionPartitionsPartitionIdPatchRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdatePartitionPartitionsPartitionIdPatchRequest' from JSON`,
  );
}
