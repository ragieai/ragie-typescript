/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetConnectionConnectionsConnectionIdGetRequest = {
  connectionId: string;
};

/** @internal */
export const GetConnectionConnectionsConnectionIdGetRequest$inboundSchema:
  z.ZodType<
    GetConnectionConnectionsConnectionIdGetRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    connection_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "connection_id": "connectionId",
    });
  });

/** @internal */
export type GetConnectionConnectionsConnectionIdGetRequest$Outbound = {
  connection_id: string;
};

/** @internal */
export const GetConnectionConnectionsConnectionIdGetRequest$outboundSchema:
  z.ZodType<
    GetConnectionConnectionsConnectionIdGetRequest$Outbound,
    z.ZodTypeDef,
    GetConnectionConnectionsConnectionIdGetRequest
  > = z.object({
    connectionId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      connectionId: "connection_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConnectionConnectionsConnectionIdGetRequest$ {
  /** @deprecated use `GetConnectionConnectionsConnectionIdGetRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetConnectionConnectionsConnectionIdGetRequest$inboundSchema;
  /** @deprecated use `GetConnectionConnectionsConnectionIdGetRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetConnectionConnectionsConnectionIdGetRequest$outboundSchema;
  /** @deprecated use `GetConnectionConnectionsConnectionIdGetRequest$Outbound` instead. */
  export type Outbound =
    GetConnectionConnectionsConnectionIdGetRequest$Outbound;
}

export function getConnectionConnectionsConnectionIdGetRequestToJSON(
  getConnectionConnectionsConnectionIdGetRequest:
    GetConnectionConnectionsConnectionIdGetRequest,
): string {
  return JSON.stringify(
    GetConnectionConnectionsConnectionIdGetRequest$outboundSchema.parse(
      getConnectionConnectionsConnectionIdGetRequest,
    ),
  );
}

export function getConnectionConnectionsConnectionIdGetRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetConnectionConnectionsConnectionIdGetRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetConnectionConnectionsConnectionIdGetRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetConnectionConnectionsConnectionIdGetRequest' from JSON`,
  );
}
