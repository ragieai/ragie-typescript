/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The desired media type of the content to return described as a mime type. An error will be returned if the requested media type is not supported for the chunk's document type.
 */
export const MediaType = {
  TextPlain: "text/plain",
  AudioMpeg: "audio/mpeg",
  VideoMp4: "video/mp4",
} as const;
/**
 * The desired media type of the content to return described as a mime type. An error will be returned if the requested media type is not supported for the chunk's document type.
 */
export type MediaType = ClosedEnum<typeof MediaType>;

export type GetDocumentChunkContentRequest = {
  /**
   * The id of the document.
   */
  documentId: string;
  /**
   * The ID of the chunk.
   */
  chunkId: string;
  /**
   * The desired media type of the content to return described as a mime type. An error will be returned if the requested media type is not supported for the chunk's document type.
   */
  mediaType?: MediaType | undefined;
  /**
   * Whether to return the content as a file download or a raw string. If set to `true`, the content will be returned as a named file for download or as a data stream.
   */
  download?: boolean | undefined;
  /**
   * An optional partition to scope the request to. If omitted, accounts created after 1/9/2025 will have the request scoped to the default partition, while older accounts will have the request scoped to all partitions. Older accounts may opt in to strict partition scoping by contacting support@ragie.ai. Older accounts using the partitions feature are strongly recommended to scope the request to a partition.
   */
  partition?: string | null | undefined;
};

/** @internal */
export const MediaType$inboundSchema: z.ZodNativeEnum<typeof MediaType> = z
  .nativeEnum(MediaType);

/** @internal */
export const MediaType$outboundSchema: z.ZodNativeEnum<typeof MediaType> =
  MediaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MediaType$ {
  /** @deprecated use `MediaType$inboundSchema` instead. */
  export const inboundSchema = MediaType$inboundSchema;
  /** @deprecated use `MediaType$outboundSchema` instead. */
  export const outboundSchema = MediaType$outboundSchema;
}

/** @internal */
export const GetDocumentChunkContentRequest$inboundSchema: z.ZodType<
  GetDocumentChunkContentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  document_id: z.string(),
  chunk_id: z.string(),
  media_type: MediaType$inboundSchema.default("text/plain"),
  download: z.boolean().default(false),
  partition: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "document_id": "documentId",
    "chunk_id": "chunkId",
    "media_type": "mediaType",
  });
});

/** @internal */
export type GetDocumentChunkContentRequest$Outbound = {
  document_id: string;
  chunk_id: string;
  media_type: string;
  download: boolean;
  partition?: string | null | undefined;
};

/** @internal */
export const GetDocumentChunkContentRequest$outboundSchema: z.ZodType<
  GetDocumentChunkContentRequest$Outbound,
  z.ZodTypeDef,
  GetDocumentChunkContentRequest
> = z.object({
  documentId: z.string(),
  chunkId: z.string(),
  mediaType: MediaType$outboundSchema.default("text/plain"),
  download: z.boolean().default(false),
  partition: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    documentId: "document_id",
    chunkId: "chunk_id",
    mediaType: "media_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDocumentChunkContentRequest$ {
  /** @deprecated use `GetDocumentChunkContentRequest$inboundSchema` instead. */
  export const inboundSchema = GetDocumentChunkContentRequest$inboundSchema;
  /** @deprecated use `GetDocumentChunkContentRequest$outboundSchema` instead. */
  export const outboundSchema = GetDocumentChunkContentRequest$outboundSchema;
  /** @deprecated use `GetDocumentChunkContentRequest$Outbound` instead. */
  export type Outbound = GetDocumentChunkContentRequest$Outbound;
}

export function getDocumentChunkContentRequestToJSON(
  getDocumentChunkContentRequest: GetDocumentChunkContentRequest,
): string {
  return JSON.stringify(
    GetDocumentChunkContentRequest$outboundSchema.parse(
      getDocumentChunkContentRequest,
    ),
  );
}

export function getDocumentChunkContentRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetDocumentChunkContentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDocumentChunkContentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDocumentChunkContentRequest' from JSON`,
  );
}
