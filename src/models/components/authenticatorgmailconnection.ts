/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  GmailData,
  GmailData$inboundSchema,
  GmailData$Outbound,
  GmailData$outboundSchema,
} from "./gmaildata.js";
import {
  OAuthRefreshTokenCredentials,
  OAuthRefreshTokenCredentials$inboundSchema,
  OAuthRefreshTokenCredentials$Outbound,
  OAuthRefreshTokenCredentials$outboundSchema,
} from "./oauthrefreshtokencredentials.js";

export type AuthenticatorGmailConnection = {
  provider?: "gmail" | undefined;
  data: GmailData;
  /**
   * The email of the Google Drive account this is for
   */
  email: string;
  credentials: OAuthRefreshTokenCredentials;
};

/** @internal */
export const AuthenticatorGmailConnection$inboundSchema: z.ZodType<
  AuthenticatorGmailConnection,
  z.ZodTypeDef,
  unknown
> = z.object({
  provider: z.literal("gmail").default("gmail").optional(),
  data: GmailData$inboundSchema,
  email: z.string(),
  credentials: OAuthRefreshTokenCredentials$inboundSchema,
});

/** @internal */
export type AuthenticatorGmailConnection$Outbound = {
  provider: "gmail";
  data: GmailData$Outbound;
  email: string;
  credentials: OAuthRefreshTokenCredentials$Outbound;
};

/** @internal */
export const AuthenticatorGmailConnection$outboundSchema: z.ZodType<
  AuthenticatorGmailConnection$Outbound,
  z.ZodTypeDef,
  AuthenticatorGmailConnection
> = z.object({
  provider: z.literal("gmail").default("gmail" as const),
  data: GmailData$outboundSchema,
  email: z.string(),
  credentials: OAuthRefreshTokenCredentials$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthenticatorGmailConnection$ {
  /** @deprecated use `AuthenticatorGmailConnection$inboundSchema` instead. */
  export const inboundSchema = AuthenticatorGmailConnection$inboundSchema;
  /** @deprecated use `AuthenticatorGmailConnection$outboundSchema` instead. */
  export const outboundSchema = AuthenticatorGmailConnection$outboundSchema;
  /** @deprecated use `AuthenticatorGmailConnection$Outbound` instead. */
  export type Outbound = AuthenticatorGmailConnection$Outbound;
}

export function authenticatorGmailConnectionToJSON(
  authenticatorGmailConnection: AuthenticatorGmailConnection,
): string {
  return JSON.stringify(
    AuthenticatorGmailConnection$outboundSchema.parse(
      authenticatorGmailConnection,
    ),
  );
}

export function authenticatorGmailConnectionFromJSON(
  jsonString: string,
): SafeParseResult<AuthenticatorGmailConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthenticatorGmailConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthenticatorGmailConnection' from JSON`,
  );
}
