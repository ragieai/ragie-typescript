/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DocumentMetadataUpdateMetadata =
  | string
  | number
  | boolean
  | Array<string>;

export type DocumentMetadataUpdate = {
  /**
   * The full document metadata inclusive of the update.
   */
  metadata: { [k: string]: string | number | boolean | Array<string> };
};

/** @internal */
export const DocumentMetadataUpdateMetadata$inboundSchema: z.ZodType<
  DocumentMetadataUpdateMetadata,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number().int(), z.boolean(), z.array(z.string())]);

/** @internal */
export type DocumentMetadataUpdateMetadata$Outbound =
  | string
  | number
  | boolean
  | Array<string>;

/** @internal */
export const DocumentMetadataUpdateMetadata$outboundSchema: z.ZodType<
  DocumentMetadataUpdateMetadata$Outbound,
  z.ZodTypeDef,
  DocumentMetadataUpdateMetadata
> = z.union([z.string(), z.number().int(), z.boolean(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentMetadataUpdateMetadata$ {
  /** @deprecated use `DocumentMetadataUpdateMetadata$inboundSchema` instead. */
  export const inboundSchema = DocumentMetadataUpdateMetadata$inboundSchema;
  /** @deprecated use `DocumentMetadataUpdateMetadata$outboundSchema` instead. */
  export const outboundSchema = DocumentMetadataUpdateMetadata$outboundSchema;
  /** @deprecated use `DocumentMetadataUpdateMetadata$Outbound` instead. */
  export type Outbound = DocumentMetadataUpdateMetadata$Outbound;
}

export function documentMetadataUpdateMetadataToJSON(
  documentMetadataUpdateMetadata: DocumentMetadataUpdateMetadata,
): string {
  return JSON.stringify(
    DocumentMetadataUpdateMetadata$outboundSchema.parse(
      documentMetadataUpdateMetadata,
    ),
  );
}

export function documentMetadataUpdateMetadataFromJSON(
  jsonString: string,
): SafeParseResult<DocumentMetadataUpdateMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentMetadataUpdateMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentMetadataUpdateMetadata' from JSON`,
  );
}

/** @internal */
export const DocumentMetadataUpdate$inboundSchema: z.ZodType<
  DocumentMetadataUpdate,
  z.ZodTypeDef,
  unknown
> = z.object({
  metadata: z.record(
    z.union([z.string(), z.number().int(), z.boolean(), z.array(z.string())]),
  ),
});

/** @internal */
export type DocumentMetadataUpdate$Outbound = {
  metadata: { [k: string]: string | number | boolean | Array<string> };
};

/** @internal */
export const DocumentMetadataUpdate$outboundSchema: z.ZodType<
  DocumentMetadataUpdate$Outbound,
  z.ZodTypeDef,
  DocumentMetadataUpdate
> = z.object({
  metadata: z.record(
    z.union([z.string(), z.number().int(), z.boolean(), z.array(z.string())]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentMetadataUpdate$ {
  /** @deprecated use `DocumentMetadataUpdate$inboundSchema` instead. */
  export const inboundSchema = DocumentMetadataUpdate$inboundSchema;
  /** @deprecated use `DocumentMetadataUpdate$outboundSchema` instead. */
  export const outboundSchema = DocumentMetadataUpdate$outboundSchema;
  /** @deprecated use `DocumentMetadataUpdate$Outbound` instead. */
  export type Outbound = DocumentMetadataUpdate$Outbound;
}

export function documentMetadataUpdateToJSON(
  documentMetadataUpdate: DocumentMetadataUpdate,
): string {
  return JSON.stringify(
    DocumentMetadataUpdate$outboundSchema.parse(documentMetadataUpdate),
  );
}

export function documentMetadataUpdateFromJSON(
  jsonString: string,
): SafeParseResult<DocumentMetadataUpdate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentMetadataUpdate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentMetadataUpdate' from JSON`,
  );
}
