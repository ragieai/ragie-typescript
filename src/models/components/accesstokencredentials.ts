/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AccessTokenCredentials = {
  accessToken: string;
};

/** @internal */
export const AccessTokenCredentials$inboundSchema: z.ZodType<
  AccessTokenCredentials,
  z.ZodTypeDef,
  unknown
> = z.object({
  access_token: z.string(),
}).transform((v) => {
  return remap$(v, {
    "access_token": "accessToken",
  });
});

/** @internal */
export type AccessTokenCredentials$Outbound = {
  access_token: string;
};

/** @internal */
export const AccessTokenCredentials$outboundSchema: z.ZodType<
  AccessTokenCredentials$Outbound,
  z.ZodTypeDef,
  AccessTokenCredentials
> = z.object({
  accessToken: z.string(),
}).transform((v) => {
  return remap$(v, {
    accessToken: "access_token",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccessTokenCredentials$ {
  /** @deprecated use `AccessTokenCredentials$inboundSchema` instead. */
  export const inboundSchema = AccessTokenCredentials$inboundSchema;
  /** @deprecated use `AccessTokenCredentials$outboundSchema` instead. */
  export const outboundSchema = AccessTokenCredentials$outboundSchema;
  /** @deprecated use `AccessTokenCredentials$Outbound` instead. */
  export type Outbound = AccessTokenCredentials$Outbound;
}

export function accessTokenCredentialsToJSON(
  accessTokenCredentials: AccessTokenCredentials,
): string {
  return JSON.stringify(
    AccessTokenCredentials$outboundSchema.parse(accessTokenCredentials),
  );
}

export function accessTokenCredentialsFromJSON(
  jsonString: string,
): SafeParseResult<AccessTokenCredentials, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccessTokenCredentials$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccessTokenCredentials' from JSON`,
  );
}
