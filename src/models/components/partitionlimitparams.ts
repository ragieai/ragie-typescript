/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PartitionLimitParams = {
  pagesHostedLimitMonthly?: number | null | undefined;
  pagesProcessedLimitMonthly?: number | null | undefined;
  pagesHostedLimitMax?: number | null | undefined;
  pagesProcessedLimitMax?: number | null | undefined;
};

/** @internal */
export const PartitionLimitParams$inboundSchema: z.ZodType<
  PartitionLimitParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  pages_hosted_limit_monthly: z.nullable(z.number().int()).optional(),
  pages_processed_limit_monthly: z.nullable(z.number().int()).optional(),
  pages_hosted_limit_max: z.nullable(z.number().int()).optional(),
  pages_processed_limit_max: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    "pages_hosted_limit_monthly": "pagesHostedLimitMonthly",
    "pages_processed_limit_monthly": "pagesProcessedLimitMonthly",
    "pages_hosted_limit_max": "pagesHostedLimitMax",
    "pages_processed_limit_max": "pagesProcessedLimitMax",
  });
});

/** @internal */
export type PartitionLimitParams$Outbound = {
  pages_hosted_limit_monthly?: number | null | undefined;
  pages_processed_limit_monthly?: number | null | undefined;
  pages_hosted_limit_max?: number | null | undefined;
  pages_processed_limit_max?: number | null | undefined;
};

/** @internal */
export const PartitionLimitParams$outboundSchema: z.ZodType<
  PartitionLimitParams$Outbound,
  z.ZodTypeDef,
  PartitionLimitParams
> = z.object({
  pagesHostedLimitMonthly: z.nullable(z.number().int()).optional(),
  pagesProcessedLimitMonthly: z.nullable(z.number().int()).optional(),
  pagesHostedLimitMax: z.nullable(z.number().int()).optional(),
  pagesProcessedLimitMax: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    pagesHostedLimitMonthly: "pages_hosted_limit_monthly",
    pagesProcessedLimitMonthly: "pages_processed_limit_monthly",
    pagesHostedLimitMax: "pages_hosted_limit_max",
    pagesProcessedLimitMax: "pages_processed_limit_max",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PartitionLimitParams$ {
  /** @deprecated use `PartitionLimitParams$inboundSchema` instead. */
  export const inboundSchema = PartitionLimitParams$inboundSchema;
  /** @deprecated use `PartitionLimitParams$outboundSchema` instead. */
  export const outboundSchema = PartitionLimitParams$outboundSchema;
  /** @deprecated use `PartitionLimitParams$Outbound` instead. */
  export type Outbound = PartitionLimitParams$Outbound;
}

export function partitionLimitParamsToJSON(
  partitionLimitParams: PartitionLimitParams,
): string {
  return JSON.stringify(
    PartitionLimitParams$outboundSchema.parse(partitionLimitParams),
  );
}

export function partitionLimitParamsFromJSON(
  jsonString: string,
): SafeParseResult<PartitionLimitParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PartitionLimitParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PartitionLimitParams' from JSON`,
  );
}
