/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  BackblazeCredentials,
  BackblazeCredentials$inboundSchema,
  BackblazeCredentials$Outbound,
  BackblazeCredentials$outboundSchema,
} from "./backblazecredentials.js";
import {
  BucketData,
  BucketData$inboundSchema,
  BucketData$Outbound,
  BucketData$outboundSchema,
} from "./bucketdata.js";

export type PublicBackblazeConnection = {
  provider?: "backblaze" | undefined;
  data: BucketData;
  credentials: BackblazeCredentials;
};

/** @internal */
export const PublicBackblazeConnection$inboundSchema: z.ZodType<
  PublicBackblazeConnection,
  z.ZodTypeDef,
  unknown
> = z.object({
  provider: z.literal("backblaze").default("backblaze").optional(),
  data: BucketData$inboundSchema,
  credentials: BackblazeCredentials$inboundSchema,
});

/** @internal */
export type PublicBackblazeConnection$Outbound = {
  provider: "backblaze";
  data: BucketData$Outbound;
  credentials: BackblazeCredentials$Outbound;
};

/** @internal */
export const PublicBackblazeConnection$outboundSchema: z.ZodType<
  PublicBackblazeConnection$Outbound,
  z.ZodTypeDef,
  PublicBackblazeConnection
> = z.object({
  provider: z.literal("backblaze").default("backblaze" as const),
  data: BucketData$outboundSchema,
  credentials: BackblazeCredentials$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublicBackblazeConnection$ {
  /** @deprecated use `PublicBackblazeConnection$inboundSchema` instead. */
  export const inboundSchema = PublicBackblazeConnection$inboundSchema;
  /** @deprecated use `PublicBackblazeConnection$outboundSchema` instead. */
  export const outboundSchema = PublicBackblazeConnection$outboundSchema;
  /** @deprecated use `PublicBackblazeConnection$Outbound` instead. */
  export type Outbound = PublicBackblazeConnection$Outbound;
}

export function publicBackblazeConnectionToJSON(
  publicBackblazeConnection: PublicBackblazeConnection,
): string {
  return JSON.stringify(
    PublicBackblazeConnection$outboundSchema.parse(publicBackblazeConnection),
  );
}

export function publicBackblazeConnectionFromJSON(
  jsonString: string,
): SafeParseResult<PublicBackblazeConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PublicBackblazeConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PublicBackblazeConnection' from JSON`,
  );
}
