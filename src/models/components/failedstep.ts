/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type FailedStep = {
  type?: "failed" | undefined;
  think: string;
  currentQuestion: string;
  errored?: boolean | undefined;
};

/** @internal */
export const FailedStep$inboundSchema: z.ZodType<
  FailedStep,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("failed").default("failed"),
  think: z.string(),
  current_question: z.string(),
  errored: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "current_question": "currentQuestion",
  });
});

/** @internal */
export type FailedStep$Outbound = {
  type: "failed";
  think: string;
  current_question: string;
  errored: boolean;
};

/** @internal */
export const FailedStep$outboundSchema: z.ZodType<
  FailedStep$Outbound,
  z.ZodTypeDef,
  FailedStep
> = z.object({
  type: z.literal("failed").default("failed" as const),
  think: z.string(),
  currentQuestion: z.string(),
  errored: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    currentQuestion: "current_question",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FailedStep$ {
  /** @deprecated use `FailedStep$inboundSchema` instead. */
  export const inboundSchema = FailedStep$inboundSchema;
  /** @deprecated use `FailedStep$outboundSchema` instead. */
  export const outboundSchema = FailedStep$outboundSchema;
  /** @deprecated use `FailedStep$Outbound` instead. */
  export type Outbound = FailedStep$Outbound;
}

export function failedStepToJSON(failedStep: FailedStep): string {
  return JSON.stringify(FailedStep$outboundSchema.parse(failedStep));
}

export function failedStepFromJSON(
  jsonString: string,
): SafeParseResult<FailedStep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FailedStep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FailedStep' from JSON`,
  );
}
