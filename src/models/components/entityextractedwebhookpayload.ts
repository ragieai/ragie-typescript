/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EntityExtractedWebhookPayload = {
  entityId: string;
  documentId: string;
  instructionId: string;
  documentMetadata: { [k: string]: any };
  documentExternalId: string | null;
  documentName: string;
  partition: string;
  syncId: string | null;
  data: { [k: string]: any };
};

/** @internal */
export const EntityExtractedWebhookPayload$inboundSchema: z.ZodType<
  EntityExtractedWebhookPayload,
  z.ZodTypeDef,
  unknown
> = z.object({
  entity_id: z.string(),
  document_id: z.string(),
  instruction_id: z.string(),
  document_metadata: z.record(z.any()),
  document_external_id: z.nullable(z.string()),
  document_name: z.string(),
  partition: z.string(),
  sync_id: z.nullable(z.string()),
  data: z.record(z.any()),
}).transform((v) => {
  return remap$(v, {
    "entity_id": "entityId",
    "document_id": "documentId",
    "instruction_id": "instructionId",
    "document_metadata": "documentMetadata",
    "document_external_id": "documentExternalId",
    "document_name": "documentName",
    "sync_id": "syncId",
  });
});

/** @internal */
export type EntityExtractedWebhookPayload$Outbound = {
  entity_id: string;
  document_id: string;
  instruction_id: string;
  document_metadata: { [k: string]: any };
  document_external_id: string | null;
  document_name: string;
  partition: string;
  sync_id: string | null;
  data: { [k: string]: any };
};

/** @internal */
export const EntityExtractedWebhookPayload$outboundSchema: z.ZodType<
  EntityExtractedWebhookPayload$Outbound,
  z.ZodTypeDef,
  EntityExtractedWebhookPayload
> = z.object({
  entityId: z.string(),
  documentId: z.string(),
  instructionId: z.string(),
  documentMetadata: z.record(z.any()),
  documentExternalId: z.nullable(z.string()),
  documentName: z.string(),
  partition: z.string(),
  syncId: z.nullable(z.string()),
  data: z.record(z.any()),
}).transform((v) => {
  return remap$(v, {
    entityId: "entity_id",
    documentId: "document_id",
    instructionId: "instruction_id",
    documentMetadata: "document_metadata",
    documentExternalId: "document_external_id",
    documentName: "document_name",
    syncId: "sync_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityExtractedWebhookPayload$ {
  /** @deprecated use `EntityExtractedWebhookPayload$inboundSchema` instead. */
  export const inboundSchema = EntityExtractedWebhookPayload$inboundSchema;
  /** @deprecated use `EntityExtractedWebhookPayload$outboundSchema` instead. */
  export const outboundSchema = EntityExtractedWebhookPayload$outboundSchema;
  /** @deprecated use `EntityExtractedWebhookPayload$Outbound` instead. */
  export type Outbound = EntityExtractedWebhookPayload$Outbound;
}

export function entityExtractedWebhookPayloadToJSON(
  entityExtractedWebhookPayload: EntityExtractedWebhookPayload,
): string {
  return JSON.stringify(
    EntityExtractedWebhookPayload$outboundSchema.parse(
      entityExtractedWebhookPayload,
    ),
  );
}

export function entityExtractedWebhookPayloadFromJSON(
  jsonString: string,
): SafeParseResult<EntityExtractedWebhookPayload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityExtractedWebhookPayload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityExtractedWebhookPayload' from JSON`,
  );
}
