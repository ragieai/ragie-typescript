/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ConnectionSyncFinishedWebhookPayload = {
  connectionId: string;
  syncId: string;
  partition: string;
  connectionMetadata: { [k: string]: any };
};

/** @internal */
export const ConnectionSyncFinishedWebhookPayload$inboundSchema: z.ZodType<
  ConnectionSyncFinishedWebhookPayload,
  z.ZodTypeDef,
  unknown
> = z.object({
  connection_id: z.string(),
  sync_id: z.string(),
  partition: z.string(),
  connection_metadata: z.record(z.any()),
}).transform((v) => {
  return remap$(v, {
    "connection_id": "connectionId",
    "sync_id": "syncId",
    "connection_metadata": "connectionMetadata",
  });
});

/** @internal */
export type ConnectionSyncFinishedWebhookPayload$Outbound = {
  connection_id: string;
  sync_id: string;
  partition: string;
  connection_metadata: { [k: string]: any };
};

/** @internal */
export const ConnectionSyncFinishedWebhookPayload$outboundSchema: z.ZodType<
  ConnectionSyncFinishedWebhookPayload$Outbound,
  z.ZodTypeDef,
  ConnectionSyncFinishedWebhookPayload
> = z.object({
  connectionId: z.string(),
  syncId: z.string(),
  partition: z.string(),
  connectionMetadata: z.record(z.any()),
}).transform((v) => {
  return remap$(v, {
    connectionId: "connection_id",
    syncId: "sync_id",
    connectionMetadata: "connection_metadata",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConnectionSyncFinishedWebhookPayload$ {
  /** @deprecated use `ConnectionSyncFinishedWebhookPayload$inboundSchema` instead. */
  export const inboundSchema =
    ConnectionSyncFinishedWebhookPayload$inboundSchema;
  /** @deprecated use `ConnectionSyncFinishedWebhookPayload$outboundSchema` instead. */
  export const outboundSchema =
    ConnectionSyncFinishedWebhookPayload$outboundSchema;
  /** @deprecated use `ConnectionSyncFinishedWebhookPayload$Outbound` instead. */
  export type Outbound = ConnectionSyncFinishedWebhookPayload$Outbound;
}

export function connectionSyncFinishedWebhookPayloadToJSON(
  connectionSyncFinishedWebhookPayload: ConnectionSyncFinishedWebhookPayload,
): string {
  return JSON.stringify(
    ConnectionSyncFinishedWebhookPayload$outboundSchema.parse(
      connectionSyncFinishedWebhookPayload,
    ),
  );
}

export function connectionSyncFinishedWebhookPayloadFromJSON(
  jsonString: string,
): SafeParseResult<ConnectionSyncFinishedWebhookPayload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ConnectionSyncFinishedWebhookPayload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConnectionSyncFinishedWebhookPayload' from JSON`,
  );
}
