/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PartitionLimits,
  PartitionLimits$inboundSchema,
  PartitionLimits$Outbound,
  PartitionLimits$outboundSchema,
} from "./partitionlimits.js";
import {
  PartitionStats,
  PartitionStats$inboundSchema,
  PartitionStats$Outbound,
  PartitionStats$outboundSchema,
} from "./partitionstats.js";

export type PartitionDetail = {
  name: string;
  isDefault: boolean;
  limitExceededAt: Date | null;
  limits: PartitionLimits;
  stats: PartitionStats;
};

/** @internal */
export const PartitionDetail$inboundSchema: z.ZodType<
  PartitionDetail,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  is_default: z.boolean(),
  limit_exceeded_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  limits: PartitionLimits$inboundSchema,
  stats: PartitionStats$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "is_default": "isDefault",
    "limit_exceeded_at": "limitExceededAt",
  });
});

/** @internal */
export type PartitionDetail$Outbound = {
  name: string;
  is_default: boolean;
  limit_exceeded_at: string | null;
  limits: PartitionLimits$Outbound;
  stats: PartitionStats$Outbound;
};

/** @internal */
export const PartitionDetail$outboundSchema: z.ZodType<
  PartitionDetail$Outbound,
  z.ZodTypeDef,
  PartitionDetail
> = z.object({
  name: z.string(),
  isDefault: z.boolean(),
  limitExceededAt: z.nullable(z.date().transform(v => v.toISOString())),
  limits: PartitionLimits$outboundSchema,
  stats: PartitionStats$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    isDefault: "is_default",
    limitExceededAt: "limit_exceeded_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PartitionDetail$ {
  /** @deprecated use `PartitionDetail$inboundSchema` instead. */
  export const inboundSchema = PartitionDetail$inboundSchema;
  /** @deprecated use `PartitionDetail$outboundSchema` instead. */
  export const outboundSchema = PartitionDetail$outboundSchema;
  /** @deprecated use `PartitionDetail$Outbound` instead. */
  export type Outbound = PartitionDetail$Outbound;
}

export function partitionDetailToJSON(
  partitionDetail: PartitionDetail,
): string {
  return JSON.stringify(PartitionDetail$outboundSchema.parse(partitionDetail));
}

export function partitionDetailFromJSON(
  jsonString: string,
): SafeParseResult<PartitionDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PartitionDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PartitionDetail' from JSON`,
  );
}
