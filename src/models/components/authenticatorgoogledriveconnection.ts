/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  GoogleFolderData,
  GoogleFolderData$inboundSchema,
  GoogleFolderData$Outbound,
  GoogleFolderData$outboundSchema,
} from "./googlefolderdata.js";
import {
  OAuthRefreshTokenCredentials,
  OAuthRefreshTokenCredentials$inboundSchema,
  OAuthRefreshTokenCredentials$Outbound,
  OAuthRefreshTokenCredentials$outboundSchema,
} from "./oauthrefreshtokencredentials.js";

export type AuthenticatorGoogleDriveConnection = {
  provider?: "google_drive" | undefined;
  data: Array<GoogleFolderData>;
  /**
   * The email of the Google Drive account this is for
   */
  email: string;
  credentials: OAuthRefreshTokenCredentials;
};

/** @internal */
export const AuthenticatorGoogleDriveConnection$inboundSchema: z.ZodType<
  AuthenticatorGoogleDriveConnection,
  z.ZodTypeDef,
  unknown
> = z.object({
  provider: z.literal("google_drive").default("google_drive").optional(),
  data: z.array(GoogleFolderData$inboundSchema),
  email: z.string(),
  credentials: OAuthRefreshTokenCredentials$inboundSchema,
});

/** @internal */
export type AuthenticatorGoogleDriveConnection$Outbound = {
  provider: "google_drive";
  data: Array<GoogleFolderData$Outbound>;
  email: string;
  credentials: OAuthRefreshTokenCredentials$Outbound;
};

/** @internal */
export const AuthenticatorGoogleDriveConnection$outboundSchema: z.ZodType<
  AuthenticatorGoogleDriveConnection$Outbound,
  z.ZodTypeDef,
  AuthenticatorGoogleDriveConnection
> = z.object({
  provider: z.literal("google_drive").default("google_drive" as const),
  data: z.array(GoogleFolderData$outboundSchema),
  email: z.string(),
  credentials: OAuthRefreshTokenCredentials$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthenticatorGoogleDriveConnection$ {
  /** @deprecated use `AuthenticatorGoogleDriveConnection$inboundSchema` instead. */
  export const inboundSchema = AuthenticatorGoogleDriveConnection$inboundSchema;
  /** @deprecated use `AuthenticatorGoogleDriveConnection$outboundSchema` instead. */
  export const outboundSchema =
    AuthenticatorGoogleDriveConnection$outboundSchema;
  /** @deprecated use `AuthenticatorGoogleDriveConnection$Outbound` instead. */
  export type Outbound = AuthenticatorGoogleDriveConnection$Outbound;
}

export function authenticatorGoogleDriveConnectionToJSON(
  authenticatorGoogleDriveConnection: AuthenticatorGoogleDriveConnection,
): string {
  return JSON.stringify(
    AuthenticatorGoogleDriveConnection$outboundSchema.parse(
      authenticatorGoogleDriveConnection,
    ),
  );
}

export function authenticatorGoogleDriveConnectionFromJSON(
  jsonString: string,
): SafeParseResult<AuthenticatorGoogleDriveConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AuthenticatorGoogleDriveConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthenticatorGoogleDriveConnection' from JSON`,
  );
}
