/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AgentHoppsModelsModelsUsage,
  AgentHoppsModelsModelsUsage$inboundSchema,
  AgentHoppsModelsModelsUsage$Outbound,
  AgentHoppsModelsModelsUsage$outboundSchema,
} from "./agenthoppsmodelsmodelsusage.js";
import {
  AnswerStep,
  AnswerStep$inboundSchema,
  AnswerStep$Outbound,
  AnswerStep$outboundSchema,
} from "./answerstep.js";
import {
  CodeInterpreterEvidence,
  CodeInterpreterEvidence$inboundSchema,
  CodeInterpreterEvidence$Outbound,
  CodeInterpreterEvidence$outboundSchema,
} from "./codeinterpreterevidence.js";
import {
  CodeStep,
  CodeStep$inboundSchema,
  CodeStep$Outbound,
  CodeStep$outboundSchema,
} from "./codestep.js";
import {
  EvaluatedAnswerStep,
  EvaluatedAnswerStep$inboundSchema,
  EvaluatedAnswerStep$Outbound,
  EvaluatedAnswerStep$outboundSchema,
} from "./evaluatedanswerstep.js";
import {
  PlanStep,
  PlanStep$inboundSchema,
  PlanStep$Outbound,
  PlanStep$outboundSchema,
} from "./planstep.js";
import {
  RagieEvidence,
  RagieEvidence$inboundSchema,
  RagieEvidence$Outbound,
  RagieEvidence$outboundSchema,
} from "./ragieevidence.js";
import {
  SearchStep,
  SearchStep$inboundSchema,
  SearchStep$Outbound,
  SearchStep$outboundSchema,
} from "./searchstep.js";
import {
  SurrenderStep,
  SurrenderStep$inboundSchema,
  SurrenderStep$Outbound,
  SurrenderStep$outboundSchema,
} from "./surrenderstep.js";

export type Evidence = RagieEvidence | CodeInterpreterEvidence;

export type Steps =
  | EvaluatedAnswerStep
  | AnswerStep
  | SearchStep
  | CodeStep
  | SurrenderStep
  | PlanStep;

export type FinalAnswer = {
  /**
   * The final answer to the question.
   */
  text: string;
  /**
   * The evidence used to derive the answer.
   */
  evidence?: Array<RagieEvidence | CodeInterpreterEvidence> | undefined;
  /**
   * The steps that led to the answer.
   */
  steps?:
    | Array<
      | EvaluatedAnswerStep
      | AnswerStep
      | SearchStep
      | CodeStep
      | SurrenderStep
      | PlanStep
    >
    | undefined;
  usage?: AgentHoppsModelsModelsUsage | undefined;
};

/** @internal */
export const Evidence$inboundSchema: z.ZodType<
  Evidence,
  z.ZodTypeDef,
  unknown
> = z.union([
  RagieEvidence$inboundSchema,
  CodeInterpreterEvidence$inboundSchema,
]);

/** @internal */
export type Evidence$Outbound =
  | RagieEvidence$Outbound
  | CodeInterpreterEvidence$Outbound;

/** @internal */
export const Evidence$outboundSchema: z.ZodType<
  Evidence$Outbound,
  z.ZodTypeDef,
  Evidence
> = z.union([
  RagieEvidence$outboundSchema,
  CodeInterpreterEvidence$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Evidence$ {
  /** @deprecated use `Evidence$inboundSchema` instead. */
  export const inboundSchema = Evidence$inboundSchema;
  /** @deprecated use `Evidence$outboundSchema` instead. */
  export const outboundSchema = Evidence$outboundSchema;
  /** @deprecated use `Evidence$Outbound` instead. */
  export type Outbound = Evidence$Outbound;
}

export function evidenceToJSON(evidence: Evidence): string {
  return JSON.stringify(Evidence$outboundSchema.parse(evidence));
}

export function evidenceFromJSON(
  jsonString: string,
): SafeParseResult<Evidence, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Evidence$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Evidence' from JSON`,
  );
}

/** @internal */
export const Steps$inboundSchema: z.ZodType<Steps, z.ZodTypeDef, unknown> = z
  .union([
    EvaluatedAnswerStep$inboundSchema,
    AnswerStep$inboundSchema,
    SearchStep$inboundSchema,
    CodeStep$inboundSchema,
    SurrenderStep$inboundSchema,
    PlanStep$inboundSchema,
  ]);

/** @internal */
export type Steps$Outbound =
  | EvaluatedAnswerStep$Outbound
  | AnswerStep$Outbound
  | SearchStep$Outbound
  | CodeStep$Outbound
  | SurrenderStep$Outbound
  | PlanStep$Outbound;

/** @internal */
export const Steps$outboundSchema: z.ZodType<
  Steps$Outbound,
  z.ZodTypeDef,
  Steps
> = z.union([
  EvaluatedAnswerStep$outboundSchema,
  AnswerStep$outboundSchema,
  SearchStep$outboundSchema,
  CodeStep$outboundSchema,
  SurrenderStep$outboundSchema,
  PlanStep$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Steps$ {
  /** @deprecated use `Steps$inboundSchema` instead. */
  export const inboundSchema = Steps$inboundSchema;
  /** @deprecated use `Steps$outboundSchema` instead. */
  export const outboundSchema = Steps$outboundSchema;
  /** @deprecated use `Steps$Outbound` instead. */
  export type Outbound = Steps$Outbound;
}

export function stepsToJSON(steps: Steps): string {
  return JSON.stringify(Steps$outboundSchema.parse(steps));
}

export function stepsFromJSON(
  jsonString: string,
): SafeParseResult<Steps, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Steps$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Steps' from JSON`,
  );
}

/** @internal */
export const FinalAnswer$inboundSchema: z.ZodType<
  FinalAnswer,
  z.ZodTypeDef,
  unknown
> = z.object({
  text: z.string(),
  evidence: z.array(
    z.union([
      RagieEvidence$inboundSchema,
      CodeInterpreterEvidence$inboundSchema,
    ]),
  ).optional(),
  steps: z.array(
    z.union([
      EvaluatedAnswerStep$inboundSchema,
      AnswerStep$inboundSchema,
      SearchStep$inboundSchema,
      CodeStep$inboundSchema,
      SurrenderStep$inboundSchema,
      PlanStep$inboundSchema,
    ]),
  ).optional(),
  usage: AgentHoppsModelsModelsUsage$inboundSchema.optional(),
});

/** @internal */
export type FinalAnswer$Outbound = {
  text: string;
  evidence?:
    | Array<RagieEvidence$Outbound | CodeInterpreterEvidence$Outbound>
    | undefined;
  steps?:
    | Array<
      | EvaluatedAnswerStep$Outbound
      | AnswerStep$Outbound
      | SearchStep$Outbound
      | CodeStep$Outbound
      | SurrenderStep$Outbound
      | PlanStep$Outbound
    >
    | undefined;
  usage?: AgentHoppsModelsModelsUsage$Outbound | undefined;
};

/** @internal */
export const FinalAnswer$outboundSchema: z.ZodType<
  FinalAnswer$Outbound,
  z.ZodTypeDef,
  FinalAnswer
> = z.object({
  text: z.string(),
  evidence: z.array(
    z.union([
      RagieEvidence$outboundSchema,
      CodeInterpreterEvidence$outboundSchema,
    ]),
  ).optional(),
  steps: z.array(
    z.union([
      EvaluatedAnswerStep$outboundSchema,
      AnswerStep$outboundSchema,
      SearchStep$outboundSchema,
      CodeStep$outboundSchema,
      SurrenderStep$outboundSchema,
      PlanStep$outboundSchema,
    ]),
  ).optional(),
  usage: AgentHoppsModelsModelsUsage$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FinalAnswer$ {
  /** @deprecated use `FinalAnswer$inboundSchema` instead. */
  export const inboundSchema = FinalAnswer$inboundSchema;
  /** @deprecated use `FinalAnswer$outboundSchema` instead. */
  export const outboundSchema = FinalAnswer$outboundSchema;
  /** @deprecated use `FinalAnswer$Outbound` instead. */
  export type Outbound = FinalAnswer$Outbound;
}

export function finalAnswerToJSON(finalAnswer: FinalAnswer): string {
  return JSON.stringify(FinalAnswer$outboundSchema.parse(finalAnswer));
}

export function finalAnswerFromJSON(
  jsonString: string,
): SafeParseResult<FinalAnswer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FinalAnswer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FinalAnswer' from JSON`,
  );
}
