/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type WordTimestamp = {
  startTime: number;
  endTime: number;
  word: string;
  probability: number;
};

/** @internal */
export const WordTimestamp$inboundSchema: z.ZodType<
  WordTimestamp,
  z.ZodTypeDef,
  unknown
> = z.object({
  start_time: z.number(),
  end_time: z.number(),
  word: z.string(),
  probability: z.number(),
}).transform((v) => {
  return remap$(v, {
    "start_time": "startTime",
    "end_time": "endTime",
  });
});

/** @internal */
export type WordTimestamp$Outbound = {
  start_time: number;
  end_time: number;
  word: string;
  probability: number;
};

/** @internal */
export const WordTimestamp$outboundSchema: z.ZodType<
  WordTimestamp$Outbound,
  z.ZodTypeDef,
  WordTimestamp
> = z.object({
  startTime: z.number(),
  endTime: z.number(),
  word: z.string(),
  probability: z.number(),
}).transform((v) => {
  return remap$(v, {
    startTime: "start_time",
    endTime: "end_time",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WordTimestamp$ {
  /** @deprecated use `WordTimestamp$inboundSchema` instead. */
  export const inboundSchema = WordTimestamp$inboundSchema;
  /** @deprecated use `WordTimestamp$outboundSchema` instead. */
  export const outboundSchema = WordTimestamp$outboundSchema;
  /** @deprecated use `WordTimestamp$Outbound` instead. */
  export type Outbound = WordTimestamp$Outbound;
}

export function wordTimestampToJSON(wordTimestamp: WordTimestamp): string {
  return JSON.stringify(WordTimestamp$outboundSchema.parse(wordTimestamp));
}

export function wordTimestampFromJSON(
  jsonString: string,
): SafeParseResult<WordTimestamp, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WordTimestamp$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WordTimestamp' from JSON`,
  );
}
