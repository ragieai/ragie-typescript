/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type FreshdeskCredentials = {
  domain: string;
  apiKey: string;
};

/** @internal */
export const FreshdeskCredentials$inboundSchema: z.ZodType<
  FreshdeskCredentials,
  z.ZodTypeDef,
  unknown
> = z.object({
  domain: z.string(),
  api_key: z.string(),
}).transform((v) => {
  return remap$(v, {
    "api_key": "apiKey",
  });
});

/** @internal */
export type FreshdeskCredentials$Outbound = {
  domain: string;
  api_key: string;
};

/** @internal */
export const FreshdeskCredentials$outboundSchema: z.ZodType<
  FreshdeskCredentials$Outbound,
  z.ZodTypeDef,
  FreshdeskCredentials
> = z.object({
  domain: z.string(),
  apiKey: z.string(),
}).transform((v) => {
  return remap$(v, {
    apiKey: "api_key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FreshdeskCredentials$ {
  /** @deprecated use `FreshdeskCredentials$inboundSchema` instead. */
  export const inboundSchema = FreshdeskCredentials$inboundSchema;
  /** @deprecated use `FreshdeskCredentials$outboundSchema` instead. */
  export const outboundSchema = FreshdeskCredentials$outboundSchema;
  /** @deprecated use `FreshdeskCredentials$Outbound` instead. */
  export type Outbound = FreshdeskCredentials$Outbound;
}

export function freshdeskCredentialsToJSON(
  freshdeskCredentials: FreshdeskCredentials,
): string {
  return JSON.stringify(
    FreshdeskCredentials$outboundSchema.parse(freshdeskCredentials),
  );
}

export function freshdeskCredentialsFromJSON(
  jsonString: string,
): SafeParseResult<FreshdeskCredentials, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FreshdeskCredentials$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FreshdeskCredentials' from JSON`,
  );
}
