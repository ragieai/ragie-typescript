/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Search,
  Search$inboundSchema,
  Search$Outbound,
  Search$outboundSchema,
} from "./search.js";

export type SearchStep = {
  type?: "search" | undefined;
  think: string;
  currentQuestion: string;
  search: Search;
};

/** @internal */
export const SearchStep$inboundSchema: z.ZodType<
  SearchStep,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("search").default("search"),
  think: z.string(),
  current_question: z.string(),
  search: Search$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "current_question": "currentQuestion",
  });
});

/** @internal */
export type SearchStep$Outbound = {
  type: "search";
  think: string;
  current_question: string;
  search: Search$Outbound;
};

/** @internal */
export const SearchStep$outboundSchema: z.ZodType<
  SearchStep$Outbound,
  z.ZodTypeDef,
  SearchStep
> = z.object({
  type: z.literal("search").default("search" as const),
  think: z.string(),
  currentQuestion: z.string(),
  search: Search$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    currentQuestion: "current_question",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchStep$ {
  /** @deprecated use `SearchStep$inboundSchema` instead. */
  export const inboundSchema = SearchStep$inboundSchema;
  /** @deprecated use `SearchStep$outboundSchema` instead. */
  export const outboundSchema = SearchStep$outboundSchema;
  /** @deprecated use `SearchStep$Outbound` instead. */
  export type Outbound = SearchStep$Outbound;
}

export function searchStepToJSON(searchStep: SearchStep): string {
  return JSON.stringify(SearchStep$outboundSchema.parse(searchStep));
}

export function searchStepFromJSON(
  jsonString: string,
): SafeParseResult<SearchStep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchStep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchStep' from JSON`,
  );
}
