/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ZendeskCredentials = {
  domain: string;
  email: string;
  apiToken: string;
};

/** @internal */
export const ZendeskCredentials$inboundSchema: z.ZodType<
  ZendeskCredentials,
  z.ZodTypeDef,
  unknown
> = z.object({
  domain: z.string(),
  email: z.string(),
  api_token: z.string(),
}).transform((v) => {
  return remap$(v, {
    "api_token": "apiToken",
  });
});

/** @internal */
export type ZendeskCredentials$Outbound = {
  domain: string;
  email: string;
  api_token: string;
};

/** @internal */
export const ZendeskCredentials$outboundSchema: z.ZodType<
  ZendeskCredentials$Outbound,
  z.ZodTypeDef,
  ZendeskCredentials
> = z.object({
  domain: z.string(),
  email: z.string(),
  apiToken: z.string(),
}).transform((v) => {
  return remap$(v, {
    apiToken: "api_token",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ZendeskCredentials$ {
  /** @deprecated use `ZendeskCredentials$inboundSchema` instead. */
  export const inboundSchema = ZendeskCredentials$inboundSchema;
  /** @deprecated use `ZendeskCredentials$outboundSchema` instead. */
  export const outboundSchema = ZendeskCredentials$outboundSchema;
  /** @deprecated use `ZendeskCredentials$Outbound` instead. */
  export type Outbound = ZendeskCredentials$Outbound;
}

export function zendeskCredentialsToJSON(
  zendeskCredentials: ZendeskCredentials,
): string {
  return JSON.stringify(
    ZendeskCredentials$outboundSchema.parse(zendeskCredentials),
  );
}

export function zendeskCredentialsFromJSON(
  jsonString: string,
): SafeParseResult<ZendeskCredentials, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ZendeskCredentials$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ZendeskCredentials' from JSON`,
  );
}
