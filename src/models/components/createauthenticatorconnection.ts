/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AuthenticatorConfluenceConnection,
  AuthenticatorConfluenceConnection$inboundSchema,
  AuthenticatorConfluenceConnection$Outbound,
  AuthenticatorConfluenceConnection$outboundSchema,
} from "./authenticatorconfluenceconnection.js";
import {
  AuthenticatorDropboxConnection,
  AuthenticatorDropboxConnection$inboundSchema,
  AuthenticatorDropboxConnection$Outbound,
  AuthenticatorDropboxConnection$outboundSchema,
} from "./authenticatordropboxconnection.js";
import {
  AuthenticatorGmailConnection,
  AuthenticatorGmailConnection$inboundSchema,
  AuthenticatorGmailConnection$Outbound,
  AuthenticatorGmailConnection$outboundSchema,
} from "./authenticatorgmailconnection.js";
import {
  AuthenticatorGoogleDriveConnection,
  AuthenticatorGoogleDriveConnection$inboundSchema,
  AuthenticatorGoogleDriveConnection$Outbound,
  AuthenticatorGoogleDriveConnection$outboundSchema,
} from "./authenticatorgoogledriveconnection.js";
import {
  AuthenticatorHubspotConnection,
  AuthenticatorHubspotConnection$inboundSchema,
  AuthenticatorHubspotConnection$Outbound,
  AuthenticatorHubspotConnection$outboundSchema,
} from "./authenticatorhubspotconnection.js";
import {
  AuthenticatorJiraConnection,
  AuthenticatorJiraConnection$inboundSchema,
  AuthenticatorJiraConnection$Outbound,
  AuthenticatorJiraConnection$outboundSchema,
} from "./authenticatorjiraconnection.js";
import {
  AuthenticatorNotionConnection,
  AuthenticatorNotionConnection$inboundSchema,
  AuthenticatorNotionConnection$Outbound,
  AuthenticatorNotionConnection$outboundSchema,
} from "./authenticatornotionconnection.js";
import {
  AuthenticatorOnedriveConnection,
  AuthenticatorOnedriveConnection$inboundSchema,
  AuthenticatorOnedriveConnection$Outbound,
  AuthenticatorOnedriveConnection$outboundSchema,
} from "./authenticatoronedriveconnection.js";
import {
  AuthenticatorSalesforceConnection,
  AuthenticatorSalesforceConnection$inboundSchema,
  AuthenticatorSalesforceConnection$Outbound,
  AuthenticatorSalesforceConnection$outboundSchema,
} from "./authenticatorsalesforceconnection.js";
import {
  AuthenticatorSharepointConnection,
  AuthenticatorSharepointConnection$inboundSchema,
  AuthenticatorSharepointConnection$Outbound,
  AuthenticatorSharepointConnection$outboundSchema,
} from "./authenticatorsharepointconnection.js";
import {
  AuthenticatorSlackConnection,
  AuthenticatorSlackConnection$inboundSchema,
  AuthenticatorSlackConnection$Outbound,
  AuthenticatorSlackConnection$outboundSchema,
} from "./authenticatorslackconnection.js";
import {
  MediaModeParam,
  MediaModeParam$inboundSchema,
  MediaModeParam$Outbound,
  MediaModeParam$outboundSchema,
} from "./mediamodeparam.js";

export type CreateAuthenticatorConnectionMetadata =
  | string
  | number
  | boolean
  | Array<string>;

export type CreateAuthenticatorConnectionConnection =
  | (AuthenticatorHubspotConnection & { provider: "hubspot" })
  | (AuthenticatorNotionConnection & { provider: "notion" })
  | (AuthenticatorDropboxConnection & { provider: "dropbox" })
  | (AuthenticatorGmailConnection & { provider: "gmail" })
  | (AuthenticatorGoogleDriveConnection & { provider: "google_drive" })
  | (AuthenticatorOnedriveConnection & { provider: "onedrive" })
  | (AuthenticatorSalesforceConnection & { provider: "salesforce" })
  | (AuthenticatorSharepointConnection & { provider: "sharepoint" })
  | (AuthenticatorSlackConnection & { provider: "slack" })
  | (AuthenticatorConfluenceConnection & { provider: "confluence" })
  | (AuthenticatorJiraConnection & { provider: "jira" });

export type CreateAuthenticatorConnection = {
  partitionStrategy: MediaModeParam;
  partition?: string | null | undefined;
  pageLimit?: number | null | undefined;
  config?: { [k: string]: any } | null | undefined;
  /**
   * Metadata for the document. Keys must be strings. Values may be strings, numbers, booleans, or lists of strings. Numbers may be integers or floating point and will be converted to 64 bit floating point. 1000 total values are allowed. Each item in an array counts towards the total. The following keys are reserved for internal use: `document_id`, `document_type`, `document_source`, `document_name`, `document_uploaded_at`, `start_time`, `end_time`.
   */
  metadata?:
    | { [k: string]: string | number | boolean | Array<string> }
    | undefined;
  connection:
    | (AuthenticatorHubspotConnection & { provider: "hubspot" })
    | (AuthenticatorNotionConnection & { provider: "notion" })
    | (AuthenticatorDropboxConnection & { provider: "dropbox" })
    | (AuthenticatorGmailConnection & { provider: "gmail" })
    | (AuthenticatorGoogleDriveConnection & { provider: "google_drive" })
    | (AuthenticatorOnedriveConnection & { provider: "onedrive" })
    | (AuthenticatorSalesforceConnection & { provider: "salesforce" })
    | (AuthenticatorSharepointConnection & { provider: "sharepoint" })
    | (AuthenticatorSlackConnection & { provider: "slack" })
    | (AuthenticatorConfluenceConnection & { provider: "confluence" })
    | (AuthenticatorJiraConnection & { provider: "jira" });
};

/** @internal */
export const CreateAuthenticatorConnectionMetadata$inboundSchema: z.ZodType<
  CreateAuthenticatorConnectionMetadata,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number().int(), z.boolean(), z.array(z.string())]);

/** @internal */
export type CreateAuthenticatorConnectionMetadata$Outbound =
  | string
  | number
  | boolean
  | Array<string>;

/** @internal */
export const CreateAuthenticatorConnectionMetadata$outboundSchema: z.ZodType<
  CreateAuthenticatorConnectionMetadata$Outbound,
  z.ZodTypeDef,
  CreateAuthenticatorConnectionMetadata
> = z.union([z.string(), z.number().int(), z.boolean(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAuthenticatorConnectionMetadata$ {
  /** @deprecated use `CreateAuthenticatorConnectionMetadata$inboundSchema` instead. */
  export const inboundSchema =
    CreateAuthenticatorConnectionMetadata$inboundSchema;
  /** @deprecated use `CreateAuthenticatorConnectionMetadata$outboundSchema` instead. */
  export const outboundSchema =
    CreateAuthenticatorConnectionMetadata$outboundSchema;
  /** @deprecated use `CreateAuthenticatorConnectionMetadata$Outbound` instead. */
  export type Outbound = CreateAuthenticatorConnectionMetadata$Outbound;
}

export function createAuthenticatorConnectionMetadataToJSON(
  createAuthenticatorConnectionMetadata: CreateAuthenticatorConnectionMetadata,
): string {
  return JSON.stringify(
    CreateAuthenticatorConnectionMetadata$outboundSchema.parse(
      createAuthenticatorConnectionMetadata,
    ),
  );
}

export function createAuthenticatorConnectionMetadataFromJSON(
  jsonString: string,
): SafeParseResult<CreateAuthenticatorConnectionMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAuthenticatorConnectionMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAuthenticatorConnectionMetadata' from JSON`,
  );
}

/** @internal */
export const CreateAuthenticatorConnectionConnection$inboundSchema: z.ZodType<
  CreateAuthenticatorConnectionConnection,
  z.ZodTypeDef,
  unknown
> = z.union([
  AuthenticatorHubspotConnection$inboundSchema.and(
    z.object({ provider: z.literal("hubspot") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  AuthenticatorNotionConnection$inboundSchema.and(
    z.object({ provider: z.literal("notion") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  AuthenticatorDropboxConnection$inboundSchema.and(
    z.object({ provider: z.literal("dropbox") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  AuthenticatorGmailConnection$inboundSchema.and(
    z.object({ provider: z.literal("gmail") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  AuthenticatorGoogleDriveConnection$inboundSchema.and(
    z.object({ provider: z.literal("google_drive") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  AuthenticatorOnedriveConnection$inboundSchema.and(
    z.object({ provider: z.literal("onedrive") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  AuthenticatorSalesforceConnection$inboundSchema.and(
    z.object({ provider: z.literal("salesforce") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  AuthenticatorSharepointConnection$inboundSchema.and(
    z.object({ provider: z.literal("sharepoint") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  AuthenticatorSlackConnection$inboundSchema.and(
    z.object({ provider: z.literal("slack") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  AuthenticatorConfluenceConnection$inboundSchema.and(
    z.object({ provider: z.literal("confluence") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  AuthenticatorJiraConnection$inboundSchema.and(
    z.object({ provider: z.literal("jira") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
]);

/** @internal */
export type CreateAuthenticatorConnectionConnection$Outbound =
  | (AuthenticatorHubspotConnection$Outbound & { provider: "hubspot" })
  | (AuthenticatorNotionConnection$Outbound & { provider: "notion" })
  | (AuthenticatorDropboxConnection$Outbound & { provider: "dropbox" })
  | (AuthenticatorGmailConnection$Outbound & { provider: "gmail" })
  | (AuthenticatorGoogleDriveConnection$Outbound & { provider: "google_drive" })
  | (AuthenticatorOnedriveConnection$Outbound & { provider: "onedrive" })
  | (AuthenticatorSalesforceConnection$Outbound & { provider: "salesforce" })
  | (AuthenticatorSharepointConnection$Outbound & { provider: "sharepoint" })
  | (AuthenticatorSlackConnection$Outbound & { provider: "slack" })
  | (AuthenticatorConfluenceConnection$Outbound & { provider: "confluence" })
  | (AuthenticatorJiraConnection$Outbound & { provider: "jira" });

/** @internal */
export const CreateAuthenticatorConnectionConnection$outboundSchema: z.ZodType<
  CreateAuthenticatorConnectionConnection$Outbound,
  z.ZodTypeDef,
  CreateAuthenticatorConnectionConnection
> = z.union([
  AuthenticatorHubspotConnection$outboundSchema.and(
    z.object({ provider: z.literal("hubspot") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  AuthenticatorNotionConnection$outboundSchema.and(
    z.object({ provider: z.literal("notion") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  AuthenticatorDropboxConnection$outboundSchema.and(
    z.object({ provider: z.literal("dropbox") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  AuthenticatorGmailConnection$outboundSchema.and(
    z.object({ provider: z.literal("gmail") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  AuthenticatorGoogleDriveConnection$outboundSchema.and(
    z.object({ provider: z.literal("google_drive") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  AuthenticatorOnedriveConnection$outboundSchema.and(
    z.object({ provider: z.literal("onedrive") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  AuthenticatorSalesforceConnection$outboundSchema.and(
    z.object({ provider: z.literal("salesforce") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  AuthenticatorSharepointConnection$outboundSchema.and(
    z.object({ provider: z.literal("sharepoint") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  AuthenticatorSlackConnection$outboundSchema.and(
    z.object({ provider: z.literal("slack") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  AuthenticatorConfluenceConnection$outboundSchema.and(
    z.object({ provider: z.literal("confluence") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  AuthenticatorJiraConnection$outboundSchema.and(
    z.object({ provider: z.literal("jira") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAuthenticatorConnectionConnection$ {
  /** @deprecated use `CreateAuthenticatorConnectionConnection$inboundSchema` instead. */
  export const inboundSchema =
    CreateAuthenticatorConnectionConnection$inboundSchema;
  /** @deprecated use `CreateAuthenticatorConnectionConnection$outboundSchema` instead. */
  export const outboundSchema =
    CreateAuthenticatorConnectionConnection$outboundSchema;
  /** @deprecated use `CreateAuthenticatorConnectionConnection$Outbound` instead. */
  export type Outbound = CreateAuthenticatorConnectionConnection$Outbound;
}

export function createAuthenticatorConnectionConnectionToJSON(
  createAuthenticatorConnectionConnection:
    CreateAuthenticatorConnectionConnection,
): string {
  return JSON.stringify(
    CreateAuthenticatorConnectionConnection$outboundSchema.parse(
      createAuthenticatorConnectionConnection,
    ),
  );
}

export function createAuthenticatorConnectionConnectionFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateAuthenticatorConnectionConnection,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAuthenticatorConnectionConnection$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateAuthenticatorConnectionConnection' from JSON`,
  );
}

/** @internal */
export const CreateAuthenticatorConnection$inboundSchema: z.ZodType<
  CreateAuthenticatorConnection,
  z.ZodTypeDef,
  unknown
> = z.object({
  partition_strategy: MediaModeParam$inboundSchema,
  partition: z.nullable(z.string()).optional(),
  page_limit: z.nullable(z.number().int()).optional(),
  config: z.nullable(z.record(z.any())).optional(),
  metadata: z.record(
    z.union([z.string(), z.number().int(), z.boolean(), z.array(z.string())]),
  ).optional(),
  connection: z.union([
    AuthenticatorHubspotConnection$inboundSchema.and(
      z.object({ provider: z.literal("hubspot") }).transform((v) => ({
        provider: v.provider,
      })),
    ),
    AuthenticatorNotionConnection$inboundSchema.and(
      z.object({ provider: z.literal("notion") }).transform((v) => ({
        provider: v.provider,
      })),
    ),
    AuthenticatorDropboxConnection$inboundSchema.and(
      z.object({ provider: z.literal("dropbox") }).transform((v) => ({
        provider: v.provider,
      })),
    ),
    AuthenticatorGmailConnection$inboundSchema.and(
      z.object({ provider: z.literal("gmail") }).transform((v) => ({
        provider: v.provider,
      })),
    ),
    AuthenticatorGoogleDriveConnection$inboundSchema.and(
      z.object({ provider: z.literal("google_drive") }).transform((v) => ({
        provider: v.provider,
      })),
    ),
    AuthenticatorOnedriveConnection$inboundSchema.and(
      z.object({ provider: z.literal("onedrive") }).transform((v) => ({
        provider: v.provider,
      })),
    ),
    AuthenticatorSalesforceConnection$inboundSchema.and(
      z.object({ provider: z.literal("salesforce") }).transform((v) => ({
        provider: v.provider,
      })),
    ),
    AuthenticatorSharepointConnection$inboundSchema.and(
      z.object({ provider: z.literal("sharepoint") }).transform((v) => ({
        provider: v.provider,
      })),
    ),
    AuthenticatorSlackConnection$inboundSchema.and(
      z.object({ provider: z.literal("slack") }).transform((v) => ({
        provider: v.provider,
      })),
    ),
    AuthenticatorConfluenceConnection$inboundSchema.and(
      z.object({ provider: z.literal("confluence") }).transform((v) => ({
        provider: v.provider,
      })),
    ),
    AuthenticatorJiraConnection$inboundSchema.and(
      z.object({ provider: z.literal("jira") }).transform((v) => ({
        provider: v.provider,
      })),
    ),
  ]),
}).transform((v) => {
  return remap$(v, {
    "partition_strategy": "partitionStrategy",
    "page_limit": "pageLimit",
  });
});

/** @internal */
export type CreateAuthenticatorConnection$Outbound = {
  partition_strategy: MediaModeParam$Outbound;
  partition?: string | null | undefined;
  page_limit?: number | null | undefined;
  config?: { [k: string]: any } | null | undefined;
  metadata?:
    | { [k: string]: string | number | boolean | Array<string> }
    | undefined;
  connection:
    | (AuthenticatorHubspotConnection$Outbound & { provider: "hubspot" })
    | (AuthenticatorNotionConnection$Outbound & { provider: "notion" })
    | (AuthenticatorDropboxConnection$Outbound & { provider: "dropbox" })
    | (AuthenticatorGmailConnection$Outbound & { provider: "gmail" })
    | (AuthenticatorGoogleDriveConnection$Outbound & {
      provider: "google_drive";
    })
    | (AuthenticatorOnedriveConnection$Outbound & { provider: "onedrive" })
    | (AuthenticatorSalesforceConnection$Outbound & { provider: "salesforce" })
    | (AuthenticatorSharepointConnection$Outbound & { provider: "sharepoint" })
    | (AuthenticatorSlackConnection$Outbound & { provider: "slack" })
    | (AuthenticatorConfluenceConnection$Outbound & { provider: "confluence" })
    | (AuthenticatorJiraConnection$Outbound & { provider: "jira" });
};

/** @internal */
export const CreateAuthenticatorConnection$outboundSchema: z.ZodType<
  CreateAuthenticatorConnection$Outbound,
  z.ZodTypeDef,
  CreateAuthenticatorConnection
> = z.object({
  partitionStrategy: MediaModeParam$outboundSchema,
  partition: z.nullable(z.string()).optional(),
  pageLimit: z.nullable(z.number().int()).optional(),
  config: z.nullable(z.record(z.any())).optional(),
  metadata: z.record(
    z.union([z.string(), z.number().int(), z.boolean(), z.array(z.string())]),
  ).optional(),
  connection: z.union([
    AuthenticatorHubspotConnection$outboundSchema.and(
      z.object({ provider: z.literal("hubspot") }).transform((v) => ({
        provider: v.provider,
      })),
    ),
    AuthenticatorNotionConnection$outboundSchema.and(
      z.object({ provider: z.literal("notion") }).transform((v) => ({
        provider: v.provider,
      })),
    ),
    AuthenticatorDropboxConnection$outboundSchema.and(
      z.object({ provider: z.literal("dropbox") }).transform((v) => ({
        provider: v.provider,
      })),
    ),
    AuthenticatorGmailConnection$outboundSchema.and(
      z.object({ provider: z.literal("gmail") }).transform((v) => ({
        provider: v.provider,
      })),
    ),
    AuthenticatorGoogleDriveConnection$outboundSchema.and(
      z.object({ provider: z.literal("google_drive") }).transform((v) => ({
        provider: v.provider,
      })),
    ),
    AuthenticatorOnedriveConnection$outboundSchema.and(
      z.object({ provider: z.literal("onedrive") }).transform((v) => ({
        provider: v.provider,
      })),
    ),
    AuthenticatorSalesforceConnection$outboundSchema.and(
      z.object({ provider: z.literal("salesforce") }).transform((v) => ({
        provider: v.provider,
      })),
    ),
    AuthenticatorSharepointConnection$outboundSchema.and(
      z.object({ provider: z.literal("sharepoint") }).transform((v) => ({
        provider: v.provider,
      })),
    ),
    AuthenticatorSlackConnection$outboundSchema.and(
      z.object({ provider: z.literal("slack") }).transform((v) => ({
        provider: v.provider,
      })),
    ),
    AuthenticatorConfluenceConnection$outboundSchema.and(
      z.object({ provider: z.literal("confluence") }).transform((v) => ({
        provider: v.provider,
      })),
    ),
    AuthenticatorJiraConnection$outboundSchema.and(
      z.object({ provider: z.literal("jira") }).transform((v) => ({
        provider: v.provider,
      })),
    ),
  ]),
}).transform((v) => {
  return remap$(v, {
    partitionStrategy: "partition_strategy",
    pageLimit: "page_limit",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAuthenticatorConnection$ {
  /** @deprecated use `CreateAuthenticatorConnection$inboundSchema` instead. */
  export const inboundSchema = CreateAuthenticatorConnection$inboundSchema;
  /** @deprecated use `CreateAuthenticatorConnection$outboundSchema` instead. */
  export const outboundSchema = CreateAuthenticatorConnection$outboundSchema;
  /** @deprecated use `CreateAuthenticatorConnection$Outbound` instead. */
  export type Outbound = CreateAuthenticatorConnection$Outbound;
}

export function createAuthenticatorConnectionToJSON(
  createAuthenticatorConnection: CreateAuthenticatorConnection,
): string {
  return JSON.stringify(
    CreateAuthenticatorConnection$outboundSchema.parse(
      createAuthenticatorConnection,
    ),
  );
}

export function createAuthenticatorConnectionFromJSON(
  jsonString: string,
): SafeParseResult<CreateAuthenticatorConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAuthenticatorConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAuthenticatorConnection' from JSON`,
  );
}
