/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  OAuthRefreshTokenCredentials,
  OAuthRefreshTokenCredentials$inboundSchema,
  OAuthRefreshTokenCredentials$Outbound,
  OAuthRefreshTokenCredentials$outboundSchema,
} from "./oauthrefreshtokencredentials.js";

export type AuthenticatorJiraConnection = {
  provider?: "jira" | undefined;
  credentials: OAuthRefreshTokenCredentials;
};

/** @internal */
export const AuthenticatorJiraConnection$inboundSchema: z.ZodType<
  AuthenticatorJiraConnection,
  z.ZodTypeDef,
  unknown
> = z.object({
  provider: z.literal("jira").default("jira").optional(),
  credentials: OAuthRefreshTokenCredentials$inboundSchema,
});

/** @internal */
export type AuthenticatorJiraConnection$Outbound = {
  provider: "jira";
  credentials: OAuthRefreshTokenCredentials$Outbound;
};

/** @internal */
export const AuthenticatorJiraConnection$outboundSchema: z.ZodType<
  AuthenticatorJiraConnection$Outbound,
  z.ZodTypeDef,
  AuthenticatorJiraConnection
> = z.object({
  provider: z.literal("jira").default("jira" as const),
  credentials: OAuthRefreshTokenCredentials$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthenticatorJiraConnection$ {
  /** @deprecated use `AuthenticatorJiraConnection$inboundSchema` instead. */
  export const inboundSchema = AuthenticatorJiraConnection$inboundSchema;
  /** @deprecated use `AuthenticatorJiraConnection$outboundSchema` instead. */
  export const outboundSchema = AuthenticatorJiraConnection$outboundSchema;
  /** @deprecated use `AuthenticatorJiraConnection$Outbound` instead. */
  export type Outbound = AuthenticatorJiraConnection$Outbound;
}

export function authenticatorJiraConnectionToJSON(
  authenticatorJiraConnection: AuthenticatorJiraConnection,
): string {
  return JSON.stringify(
    AuthenticatorJiraConnection$outboundSchema.parse(
      authenticatorJiraConnection,
    ),
  );
}

export function authenticatorJiraConnectionFromJSON(
  jsonString: string,
): SafeParseResult<AuthenticatorJiraConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthenticatorJiraConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthenticatorJiraConnection' from JSON`,
  );
}
