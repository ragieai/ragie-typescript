/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Connection,
  Connection$inboundSchema,
  Connection$Outbound,
  Connection$outboundSchema,
} from "./connection.js";
import {
  Pagination,
  Pagination$inboundSchema,
  Pagination$Outbound,
  Pagination$outboundSchema,
} from "./pagination.js";

export type ConnectionList = {
  pagination: Pagination;
  connections: Array<Connection>;
};

/** @internal */
export const ConnectionList$inboundSchema: z.ZodType<
  ConnectionList,
  z.ZodTypeDef,
  unknown
> = z.object({
  pagination: Pagination$inboundSchema,
  connections: z.array(Connection$inboundSchema),
});

/** @internal */
export type ConnectionList$Outbound = {
  pagination: Pagination$Outbound;
  connections: Array<Connection$Outbound>;
};

/** @internal */
export const ConnectionList$outboundSchema: z.ZodType<
  ConnectionList$Outbound,
  z.ZodTypeDef,
  ConnectionList
> = z.object({
  pagination: Pagination$outboundSchema,
  connections: z.array(Connection$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConnectionList$ {
  /** @deprecated use `ConnectionList$inboundSchema` instead. */
  export const inboundSchema = ConnectionList$inboundSchema;
  /** @deprecated use `ConnectionList$outboundSchema` instead. */
  export const outboundSchema = ConnectionList$outboundSchema;
  /** @deprecated use `ConnectionList$Outbound` instead. */
  export type Outbound = ConnectionList$Outbound;
}

export function connectionListToJSON(connectionList: ConnectionList): string {
  return JSON.stringify(ConnectionList$outboundSchema.parse(connectionList));
}

export function connectionListFromJSON(
  jsonString: string,
): SafeParseResult<ConnectionList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConnectionList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConnectionList' from JSON`,
  );
}
