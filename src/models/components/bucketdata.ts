/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type BucketData = {
  bucket: string;
  prefix?: string | null | undefined;
};

/** @internal */
export const BucketData$inboundSchema: z.ZodType<
  BucketData,
  z.ZodTypeDef,
  unknown
> = z.object({
  bucket: z.string(),
  prefix: z.nullable(z.string()).optional(),
});

/** @internal */
export type BucketData$Outbound = {
  bucket: string;
  prefix?: string | null | undefined;
};

/** @internal */
export const BucketData$outboundSchema: z.ZodType<
  BucketData$Outbound,
  z.ZodTypeDef,
  BucketData
> = z.object({
  bucket: z.string(),
  prefix: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BucketData$ {
  /** @deprecated use `BucketData$inboundSchema` instead. */
  export const inboundSchema = BucketData$inboundSchema;
  /** @deprecated use `BucketData$outboundSchema` instead. */
  export const outboundSchema = BucketData$outboundSchema;
  /** @deprecated use `BucketData$Outbound` instead. */
  export type Outbound = BucketData$Outbound;
}

export function bucketDataToJSON(bucketData: BucketData): string {
  return JSON.stringify(BucketData$outboundSchema.parse(bucketData));
}

export function bucketDataFromJSON(
  jsonString: string,
): SafeParseResult<BucketData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BucketData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BucketData' from JSON`,
  );
}
