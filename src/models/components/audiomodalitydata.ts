/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  WordTimestamp,
  WordTimestamp$inboundSchema,
  WordTimestamp$Outbound,
  WordTimestamp$outboundSchema,
} from "./wordtimestamp.js";

export type AudioModalityData = {
  type?: "audio" | undefined;
  wordTimestamps?: Array<WordTimestamp> | undefined;
};

/** @internal */
export const AudioModalityData$inboundSchema: z.ZodType<
  AudioModalityData,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("audio").default("audio"),
  word_timestamps: z.array(WordTimestamp$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "word_timestamps": "wordTimestamps",
  });
});

/** @internal */
export type AudioModalityData$Outbound = {
  type: "audio";
  word_timestamps?: Array<WordTimestamp$Outbound> | undefined;
};

/** @internal */
export const AudioModalityData$outboundSchema: z.ZodType<
  AudioModalityData$Outbound,
  z.ZodTypeDef,
  AudioModalityData
> = z.object({
  type: z.literal("audio").default("audio" as const),
  wordTimestamps: z.array(WordTimestamp$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    wordTimestamps: "word_timestamps",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AudioModalityData$ {
  /** @deprecated use `AudioModalityData$inboundSchema` instead. */
  export const inboundSchema = AudioModalityData$inboundSchema;
  /** @deprecated use `AudioModalityData$outboundSchema` instead. */
  export const outboundSchema = AudioModalityData$outboundSchema;
  /** @deprecated use `AudioModalityData$Outbound` instead. */
  export type Outbound = AudioModalityData$Outbound;
}

export function audioModalityDataToJSON(
  audioModalityData: AudioModalityData,
): string {
  return JSON.stringify(
    AudioModalityData$outboundSchema.parse(audioModalityData),
  );
}

export function audioModalityDataFromJSON(
  jsonString: string,
): SafeParseResult<AudioModalityData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AudioModalityData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AudioModalityData' from JSON`,
  );
}
