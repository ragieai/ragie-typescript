/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PatchDocumentMetadataParams = {
  /**
   * The metadata to update on the document. Performs a partial update of the document's metadata. Keys must be strings. Values may be strings, numbers, booleans, or lists of strings. Numbers may be integers or floating point and will be converted to 64 bit floating point. Keys set to `null` are deleted. 1000 total values are allowed, inclusive of existing metadata. Each item in an array counts towards the total. The following keys are reserved for internal use: `document_id`, `document_type`, `document_source`, `document_name`, `document_uploaded_at`. If the document is managed by a connection, this operation will extend a metadata overlay which is applied to the document any time the connection syncs the document.
   */
  metadata: { [k: string]: any };
};

/** @internal */
export const PatchDocumentMetadataParams$inboundSchema: z.ZodType<
  PatchDocumentMetadataParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  metadata: z.record(z.any()),
});

/** @internal */
export type PatchDocumentMetadataParams$Outbound = {
  metadata: { [k: string]: any };
};

/** @internal */
export const PatchDocumentMetadataParams$outboundSchema: z.ZodType<
  PatchDocumentMetadataParams$Outbound,
  z.ZodTypeDef,
  PatchDocumentMetadataParams
> = z.object({
  metadata: z.record(z.any()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchDocumentMetadataParams$ {
  /** @deprecated use `PatchDocumentMetadataParams$inboundSchema` instead. */
  export const inboundSchema = PatchDocumentMetadataParams$inboundSchema;
  /** @deprecated use `PatchDocumentMetadataParams$outboundSchema` instead. */
  export const outboundSchema = PatchDocumentMetadataParams$outboundSchema;
  /** @deprecated use `PatchDocumentMetadataParams$Outbound` instead. */
  export type Outbound = PatchDocumentMetadataParams$Outbound;
}

export function patchDocumentMetadataParamsToJSON(
  patchDocumentMetadataParams: PatchDocumentMetadataParams,
): string {
  return JSON.stringify(
    PatchDocumentMetadataParams$outboundSchema.parse(
      patchDocumentMetadataParams,
    ),
  );
}

export function patchDocumentMetadataParamsFromJSON(
  jsonString: string,
): SafeParseResult<PatchDocumentMetadataParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchDocumentMetadataParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchDocumentMetadataParams' from JSON`,
  );
}
