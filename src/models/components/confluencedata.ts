/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ConfluenceData = {
  resourceId: string;
  spaceId: number;
  spaceKey: string;
  spaceName: string;
};

/** @internal */
export const ConfluenceData$inboundSchema: z.ZodType<
  ConfluenceData,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource_id: z.string(),
  space_id: z.number().int(),
  space_key: z.string(),
  space_name: z.string(),
}).transform((v) => {
  return remap$(v, {
    "resource_id": "resourceId",
    "space_id": "spaceId",
    "space_key": "spaceKey",
    "space_name": "spaceName",
  });
});

/** @internal */
export type ConfluenceData$Outbound = {
  resource_id: string;
  space_id: number;
  space_key: string;
  space_name: string;
};

/** @internal */
export const ConfluenceData$outboundSchema: z.ZodType<
  ConfluenceData$Outbound,
  z.ZodTypeDef,
  ConfluenceData
> = z.object({
  resourceId: z.string(),
  spaceId: z.number().int(),
  spaceKey: z.string(),
  spaceName: z.string(),
}).transform((v) => {
  return remap$(v, {
    resourceId: "resource_id",
    spaceId: "space_id",
    spaceKey: "space_key",
    spaceName: "space_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConfluenceData$ {
  /** @deprecated use `ConfluenceData$inboundSchema` instead. */
  export const inboundSchema = ConfluenceData$inboundSchema;
  /** @deprecated use `ConfluenceData$outboundSchema` instead. */
  export const outboundSchema = ConfluenceData$outboundSchema;
  /** @deprecated use `ConfluenceData$Outbound` instead. */
  export type Outbound = ConfluenceData$Outbound;
}

export function confluenceDataToJSON(confluenceData: ConfluenceData): string {
  return JSON.stringify(ConfluenceData$outboundSchema.parse(confluenceData));
}

export function confluenceDataFromJSON(
  jsonString: string,
): SafeParseResult<ConfluenceData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConfluenceData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConfluenceData' from JSON`,
  );
}
