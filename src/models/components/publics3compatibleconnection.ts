/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  BucketData,
  BucketData$inboundSchema,
  BucketData$Outbound,
  BucketData$outboundSchema,
} from "./bucketdata.js";
import {
  S3CompatibleCredentials,
  S3CompatibleCredentials$inboundSchema,
  S3CompatibleCredentials$Outbound,
  S3CompatibleCredentials$outboundSchema,
} from "./s3compatiblecredentials.js";

export type PublicS3CompatibleConnection = {
  provider?: "s3" | undefined;
  data: BucketData;
  credentials: S3CompatibleCredentials;
};

/** @internal */
export const PublicS3CompatibleConnection$inboundSchema: z.ZodType<
  PublicS3CompatibleConnection,
  z.ZodTypeDef,
  unknown
> = z.object({
  provider: z.literal("s3").default("s3").optional(),
  data: BucketData$inboundSchema,
  credentials: S3CompatibleCredentials$inboundSchema,
});

/** @internal */
export type PublicS3CompatibleConnection$Outbound = {
  provider: "s3";
  data: BucketData$Outbound;
  credentials: S3CompatibleCredentials$Outbound;
};

/** @internal */
export const PublicS3CompatibleConnection$outboundSchema: z.ZodType<
  PublicS3CompatibleConnection$Outbound,
  z.ZodTypeDef,
  PublicS3CompatibleConnection
> = z.object({
  provider: z.literal("s3").default("s3" as const),
  data: BucketData$outboundSchema,
  credentials: S3CompatibleCredentials$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublicS3CompatibleConnection$ {
  /** @deprecated use `PublicS3CompatibleConnection$inboundSchema` instead. */
  export const inboundSchema = PublicS3CompatibleConnection$inboundSchema;
  /** @deprecated use `PublicS3CompatibleConnection$outboundSchema` instead. */
  export const outboundSchema = PublicS3CompatibleConnection$outboundSchema;
  /** @deprecated use `PublicS3CompatibleConnection$Outbound` instead. */
  export type Outbound = PublicS3CompatibleConnection$Outbound;
}

export function publicS3CompatibleConnectionToJSON(
  publicS3CompatibleConnection: PublicS3CompatibleConnection,
): string {
  return JSON.stringify(
    PublicS3CompatibleConnection$outboundSchema.parse(
      publicS3CompatibleConnection,
    ),
  );
}

export function publicS3CompatibleConnectionFromJSON(
  jsonString: string,
): SafeParseResult<PublicS3CompatibleConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PublicS3CompatibleConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PublicS3CompatibleConnection' from JSON`,
  );
}
