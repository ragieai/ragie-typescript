/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AudioModalityData,
  AudioModalityData$inboundSchema,
  AudioModalityData$Outbound,
  AudioModalityData$outboundSchema,
} from "./audiomodalitydata.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

export type ModalityData = AudioModalityData;

export type DocumentChunkDetail = {
  id: string;
  index?: number | undefined;
  text: string;
  metadata?: { [k: string]: any } | undefined;
  links: { [k: string]: Link };
  /**
   * Additional data specific to the modality of the chunk's source file, such as word level timestamps for chunks extracted from audio files.
   */
  modalityData?: AudioModalityData | null | undefined;
};

/** @internal */
export const ModalityData$inboundSchema: z.ZodType<
  ModalityData,
  z.ZodTypeDef,
  unknown
> = AudioModalityData$inboundSchema;

/** @internal */
export type ModalityData$Outbound = AudioModalityData$Outbound;

/** @internal */
export const ModalityData$outboundSchema: z.ZodType<
  ModalityData$Outbound,
  z.ZodTypeDef,
  ModalityData
> = AudioModalityData$outboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModalityData$ {
  /** @deprecated use `ModalityData$inboundSchema` instead. */
  export const inboundSchema = ModalityData$inboundSchema;
  /** @deprecated use `ModalityData$outboundSchema` instead. */
  export const outboundSchema = ModalityData$outboundSchema;
  /** @deprecated use `ModalityData$Outbound` instead. */
  export type Outbound = ModalityData$Outbound;
}

export function modalityDataToJSON(modalityData: ModalityData): string {
  return JSON.stringify(ModalityData$outboundSchema.parse(modalityData));
}

export function modalityDataFromJSON(
  jsonString: string,
): SafeParseResult<ModalityData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ModalityData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ModalityData' from JSON`,
  );
}

/** @internal */
export const DocumentChunkDetail$inboundSchema: z.ZodType<
  DocumentChunkDetail,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  index: z.number().int().default(-1),
  text: z.string(),
  metadata: z.record(z.any()).optional(),
  links: z.record(Link$inboundSchema),
  modality_data: z.nullable(AudioModalityData$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "modality_data": "modalityData",
  });
});

/** @internal */
export type DocumentChunkDetail$Outbound = {
  id: string;
  index: number;
  text: string;
  metadata?: { [k: string]: any } | undefined;
  links: { [k: string]: Link$Outbound };
  modality_data?: AudioModalityData$Outbound | null | undefined;
};

/** @internal */
export const DocumentChunkDetail$outboundSchema: z.ZodType<
  DocumentChunkDetail$Outbound,
  z.ZodTypeDef,
  DocumentChunkDetail
> = z.object({
  id: z.string(),
  index: z.number().int().default(-1),
  text: z.string(),
  metadata: z.record(z.any()).optional(),
  links: z.record(Link$outboundSchema),
  modalityData: z.nullable(AudioModalityData$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    modalityData: "modality_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentChunkDetail$ {
  /** @deprecated use `DocumentChunkDetail$inboundSchema` instead. */
  export const inboundSchema = DocumentChunkDetail$inboundSchema;
  /** @deprecated use `DocumentChunkDetail$outboundSchema` instead. */
  export const outboundSchema = DocumentChunkDetail$outboundSchema;
  /** @deprecated use `DocumentChunkDetail$Outbound` instead. */
  export type Outbound = DocumentChunkDetail$Outbound;
}

export function documentChunkDetailToJSON(
  documentChunkDetail: DocumentChunkDetail,
): string {
  return JSON.stringify(
    DocumentChunkDetail$outboundSchema.parse(documentChunkDetail),
  );
}

export function documentChunkDetailFromJSON(
  jsonString: string,
): SafeParseResult<DocumentChunkDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentChunkDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentChunkDetail' from JSON`,
  );
}
