/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CodeStep = {
  type?: "code" | undefined;
  think: string;
  currentQuestion: string;
  /**
   * The natural language description of the code issue you need to solve.
   */
  codeIssue: string;
  /**
   * The code you generated to solve the code issue.
   */
  code?: string | undefined;
  /**
   * The result of the code you generated after executing it.
   */
  codeResult?: string | undefined;
};

/** @internal */
export const CodeStep$inboundSchema: z.ZodType<
  CodeStep,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("code").default("code"),
  think: z.string(),
  current_question: z.string(),
  code_issue: z.string(),
  code: z.string().default(""),
  code_result: z.string().default(""),
}).transform((v) => {
  return remap$(v, {
    "current_question": "currentQuestion",
    "code_issue": "codeIssue",
    "code_result": "codeResult",
  });
});

/** @internal */
export type CodeStep$Outbound = {
  type: "code";
  think: string;
  current_question: string;
  code_issue: string;
  code: string;
  code_result: string;
};

/** @internal */
export const CodeStep$outboundSchema: z.ZodType<
  CodeStep$Outbound,
  z.ZodTypeDef,
  CodeStep
> = z.object({
  type: z.literal("code").default("code" as const),
  think: z.string(),
  currentQuestion: z.string(),
  codeIssue: z.string(),
  code: z.string().default(""),
  codeResult: z.string().default(""),
}).transform((v) => {
  return remap$(v, {
    currentQuestion: "current_question",
    codeIssue: "code_issue",
    codeResult: "code_result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CodeStep$ {
  /** @deprecated use `CodeStep$inboundSchema` instead. */
  export const inboundSchema = CodeStep$inboundSchema;
  /** @deprecated use `CodeStep$outboundSchema` instead. */
  export const outboundSchema = CodeStep$outboundSchema;
  /** @deprecated use `CodeStep$Outbound` instead. */
  export type Outbound = CodeStep$Outbound;
}

export function codeStepToJSON(codeStep: CodeStep): string {
  return JSON.stringify(CodeStep$outboundSchema.parse(codeStep));
}

export function codeStepFromJSON(
  jsonString: string,
): SafeParseResult<CodeStep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CodeStep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CodeStep' from JSON`,
  );
}
