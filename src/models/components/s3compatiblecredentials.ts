/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type S3CompatibleCredentials = {
  accessKeyId: string;
  secretAccessKey: string;
  region: string;
  endpoint?: string | null | undefined;
};

/** @internal */
export const S3CompatibleCredentials$inboundSchema: z.ZodType<
  S3CompatibleCredentials,
  z.ZodTypeDef,
  unknown
> = z.object({
  access_key_id: z.string(),
  secret_access_key: z.string(),
  region: z.string(),
  endpoint: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "access_key_id": "accessKeyId",
    "secret_access_key": "secretAccessKey",
  });
});

/** @internal */
export type S3CompatibleCredentials$Outbound = {
  access_key_id: string;
  secret_access_key: string;
  region: string;
  endpoint?: string | null | undefined;
};

/** @internal */
export const S3CompatibleCredentials$outboundSchema: z.ZodType<
  S3CompatibleCredentials$Outbound,
  z.ZodTypeDef,
  S3CompatibleCredentials
> = z.object({
  accessKeyId: z.string(),
  secretAccessKey: z.string(),
  region: z.string(),
  endpoint: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    accessKeyId: "access_key_id",
    secretAccessKey: "secret_access_key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace S3CompatibleCredentials$ {
  /** @deprecated use `S3CompatibleCredentials$inboundSchema` instead. */
  export const inboundSchema = S3CompatibleCredentials$inboundSchema;
  /** @deprecated use `S3CompatibleCredentials$outboundSchema` instead. */
  export const outboundSchema = S3CompatibleCredentials$outboundSchema;
  /** @deprecated use `S3CompatibleCredentials$Outbound` instead. */
  export type Outbound = S3CompatibleCredentials$Outbound;
}

export function s3CompatibleCredentialsToJSON(
  s3CompatibleCredentials: S3CompatibleCredentials,
): string {
  return JSON.stringify(
    S3CompatibleCredentials$outboundSchema.parse(s3CompatibleCredentials),
  );
}

export function s3CompatibleCredentialsFromJSON(
  jsonString: string,
): SafeParseResult<S3CompatibleCredentials, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => S3CompatibleCredentials$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'S3CompatibleCredentials' from JSON`,
  );
}
