/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RagieEvidence,
  RagieEvidence$inboundSchema,
  RagieEvidence$Outbound,
  RagieEvidence$outboundSchema,
} from "./ragieevidence.js";
import {
  SearchEffort,
  SearchEffort$inboundSchema,
  SearchEffort$outboundSchema,
} from "./searcheffort.js";

export type QueryDetails = {
  query: string;
  searchEffort: SearchEffort;
  metadataFilter: { [k: string]: any };
  searchResults: Array<RagieEvidence>;
};

/** @internal */
export const QueryDetails$inboundSchema: z.ZodType<
  QueryDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  query: z.string(),
  search_effort: SearchEffort$inboundSchema,
  metadata_filter: z.record(z.any()),
  search_results: z.array(RagieEvidence$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "search_effort": "searchEffort",
    "metadata_filter": "metadataFilter",
    "search_results": "searchResults",
  });
});

/** @internal */
export type QueryDetails$Outbound = {
  query: string;
  search_effort: string;
  metadata_filter: { [k: string]: any };
  search_results: Array<RagieEvidence$Outbound>;
};

/** @internal */
export const QueryDetails$outboundSchema: z.ZodType<
  QueryDetails$Outbound,
  z.ZodTypeDef,
  QueryDetails
> = z.object({
  query: z.string(),
  searchEffort: SearchEffort$outboundSchema,
  metadataFilter: z.record(z.any()),
  searchResults: z.array(RagieEvidence$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    searchEffort: "search_effort",
    metadataFilter: "metadata_filter",
    searchResults: "search_results",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryDetails$ {
  /** @deprecated use `QueryDetails$inboundSchema` instead. */
  export const inboundSchema = QueryDetails$inboundSchema;
  /** @deprecated use `QueryDetails$outboundSchema` instead. */
  export const outboundSchema = QueryDetails$outboundSchema;
  /** @deprecated use `QueryDetails$Outbound` instead. */
  export type Outbound = QueryDetails$Outbound;
}

export function queryDetailsToJSON(queryDetails: QueryDetails): string {
  return JSON.stringify(QueryDetails$outboundSchema.parse(queryDetails));
}

export function queryDetailsFromJSON(
  jsonString: string,
): SafeParseResult<QueryDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryDetails' from JSON`,
  );
}
