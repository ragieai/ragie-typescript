/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ResponseContent,
  ResponseContent$inboundSchema,
  ResponseContent$Outbound,
  ResponseContent$outboundSchema,
} from "./responsecontent.js";

export type ResponseOutput = {
  type?: "message" | undefined;
  id: string;
  role?: "assistant" | undefined;
  content: Array<ResponseContent>;
};

/** @internal */
export const ResponseOutput$inboundSchema: z.ZodType<
  ResponseOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("message").default("message"),
  id: z.string(),
  role: z.literal("assistant").default("assistant"),
  content: z.array(ResponseContent$inboundSchema),
});

/** @internal */
export type ResponseOutput$Outbound = {
  type: "message";
  id: string;
  role: "assistant";
  content: Array<ResponseContent$Outbound>;
};

/** @internal */
export const ResponseOutput$outboundSchema: z.ZodType<
  ResponseOutput$Outbound,
  z.ZodTypeDef,
  ResponseOutput
> = z.object({
  type: z.literal("message").default("message" as const),
  id: z.string(),
  role: z.literal("assistant").default("assistant" as const),
  content: z.array(ResponseContent$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseOutput$ {
  /** @deprecated use `ResponseOutput$inboundSchema` instead. */
  export const inboundSchema = ResponseOutput$inboundSchema;
  /** @deprecated use `ResponseOutput$outboundSchema` instead. */
  export const outboundSchema = ResponseOutput$outboundSchema;
  /** @deprecated use `ResponseOutput$Outbound` instead. */
  export type Outbound = ResponseOutput$Outbound;
}

export function responseOutputToJSON(responseOutput: ResponseOutput): string {
  return JSON.stringify(ResponseOutput$outboundSchema.parse(responseOutput));
}

export function responseOutputFromJSON(
  jsonString: string,
): SafeParseResult<ResponseOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseOutput' from JSON`,
  );
}
