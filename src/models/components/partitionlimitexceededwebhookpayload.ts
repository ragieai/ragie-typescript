/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const LimitType = {
  PagesProcessedLimitMonthly: "pages_processed_limit_monthly",
  PagesHostedLimitMonthly: "pages_hosted_limit_monthly",
  PagesProcessedLimitMax: "pages_processed_limit_max",
  PagesHostedLimitMax: "pages_hosted_limit_max",
} as const;
export type LimitType = ClosedEnum<typeof LimitType>;

export type PartitionLimitExceededWebhookPayload = {
  partition: string;
  limitType: LimitType;
};

/** @internal */
export const LimitType$inboundSchema: z.ZodNativeEnum<typeof LimitType> = z
  .nativeEnum(LimitType);

/** @internal */
export const LimitType$outboundSchema: z.ZodNativeEnum<typeof LimitType> =
  LimitType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LimitType$ {
  /** @deprecated use `LimitType$inboundSchema` instead. */
  export const inboundSchema = LimitType$inboundSchema;
  /** @deprecated use `LimitType$outboundSchema` instead. */
  export const outboundSchema = LimitType$outboundSchema;
}

/** @internal */
export const PartitionLimitExceededWebhookPayload$inboundSchema: z.ZodType<
  PartitionLimitExceededWebhookPayload,
  z.ZodTypeDef,
  unknown
> = z.object({
  partition: z.string(),
  limit_type: LimitType$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "limit_type": "limitType",
  });
});

/** @internal */
export type PartitionLimitExceededWebhookPayload$Outbound = {
  partition: string;
  limit_type: string;
};

/** @internal */
export const PartitionLimitExceededWebhookPayload$outboundSchema: z.ZodType<
  PartitionLimitExceededWebhookPayload$Outbound,
  z.ZodTypeDef,
  PartitionLimitExceededWebhookPayload
> = z.object({
  partition: z.string(),
  limitType: LimitType$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    limitType: "limit_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PartitionLimitExceededWebhookPayload$ {
  /** @deprecated use `PartitionLimitExceededWebhookPayload$inboundSchema` instead. */
  export const inboundSchema =
    PartitionLimitExceededWebhookPayload$inboundSchema;
  /** @deprecated use `PartitionLimitExceededWebhookPayload$outboundSchema` instead. */
  export const outboundSchema =
    PartitionLimitExceededWebhookPayload$outboundSchema;
  /** @deprecated use `PartitionLimitExceededWebhookPayload$Outbound` instead. */
  export type Outbound = PartitionLimitExceededWebhookPayload$Outbound;
}

export function partitionLimitExceededWebhookPayloadToJSON(
  partitionLimitExceededWebhookPayload: PartitionLimitExceededWebhookPayload,
): string {
  return JSON.stringify(
    PartitionLimitExceededWebhookPayload$outboundSchema.parse(
      partitionLimitExceededWebhookPayload,
    ),
  );
}

export function partitionLimitExceededWebhookPayloadFromJSON(
  jsonString: string,
): SafeParseResult<PartitionLimitExceededWebhookPayload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PartitionLimitExceededWebhookPayload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PartitionLimitExceededWebhookPayload' from JSON`,
  );
}
