/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  BucketData,
  BucketData$inboundSchema,
  BucketData$Outbound,
  BucketData$outboundSchema,
} from "./bucketdata.js";

export type PublicGCSConnection = {
  provider?: "gcs" | undefined;
  data: BucketData;
  credentials: { [k: string]: any };
};

/** @internal */
export const PublicGCSConnection$inboundSchema: z.ZodType<
  PublicGCSConnection,
  z.ZodTypeDef,
  unknown
> = z.object({
  provider: z.literal("gcs").default("gcs").optional(),
  data: BucketData$inboundSchema,
  credentials: z.record(z.any()),
});

/** @internal */
export type PublicGCSConnection$Outbound = {
  provider: "gcs";
  data: BucketData$Outbound;
  credentials: { [k: string]: any };
};

/** @internal */
export const PublicGCSConnection$outboundSchema: z.ZodType<
  PublicGCSConnection$Outbound,
  z.ZodTypeDef,
  PublicGCSConnection
> = z.object({
  provider: z.literal("gcs").default("gcs" as const),
  data: BucketData$outboundSchema,
  credentials: z.record(z.any()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublicGCSConnection$ {
  /** @deprecated use `PublicGCSConnection$inboundSchema` instead. */
  export const inboundSchema = PublicGCSConnection$inboundSchema;
  /** @deprecated use `PublicGCSConnection$outboundSchema` instead. */
  export const outboundSchema = PublicGCSConnection$outboundSchema;
  /** @deprecated use `PublicGCSConnection$Outbound` instead. */
  export type Outbound = PublicGCSConnection$Outbound;
}

export function publicGCSConnectionToJSON(
  publicGCSConnection: PublicGCSConnection,
): string {
  return JSON.stringify(
    PublicGCSConnection$outboundSchema.parse(publicGCSConnection),
  );
}

export function publicGCSConnectionFromJSON(
  jsonString: string,
): SafeParseResult<PublicGCSConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PublicGCSConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PublicGCSConnection' from JSON`,
  );
}
