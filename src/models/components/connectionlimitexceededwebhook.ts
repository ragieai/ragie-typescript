/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ConnectionLimitExceededWebhookPayload,
  ConnectionLimitExceededWebhookPayload$inboundSchema,
  ConnectionLimitExceededWebhookPayload$Outbound,
  ConnectionLimitExceededWebhookPayload$outboundSchema,
} from "./connectionlimitexceededwebhookpayload.js";

export type ConnectionLimitExceededWebhook = {
  nonce: string;
  type?: "connection_limit_exceeded" | undefined;
  payload: ConnectionLimitExceededWebhookPayload;
};

/** @internal */
export const ConnectionLimitExceededWebhook$inboundSchema: z.ZodType<
  ConnectionLimitExceededWebhook,
  z.ZodTypeDef,
  unknown
> = z.object({
  nonce: z.string(),
  type: z.literal("connection_limit_exceeded").optional(),
  payload: ConnectionLimitExceededWebhookPayload$inboundSchema,
});

/** @internal */
export type ConnectionLimitExceededWebhook$Outbound = {
  nonce: string;
  type: "connection_limit_exceeded";
  payload: ConnectionLimitExceededWebhookPayload$Outbound;
};

/** @internal */
export const ConnectionLimitExceededWebhook$outboundSchema: z.ZodType<
  ConnectionLimitExceededWebhook$Outbound,
  z.ZodTypeDef,
  ConnectionLimitExceededWebhook
> = z.object({
  nonce: z.string(),
  type: z.literal("connection_limit_exceeded").default(
    "connection_limit_exceeded" as const,
  ),
  payload: ConnectionLimitExceededWebhookPayload$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConnectionLimitExceededWebhook$ {
  /** @deprecated use `ConnectionLimitExceededWebhook$inboundSchema` instead. */
  export const inboundSchema = ConnectionLimitExceededWebhook$inboundSchema;
  /** @deprecated use `ConnectionLimitExceededWebhook$outboundSchema` instead. */
  export const outboundSchema = ConnectionLimitExceededWebhook$outboundSchema;
  /** @deprecated use `ConnectionLimitExceededWebhook$Outbound` instead. */
  export type Outbound = ConnectionLimitExceededWebhook$Outbound;
}

export function connectionLimitExceededWebhookToJSON(
  connectionLimitExceededWebhook: ConnectionLimitExceededWebhook,
): string {
  return JSON.stringify(
    ConnectionLimitExceededWebhook$outboundSchema.parse(
      connectionLimitExceededWebhook,
    ),
  );
}

export function connectionLimitExceededWebhookFromJSON(
  jsonString: string,
): SafeParseResult<ConnectionLimitExceededWebhook, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConnectionLimitExceededWebhook$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConnectionLimitExceededWebhook' from JSON`,
  );
}
