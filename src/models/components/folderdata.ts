/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type FolderData = {
  folderId: string;
  folderName: string;
};

/** @internal */
export const FolderData$inboundSchema: z.ZodType<
  FolderData,
  z.ZodTypeDef,
  unknown
> = z.object({
  folder_id: z.string(),
  folder_name: z.string(),
}).transform((v) => {
  return remap$(v, {
    "folder_id": "folderId",
    "folder_name": "folderName",
  });
});

/** @internal */
export type FolderData$Outbound = {
  folder_id: string;
  folder_name: string;
};

/** @internal */
export const FolderData$outboundSchema: z.ZodType<
  FolderData$Outbound,
  z.ZodTypeDef,
  FolderData
> = z.object({
  folderId: z.string(),
  folderName: z.string(),
}).transform((v) => {
  return remap$(v, {
    folderId: "folder_id",
    folderName: "folder_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FolderData$ {
  /** @deprecated use `FolderData$inboundSchema` instead. */
  export const inboundSchema = FolderData$inboundSchema;
  /** @deprecated use `FolderData$outboundSchema` instead. */
  export const outboundSchema = FolderData$outboundSchema;
  /** @deprecated use `FolderData$Outbound` instead. */
  export type Outbound = FolderData$Outbound;
}

export function folderDataToJSON(folderData: FolderData): string {
  return JSON.stringify(FolderData$outboundSchema.parse(folderData));
}

export function folderDataFromJSON(
  jsonString: string,
): SafeParseResult<FolderData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FolderData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FolderData' from JSON`,
  );
}
