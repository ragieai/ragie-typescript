/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Search = {
  searchRequests: Array<string>;
};

/** @internal */
export const Search$inboundSchema: z.ZodType<Search, z.ZodTypeDef, unknown> = z
  .object({
    search_requests: z.array(z.string()),
  }).transform((v) => {
    return remap$(v, {
      "search_requests": "searchRequests",
    });
  });

/** @internal */
export type Search$Outbound = {
  search_requests: Array<string>;
};

/** @internal */
export const Search$outboundSchema: z.ZodType<
  Search$Outbound,
  z.ZodTypeDef,
  Search
> = z.object({
  searchRequests: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    searchRequests: "search_requests",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Search$ {
  /** @deprecated use `Search$inboundSchema` instead. */
  export const inboundSchema = Search$inboundSchema;
  /** @deprecated use `Search$outboundSchema` instead. */
  export const outboundSchema = Search$outboundSchema;
  /** @deprecated use `Search$Outbound` instead. */
  export type Outbound = Search$Outbound;
}

export function searchToJSON(search: Search): string {
  return JSON.stringify(Search$outboundSchema.parse(search));
}

export function searchFromJSON(
  jsonString: string,
): SafeParseResult<Search, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Search$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Search' from JSON`,
  );
}
