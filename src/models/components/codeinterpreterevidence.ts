/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CodeInterpreterEvidence = {
  type?: "code_interpreter" | undefined;
  text: string;
  /**
   * The code that was executed.
   */
  code: string;
  /**
   * The issue that the code was written to solve.
   */
  codeIssue: string;
  /**
   * The result of the code that was executed.
   */
  codeResult: string;
};

/** @internal */
export const CodeInterpreterEvidence$inboundSchema: z.ZodType<
  CodeInterpreterEvidence,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("code_interpreter").default("code_interpreter"),
  text: z.string(),
  code: z.string(),
  code_issue: z.string(),
  code_result: z.string(),
}).transform((v) => {
  return remap$(v, {
    "code_issue": "codeIssue",
    "code_result": "codeResult",
  });
});

/** @internal */
export type CodeInterpreterEvidence$Outbound = {
  type: "code_interpreter";
  text: string;
  code: string;
  code_issue: string;
  code_result: string;
};

/** @internal */
export const CodeInterpreterEvidence$outboundSchema: z.ZodType<
  CodeInterpreterEvidence$Outbound,
  z.ZodTypeDef,
  CodeInterpreterEvidence
> = z.object({
  type: z.literal("code_interpreter").default("code_interpreter" as const),
  text: z.string(),
  code: z.string(),
  codeIssue: z.string(),
  codeResult: z.string(),
}).transform((v) => {
  return remap$(v, {
    codeIssue: "code_issue",
    codeResult: "code_result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CodeInterpreterEvidence$ {
  /** @deprecated use `CodeInterpreterEvidence$inboundSchema` instead. */
  export const inboundSchema = CodeInterpreterEvidence$inboundSchema;
  /** @deprecated use `CodeInterpreterEvidence$outboundSchema` instead. */
  export const outboundSchema = CodeInterpreterEvidence$outboundSchema;
  /** @deprecated use `CodeInterpreterEvidence$Outbound` instead. */
  export type Outbound = CodeInterpreterEvidence$Outbound;
}

export function codeInterpreterEvidenceToJSON(
  codeInterpreterEvidence: CodeInterpreterEvidence,
): string {
  return JSON.stringify(
    CodeInterpreterEvidence$outboundSchema.parse(codeInterpreterEvidence),
  );
}

export function codeInterpreterEvidenceFromJSON(
  jsonString: string,
): SafeParseResult<CodeInterpreterEvidence, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CodeInterpreterEvidence$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CodeInterpreterEvidence' from JSON`,
  );
}
