/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EntityExtractedWebhookPayload,
  EntityExtractedWebhookPayload$inboundSchema,
  EntityExtractedWebhookPayload$Outbound,
  EntityExtractedWebhookPayload$outboundSchema,
} from "./entityextractedwebhookpayload.js";

export type EntityExtractedWebhook = {
  nonce: string;
  type?: "entity_extracted" | undefined;
  payload: EntityExtractedWebhookPayload;
};

/** @internal */
export const EntityExtractedWebhook$inboundSchema: z.ZodType<
  EntityExtractedWebhook,
  z.ZodTypeDef,
  unknown
> = z.object({
  nonce: z.string(),
  type: z.literal("entity_extracted").optional(),
  payload: EntityExtractedWebhookPayload$inboundSchema,
});

/** @internal */
export type EntityExtractedWebhook$Outbound = {
  nonce: string;
  type: "entity_extracted";
  payload: EntityExtractedWebhookPayload$Outbound;
};

/** @internal */
export const EntityExtractedWebhook$outboundSchema: z.ZodType<
  EntityExtractedWebhook$Outbound,
  z.ZodTypeDef,
  EntityExtractedWebhook
> = z.object({
  nonce: z.string(),
  type: z.literal("entity_extracted").default("entity_extracted" as const),
  payload: EntityExtractedWebhookPayload$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityExtractedWebhook$ {
  /** @deprecated use `EntityExtractedWebhook$inboundSchema` instead. */
  export const inboundSchema = EntityExtractedWebhook$inboundSchema;
  /** @deprecated use `EntityExtractedWebhook$outboundSchema` instead. */
  export const outboundSchema = EntityExtractedWebhook$outboundSchema;
  /** @deprecated use `EntityExtractedWebhook$Outbound` instead. */
  export type Outbound = EntityExtractedWebhook$Outbound;
}

export function entityExtractedWebhookToJSON(
  entityExtractedWebhook: EntityExtractedWebhook,
): string {
  return JSON.stringify(
    EntityExtractedWebhook$outboundSchema.parse(entityExtractedWebhook),
  );
}

export function entityExtractedWebhookFromJSON(
  jsonString: string,
): SafeParseResult<EntityExtractedWebhook, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityExtractedWebhook$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityExtractedWebhook' from JSON`,
  );
}
