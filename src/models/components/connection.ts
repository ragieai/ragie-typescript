/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ConnectionMetadataMetadata = {};

export type Connection = {
  id: string;
  createdAt: Date;
  updatedAt: Date;
  metadata: ConnectionMetadataMetadata;
  type: string;
  name: string;
  enabled: boolean;
  lastSyncedAt?: Date | null | undefined;
  syncing?: boolean | null | undefined;
};

/** @internal */
export const ConnectionMetadataMetadata$inboundSchema: z.ZodType<
  ConnectionMetadataMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ConnectionMetadataMetadata$Outbound = {};

/** @internal */
export const ConnectionMetadataMetadata$outboundSchema: z.ZodType<
  ConnectionMetadataMetadata$Outbound,
  z.ZodTypeDef,
  ConnectionMetadataMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConnectionMetadataMetadata$ {
  /** @deprecated use `ConnectionMetadataMetadata$inboundSchema` instead. */
  export const inboundSchema = ConnectionMetadataMetadata$inboundSchema;
  /** @deprecated use `ConnectionMetadataMetadata$outboundSchema` instead. */
  export const outboundSchema = ConnectionMetadataMetadata$outboundSchema;
  /** @deprecated use `ConnectionMetadataMetadata$Outbound` instead. */
  export type Outbound = ConnectionMetadataMetadata$Outbound;
}

export function connectionMetadataMetadataToJSON(
  connectionMetadataMetadata: ConnectionMetadataMetadata,
): string {
  return JSON.stringify(
    ConnectionMetadataMetadata$outboundSchema.parse(connectionMetadataMetadata),
  );
}

export function connectionMetadataMetadataFromJSON(
  jsonString: string,
): SafeParseResult<ConnectionMetadataMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConnectionMetadataMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConnectionMetadataMetadata' from JSON`,
  );
}

/** @internal */
export const Connection$inboundSchema: z.ZodType<
  Connection,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  metadata: z.lazy(() => ConnectionMetadataMetadata$inboundSchema),
  type: z.string(),
  name: z.string(),
  enabled: z.boolean(),
  last_synced_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  syncing: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "last_synced_at": "lastSyncedAt",
  });
});

/** @internal */
export type Connection$Outbound = {
  id: string;
  created_at: string;
  updated_at: string;
  metadata: ConnectionMetadataMetadata$Outbound;
  type: string;
  name: string;
  enabled: boolean;
  last_synced_at?: string | null | undefined;
  syncing?: boolean | null | undefined;
};

/** @internal */
export const Connection$outboundSchema: z.ZodType<
  Connection$Outbound,
  z.ZodTypeDef,
  Connection
> = z.object({
  id: z.string(),
  createdAt: z.date().transform(v => v.toISOString()),
  updatedAt: z.date().transform(v => v.toISOString()),
  metadata: z.lazy(() => ConnectionMetadataMetadata$outboundSchema),
  type: z.string(),
  name: z.string(),
  enabled: z.boolean(),
  lastSyncedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  syncing: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    updatedAt: "updated_at",
    lastSyncedAt: "last_synced_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Connection$ {
  /** @deprecated use `Connection$inboundSchema` instead. */
  export const inboundSchema = Connection$inboundSchema;
  /** @deprecated use `Connection$outboundSchema` instead. */
  export const outboundSchema = Connection$outboundSchema;
  /** @deprecated use `Connection$Outbound` instead. */
  export type Outbound = Connection$Outbound;
}

export function connectionToJSON(connection: Connection): string {
  return JSON.stringify(Connection$outboundSchema.parse(connection));
}

export function connectionFromJSON(
  jsonString: string,
): SafeParseResult<Connection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Connection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Connection' from JSON`,
  );
}
