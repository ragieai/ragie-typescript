/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ConnectionSyncFinishedWebhookPayload,
  ConnectionSyncFinishedWebhookPayload$inboundSchema,
  ConnectionSyncFinishedWebhookPayload$Outbound,
  ConnectionSyncFinishedWebhookPayload$outboundSchema,
} from "./connectionsyncfinishedwebhookpayload.js";

export type ConnectionSyncFinishedWebhook = {
  nonce: string;
  type?: "connection_sync_finished" | undefined;
  payload: ConnectionSyncFinishedWebhookPayload;
};

/** @internal */
export const ConnectionSyncFinishedWebhook$inboundSchema: z.ZodType<
  ConnectionSyncFinishedWebhook,
  z.ZodTypeDef,
  unknown
> = z.object({
  nonce: z.string(),
  type: z.literal("connection_sync_finished").optional(),
  payload: ConnectionSyncFinishedWebhookPayload$inboundSchema,
});

/** @internal */
export type ConnectionSyncFinishedWebhook$Outbound = {
  nonce: string;
  type: "connection_sync_finished";
  payload: ConnectionSyncFinishedWebhookPayload$Outbound;
};

/** @internal */
export const ConnectionSyncFinishedWebhook$outboundSchema: z.ZodType<
  ConnectionSyncFinishedWebhook$Outbound,
  z.ZodTypeDef,
  ConnectionSyncFinishedWebhook
> = z.object({
  nonce: z.string(),
  type: z.literal("connection_sync_finished").default(
    "connection_sync_finished" as const,
  ),
  payload: ConnectionSyncFinishedWebhookPayload$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConnectionSyncFinishedWebhook$ {
  /** @deprecated use `ConnectionSyncFinishedWebhook$inboundSchema` instead. */
  export const inboundSchema = ConnectionSyncFinishedWebhook$inboundSchema;
  /** @deprecated use `ConnectionSyncFinishedWebhook$outboundSchema` instead. */
  export const outboundSchema = ConnectionSyncFinishedWebhook$outboundSchema;
  /** @deprecated use `ConnectionSyncFinishedWebhook$Outbound` instead. */
  export type Outbound = ConnectionSyncFinishedWebhook$Outbound;
}

export function connectionSyncFinishedWebhookToJSON(
  connectionSyncFinishedWebhook: ConnectionSyncFinishedWebhook,
): string {
  return JSON.stringify(
    ConnectionSyncFinishedWebhook$outboundSchema.parse(
      connectionSyncFinishedWebhook,
    ),
  );
}

export function connectionSyncFinishedWebhookFromJSON(
  jsonString: string,
): SafeParseResult<ConnectionSyncFinishedWebhook, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConnectionSyncFinishedWebhook$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConnectionSyncFinishedWebhook' from JSON`,
  );
}
