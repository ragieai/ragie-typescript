/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ReasoningSummary = {
  /**
   * The summary of the reasoning.
   */
  summary: string;
  type?: "summary" | undefined;
};

/** @internal */
export const ReasoningSummary$inboundSchema: z.ZodType<
  ReasoningSummary,
  z.ZodTypeDef,
  unknown
> = z.object({
  summary: z.string(),
  type: z.literal("summary").default("summary"),
});

/** @internal */
export type ReasoningSummary$Outbound = {
  summary: string;
  type: "summary";
};

/** @internal */
export const ReasoningSummary$outboundSchema: z.ZodType<
  ReasoningSummary$Outbound,
  z.ZodTypeDef,
  ReasoningSummary
> = z.object({
  summary: z.string(),
  type: z.literal("summary").default("summary" as const),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReasoningSummary$ {
  /** @deprecated use `ReasoningSummary$inboundSchema` instead. */
  export const inboundSchema = ReasoningSummary$inboundSchema;
  /** @deprecated use `ReasoningSummary$outboundSchema` instead. */
  export const outboundSchema = ReasoningSummary$outboundSchema;
  /** @deprecated use `ReasoningSummary$Outbound` instead. */
  export type Outbound = ReasoningSummary$Outbound;
}

export function reasoningSummaryToJSON(
  reasoningSummary: ReasoningSummary,
): string {
  return JSON.stringify(
    ReasoningSummary$outboundSchema.parse(reasoningSummary),
  );
}

export function reasoningSummaryFromJSON(
  jsonString: string,
): SafeParseResult<ReasoningSummary, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReasoningSummary$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReasoningSummary' from JSON`,
  );
}
