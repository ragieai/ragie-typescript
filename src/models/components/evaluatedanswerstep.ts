/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Answer,
  Answer$inboundSchema,
  Answer$Outbound,
  Answer$outboundSchema,
} from "./answer.js";

export type EvaluatedAnswerStep = {
  type?: "evaluated_answer" | undefined;
  think: string;
  currentQuestion: string;
  answer: Answer;
  /**
   * A list of questions ids that are no longer relevant to the current answer referenced by their IDs.
   */
  otherResolvedQuestionIds?: Array<string> | undefined;
  evalPassed: boolean;
  evalReason: string;
};

/** @internal */
export const EvaluatedAnswerStep$inboundSchema: z.ZodType<
  EvaluatedAnswerStep,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("evaluated_answer").default("evaluated_answer"),
  think: z.string(),
  current_question: z.string(),
  answer: Answer$inboundSchema,
  other_resolved_question_ids: z.array(z.string()).optional(),
  eval_passed: z.boolean(),
  eval_reason: z.string(),
}).transform((v) => {
  return remap$(v, {
    "current_question": "currentQuestion",
    "other_resolved_question_ids": "otherResolvedQuestionIds",
    "eval_passed": "evalPassed",
    "eval_reason": "evalReason",
  });
});

/** @internal */
export type EvaluatedAnswerStep$Outbound = {
  type: "evaluated_answer";
  think: string;
  current_question: string;
  answer: Answer$Outbound;
  other_resolved_question_ids?: Array<string> | undefined;
  eval_passed: boolean;
  eval_reason: string;
};

/** @internal */
export const EvaluatedAnswerStep$outboundSchema: z.ZodType<
  EvaluatedAnswerStep$Outbound,
  z.ZodTypeDef,
  EvaluatedAnswerStep
> = z.object({
  type: z.literal("evaluated_answer").default("evaluated_answer" as const),
  think: z.string(),
  currentQuestion: z.string(),
  answer: Answer$outboundSchema,
  otherResolvedQuestionIds: z.array(z.string()).optional(),
  evalPassed: z.boolean(),
  evalReason: z.string(),
}).transform((v) => {
  return remap$(v, {
    currentQuestion: "current_question",
    otherResolvedQuestionIds: "other_resolved_question_ids",
    evalPassed: "eval_passed",
    evalReason: "eval_reason",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvaluatedAnswerStep$ {
  /** @deprecated use `EvaluatedAnswerStep$inboundSchema` instead. */
  export const inboundSchema = EvaluatedAnswerStep$inboundSchema;
  /** @deprecated use `EvaluatedAnswerStep$outboundSchema` instead. */
  export const outboundSchema = EvaluatedAnswerStep$outboundSchema;
  /** @deprecated use `EvaluatedAnswerStep$Outbound` instead. */
  export type Outbound = EvaluatedAnswerStep$Outbound;
}

export function evaluatedAnswerStepToJSON(
  evaluatedAnswerStep: EvaluatedAnswerStep,
): string {
  return JSON.stringify(
    EvaluatedAnswerStep$outboundSchema.parse(evaluatedAnswerStep),
  );
}

export function evaluatedAnswerStepFromJSON(
  jsonString: string,
): SafeParseResult<EvaluatedAnswerStep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvaluatedAnswerStep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvaluatedAnswerStep' from JSON`,
  );
}
