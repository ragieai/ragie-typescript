/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Document data in a text or JSON format.
 */
export type UpdateDocumentRawParamsData = string | { [k: string]: any };

export type UpdateDocumentRawParams = {
  /**
   * Document data in a text or JSON format.
   */
  data: string | { [k: string]: any };
};

/** @internal */
export const UpdateDocumentRawParamsData$inboundSchema: z.ZodType<
  UpdateDocumentRawParamsData,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type UpdateDocumentRawParamsData$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const UpdateDocumentRawParamsData$outboundSchema: z.ZodType<
  UpdateDocumentRawParamsData$Outbound,
  z.ZodTypeDef,
  UpdateDocumentRawParamsData
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDocumentRawParamsData$ {
  /** @deprecated use `UpdateDocumentRawParamsData$inboundSchema` instead. */
  export const inboundSchema = UpdateDocumentRawParamsData$inboundSchema;
  /** @deprecated use `UpdateDocumentRawParamsData$outboundSchema` instead. */
  export const outboundSchema = UpdateDocumentRawParamsData$outboundSchema;
  /** @deprecated use `UpdateDocumentRawParamsData$Outbound` instead. */
  export type Outbound = UpdateDocumentRawParamsData$Outbound;
}

export function updateDocumentRawParamsDataToJSON(
  updateDocumentRawParamsData: UpdateDocumentRawParamsData,
): string {
  return JSON.stringify(
    UpdateDocumentRawParamsData$outboundSchema.parse(
      updateDocumentRawParamsData,
    ),
  );
}

export function updateDocumentRawParamsDataFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDocumentRawParamsData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDocumentRawParamsData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDocumentRawParamsData' from JSON`,
  );
}

/** @internal */
export const UpdateDocumentRawParams$inboundSchema: z.ZodType<
  UpdateDocumentRawParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.union([z.string(), z.record(z.any())]),
});

/** @internal */
export type UpdateDocumentRawParams$Outbound = {
  data: string | { [k: string]: any };
};

/** @internal */
export const UpdateDocumentRawParams$outboundSchema: z.ZodType<
  UpdateDocumentRawParams$Outbound,
  z.ZodTypeDef,
  UpdateDocumentRawParams
> = z.object({
  data: z.union([z.string(), z.record(z.any())]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDocumentRawParams$ {
  /** @deprecated use `UpdateDocumentRawParams$inboundSchema` instead. */
  export const inboundSchema = UpdateDocumentRawParams$inboundSchema;
  /** @deprecated use `UpdateDocumentRawParams$outboundSchema` instead. */
  export const outboundSchema = UpdateDocumentRawParams$outboundSchema;
  /** @deprecated use `UpdateDocumentRawParams$Outbound` instead. */
  export type Outbound = UpdateDocumentRawParams$Outbound;
}

export function updateDocumentRawParamsToJSON(
  updateDocumentRawParams: UpdateDocumentRawParams,
): string {
  return JSON.stringify(
    UpdateDocumentRawParams$outboundSchema.parse(updateDocumentRawParams),
  );
}

export function updateDocumentRawParamsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDocumentRawParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDocumentRawParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDocumentRawParams' from JSON`,
  );
}
