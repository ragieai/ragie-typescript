/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ReasoningText = {
  /**
   * The text of the reasoning.
   */
  text: string;
  type?: "reasoning_text" | undefined;
};

/** @internal */
export const ReasoningText$inboundSchema: z.ZodType<
  ReasoningText,
  z.ZodTypeDef,
  unknown
> = z.object({
  text: z.string(),
  type: z.literal("reasoning_text").default("reasoning_text"),
});

/** @internal */
export type ReasoningText$Outbound = {
  text: string;
  type: "reasoning_text";
};

/** @internal */
export const ReasoningText$outboundSchema: z.ZodType<
  ReasoningText$Outbound,
  z.ZodTypeDef,
  ReasoningText
> = z.object({
  text: z.string(),
  type: z.literal("reasoning_text").default("reasoning_text" as const),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReasoningText$ {
  /** @deprecated use `ReasoningText$inboundSchema` instead. */
  export const inboundSchema = ReasoningText$inboundSchema;
  /** @deprecated use `ReasoningText$outboundSchema` instead. */
  export const outboundSchema = ReasoningText$outboundSchema;
  /** @deprecated use `ReasoningText$Outbound` instead. */
  export type Outbound = ReasoningText$Outbound;
}

export function reasoningTextToJSON(reasoningText: ReasoningText): string {
  return JSON.stringify(ReasoningText$outboundSchema.parse(reasoningText));
}

export function reasoningTextFromJSON(
  jsonString: string,
): SafeParseResult<ReasoningText, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReasoningText$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReasoningText' from JSON`,
  );
}
