/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  HubspotData,
  HubspotData$inboundSchema,
  HubspotData$Outbound,
  HubspotData$outboundSchema,
} from "./hubspotdata.js";
import {
  OAuthRefreshTokenCredentials,
  OAuthRefreshTokenCredentials$inboundSchema,
  OAuthRefreshTokenCredentials$Outbound,
  OAuthRefreshTokenCredentials$outboundSchema,
} from "./oauthrefreshtokencredentials.js";

export type AuthenticatorHubspotConnection = {
  provider?: "hubspot" | undefined;
  data: HubspotData;
  hubId: string;
  hubDomain: string;
  credentials: OAuthRefreshTokenCredentials;
};

/** @internal */
export const AuthenticatorHubspotConnection$inboundSchema: z.ZodType<
  AuthenticatorHubspotConnection,
  z.ZodTypeDef,
  unknown
> = z.object({
  provider: z.literal("hubspot").default("hubspot").optional(),
  data: HubspotData$inboundSchema,
  hub_id: z.string(),
  hub_domain: z.string(),
  credentials: OAuthRefreshTokenCredentials$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "hub_id": "hubId",
    "hub_domain": "hubDomain",
  });
});

/** @internal */
export type AuthenticatorHubspotConnection$Outbound = {
  provider: "hubspot";
  data: HubspotData$Outbound;
  hub_id: string;
  hub_domain: string;
  credentials: OAuthRefreshTokenCredentials$Outbound;
};

/** @internal */
export const AuthenticatorHubspotConnection$outboundSchema: z.ZodType<
  AuthenticatorHubspotConnection$Outbound,
  z.ZodTypeDef,
  AuthenticatorHubspotConnection
> = z.object({
  provider: z.literal("hubspot").default("hubspot" as const),
  data: HubspotData$outboundSchema,
  hubId: z.string(),
  hubDomain: z.string(),
  credentials: OAuthRefreshTokenCredentials$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    hubId: "hub_id",
    hubDomain: "hub_domain",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthenticatorHubspotConnection$ {
  /** @deprecated use `AuthenticatorHubspotConnection$inboundSchema` instead. */
  export const inboundSchema = AuthenticatorHubspotConnection$inboundSchema;
  /** @deprecated use `AuthenticatorHubspotConnection$outboundSchema` instead. */
  export const outboundSchema = AuthenticatorHubspotConnection$outboundSchema;
  /** @deprecated use `AuthenticatorHubspotConnection$Outbound` instead. */
  export type Outbound = AuthenticatorHubspotConnection$Outbound;
}

export function authenticatorHubspotConnectionToJSON(
  authenticatorHubspotConnection: AuthenticatorHubspotConnection,
): string {
  return JSON.stringify(
    AuthenticatorHubspotConnection$outboundSchema.parse(
      authenticatorHubspotConnection,
    ),
  );
}

export function authenticatorHubspotConnectionFromJSON(
  jsonString: string,
): SafeParseResult<AuthenticatorHubspotConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthenticatorHubspotConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthenticatorHubspotConnection' from JSON`,
  );
}
