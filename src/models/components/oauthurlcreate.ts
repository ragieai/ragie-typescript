/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type OAuthUrlCreateMetadata = {};

export const Mode = {
  HiRes: "hi_res",
  Fast: "fast",
} as const;
export type Mode = ClosedEnum<typeof Mode>;

export type OAuthUrlCreate = {
  redirectUri: string;
  sourceType: string;
  metadata?: OAuthUrlCreateMetadata | null | undefined;
  mode?: Mode | null | undefined;
  partition?: string | null | undefined;
};

/** @internal */
export const OAuthUrlCreateMetadata$inboundSchema: z.ZodType<
  OAuthUrlCreateMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OAuthUrlCreateMetadata$Outbound = {};

/** @internal */
export const OAuthUrlCreateMetadata$outboundSchema: z.ZodType<
  OAuthUrlCreateMetadata$Outbound,
  z.ZodTypeDef,
  OAuthUrlCreateMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OAuthUrlCreateMetadata$ {
  /** @deprecated use `OAuthUrlCreateMetadata$inboundSchema` instead. */
  export const inboundSchema = OAuthUrlCreateMetadata$inboundSchema;
  /** @deprecated use `OAuthUrlCreateMetadata$outboundSchema` instead. */
  export const outboundSchema = OAuthUrlCreateMetadata$outboundSchema;
  /** @deprecated use `OAuthUrlCreateMetadata$Outbound` instead. */
  export type Outbound = OAuthUrlCreateMetadata$Outbound;
}

export function oAuthUrlCreateMetadataToJSON(
  oAuthUrlCreateMetadata: OAuthUrlCreateMetadata,
): string {
  return JSON.stringify(
    OAuthUrlCreateMetadata$outboundSchema.parse(oAuthUrlCreateMetadata),
  );
}

export function oAuthUrlCreateMetadataFromJSON(
  jsonString: string,
): SafeParseResult<OAuthUrlCreateMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OAuthUrlCreateMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OAuthUrlCreateMetadata' from JSON`,
  );
}

/** @internal */
export const Mode$inboundSchema: z.ZodNativeEnum<typeof Mode> = z.nativeEnum(
  Mode,
);

/** @internal */
export const Mode$outboundSchema: z.ZodNativeEnum<typeof Mode> =
  Mode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Mode$ {
  /** @deprecated use `Mode$inboundSchema` instead. */
  export const inboundSchema = Mode$inboundSchema;
  /** @deprecated use `Mode$outboundSchema` instead. */
  export const outboundSchema = Mode$outboundSchema;
}

/** @internal */
export const OAuthUrlCreate$inboundSchema: z.ZodType<
  OAuthUrlCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  redirect_uri: z.string(),
  source_type: z.string(),
  metadata: z.nullable(z.lazy(() => OAuthUrlCreateMetadata$inboundSchema))
    .optional(),
  mode: z.nullable(Mode$inboundSchema).optional(),
  partition: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "redirect_uri": "redirectUri",
    "source_type": "sourceType",
  });
});

/** @internal */
export type OAuthUrlCreate$Outbound = {
  redirect_uri: string;
  source_type: string;
  metadata?: OAuthUrlCreateMetadata$Outbound | null | undefined;
  mode?: string | null | undefined;
  partition?: string | null | undefined;
};

/** @internal */
export const OAuthUrlCreate$outboundSchema: z.ZodType<
  OAuthUrlCreate$Outbound,
  z.ZodTypeDef,
  OAuthUrlCreate
> = z.object({
  redirectUri: z.string(),
  sourceType: z.string(),
  metadata: z.nullable(z.lazy(() => OAuthUrlCreateMetadata$outboundSchema))
    .optional(),
  mode: z.nullable(Mode$outboundSchema).optional(),
  partition: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    redirectUri: "redirect_uri",
    sourceType: "source_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OAuthUrlCreate$ {
  /** @deprecated use `OAuthUrlCreate$inboundSchema` instead. */
  export const inboundSchema = OAuthUrlCreate$inboundSchema;
  /** @deprecated use `OAuthUrlCreate$outboundSchema` instead. */
  export const outboundSchema = OAuthUrlCreate$outboundSchema;
  /** @deprecated use `OAuthUrlCreate$Outbound` instead. */
  export type Outbound = OAuthUrlCreate$Outbound;
}

export function oAuthUrlCreateToJSON(oAuthUrlCreate: OAuthUrlCreate): string {
  return JSON.stringify(OAuthUrlCreate$outboundSchema.parse(oAuthUrlCreate));
}

export function oAuthUrlCreateFromJSON(
  jsonString: string,
): SafeParseResult<OAuthUrlCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OAuthUrlCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OAuthUrlCreate' from JSON`,
  );
}
