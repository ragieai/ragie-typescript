/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { blobLikeSchema } from "../../types/blobs.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Partition strategy for the document. Options are `'hi_res'` or `'fast'`. When set to `'hi_res'`, images and tables will be extracted from the document. `'fast'` will only extract text. `'fast'` may be up to 20x faster than `'hi_res'`. `hi_res` is only applicable for Word documents, PDFs, Images, and PowerPoints. Images will always be processed in `hi_res`. If `hi_res` is set for an unsupported document type, it will be processed and billed in `fast` mode.
 */
export const CreateDocumentParamsMode = {
  HiRes: "hi_res",
  Fast: "fast",
} as const;
/**
 * Partition strategy for the document. Options are `'hi_res'` or `'fast'`. When set to `'hi_res'`, images and tables will be extracted from the document. `'fast'` will only extract text. `'fast'` may be up to 20x faster than `'hi_res'`. `hi_res` is only applicable for Word documents, PDFs, Images, and PowerPoints. Images will always be processed in `hi_res`. If `hi_res` is set for an unsupported document type, it will be processed and billed in `fast` mode.
 */
export type CreateDocumentParamsMode = ClosedEnum<
  typeof CreateDocumentParamsMode
>;

export type Metadata = string | number | boolean | Array<string>;

export type FileT = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

export type CreateDocumentParams = {
  /**
   * Partition strategy for the document. Options are `'hi_res'` or `'fast'`. When set to `'hi_res'`, images and tables will be extracted from the document. `'fast'` will only extract text. `'fast'` may be up to 20x faster than `'hi_res'`. `hi_res` is only applicable for Word documents, PDFs, Images, and PowerPoints. Images will always be processed in `hi_res`. If `hi_res` is set for an unsupported document type, it will be processed and billed in `fast` mode.
   */
  mode?: CreateDocumentParamsMode | undefined;
  /**
   * Metadata for the document. Keys must be strings. Values may be strings, numbers, booleans, or lists of strings. Numbers may be integers or floating point and will be converted to 64 bit floating point. 1000 total values are allowed. Each item in an array counts towards the total. The following keys are reserved for internal use: `document_id`, `document_type`, `document_source`, `document_name`, `document_uploaded_at`, `start_time`, `end_time`.
   */
  metadata?:
    | { [k: string]: string | number | boolean | Array<string> }
    | undefined;
  /**
   * The binary file to upload, extract, and index for retrieval. The following file types are supported: Plain Text: `.eml` `.html` `.json` `.md` `.msg` `.rst` `.rtf` `.txt` `.xml`
   *
   * @remarks
   * Images: `.png` `.webp` `.jpg` `.jpeg` `.tiff` `.bmp` `.heic`
   * Documents: `.csv` `.doc` `.docx` `.epub` `.epub+zip` `.odt` `.pdf` `.ppt` `.pptx` `.tsv` `.xlsx` `.xls`.
   */
  file: FileT | Blob;
  /**
   * An optional identifier for the document. A common value might be an id in an external system or the URL where the source file may be found.
   */
  externalId?: string | undefined;
  /**
   * An optional name for the document. If set, the document will have this name. Otherwise it will default to the file's name.
   */
  name?: string | undefined;
  /**
   * An optional partition identifier. Documents can be scoped to a partition. Partitions must be lowercase alphanumeric and may only include the special characters `_` and `-`.  A partition is created any time a document is created.
   */
  partition?: string | undefined;
};

/** @internal */
export const CreateDocumentParamsMode$inboundSchema: z.ZodNativeEnum<
  typeof CreateDocumentParamsMode
> = z.nativeEnum(CreateDocumentParamsMode);

/** @internal */
export const CreateDocumentParamsMode$outboundSchema: z.ZodNativeEnum<
  typeof CreateDocumentParamsMode
> = CreateDocumentParamsMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDocumentParamsMode$ {
  /** @deprecated use `CreateDocumentParamsMode$inboundSchema` instead. */
  export const inboundSchema = CreateDocumentParamsMode$inboundSchema;
  /** @deprecated use `CreateDocumentParamsMode$outboundSchema` instead. */
  export const outboundSchema = CreateDocumentParamsMode$outboundSchema;
}

/** @internal */
export const Metadata$inboundSchema: z.ZodType<
  Metadata,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number(), z.boolean(), z.array(z.string())]);

/** @internal */
export type Metadata$Outbound = string | number | boolean | Array<string>;

/** @internal */
export const Metadata$outboundSchema: z.ZodType<
  Metadata$Outbound,
  z.ZodTypeDef,
  Metadata
> = z.union([z.string(), z.number(), z.boolean(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Metadata$ {
  /** @deprecated use `Metadata$inboundSchema` instead. */
  export const inboundSchema = Metadata$inboundSchema;
  /** @deprecated use `Metadata$outboundSchema` instead. */
  export const outboundSchema = Metadata$outboundSchema;
  /** @deprecated use `Metadata$Outbound` instead. */
  export type Outbound = Metadata$Outbound;
}

export function metadataToJSON(metadata: Metadata): string {
  return JSON.stringify(Metadata$outboundSchema.parse(metadata));
}

export function metadataFromJSON(
  jsonString: string,
): SafeParseResult<Metadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Metadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Metadata' from JSON`,
  );
}

/** @internal */
export const FileT$inboundSchema: z.ZodType<FileT, z.ZodTypeDef, unknown> = z
  .object({
    fileName: z.string(),
    content: z.union([
      z.instanceof(ReadableStream<Uint8Array>),
      z.instanceof(Blob),
      z.instanceof(ArrayBuffer),
      z.instanceof(Uint8Array),
    ]),
  });

/** @internal */
export type FileT$Outbound = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

/** @internal */
export const FileT$outboundSchema: z.ZodType<
  FileT$Outbound,
  z.ZodTypeDef,
  FileT
> = z.object({
  fileName: z.string(),
  content: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileT$ {
  /** @deprecated use `FileT$inboundSchema` instead. */
  export const inboundSchema = FileT$inboundSchema;
  /** @deprecated use `FileT$outboundSchema` instead. */
  export const outboundSchema = FileT$outboundSchema;
  /** @deprecated use `FileT$Outbound` instead. */
  export type Outbound = FileT$Outbound;
}

export function fileToJSON(fileT: FileT): string {
  return JSON.stringify(FileT$outboundSchema.parse(fileT));
}

export function fileFromJSON(
  jsonString: string,
): SafeParseResult<FileT, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FileT$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FileT' from JSON`,
  );
}

/** @internal */
export const CreateDocumentParams$inboundSchema: z.ZodType<
  CreateDocumentParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: CreateDocumentParamsMode$inboundSchema.default("fast"),
  metadata: z.record(
    z.union([z.string(), z.number(), z.boolean(), z.array(z.string())]),
  ).optional(),
  file: z.lazy(() => FileT$inboundSchema),
  external_id: z.string().optional(),
  name: z.string().optional(),
  partition: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "external_id": "externalId",
  });
});

/** @internal */
export type CreateDocumentParams$Outbound = {
  mode: string;
  metadata?:
    | { [k: string]: string | number | boolean | Array<string> }
    | undefined;
  file: FileT$Outbound | Blob;
  external_id?: string | undefined;
  name?: string | undefined;
  partition?: string | undefined;
};

/** @internal */
export const CreateDocumentParams$outboundSchema: z.ZodType<
  CreateDocumentParams$Outbound,
  z.ZodTypeDef,
  CreateDocumentParams
> = z.object({
  mode: CreateDocumentParamsMode$outboundSchema.default("fast"),
  metadata: z.record(
    z.union([z.string(), z.number(), z.boolean(), z.array(z.string())]),
  ).optional(),
  file: z.lazy(() => FileT$outboundSchema).or(blobLikeSchema),
  externalId: z.string().optional(),
  name: z.string().optional(),
  partition: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    externalId: "external_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDocumentParams$ {
  /** @deprecated use `CreateDocumentParams$inboundSchema` instead. */
  export const inboundSchema = CreateDocumentParams$inboundSchema;
  /** @deprecated use `CreateDocumentParams$outboundSchema` instead. */
  export const outboundSchema = CreateDocumentParams$outboundSchema;
  /** @deprecated use `CreateDocumentParams$Outbound` instead. */
  export type Outbound = CreateDocumentParams$Outbound;
}

export function createDocumentParamsToJSON(
  createDocumentParams: CreateDocumentParams,
): string {
  return JSON.stringify(
    CreateDocumentParams$outboundSchema.parse(createDocumentParams),
  );
}

export function createDocumentParamsFromJSON(
  jsonString: string,
): SafeParseResult<CreateDocumentParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDocumentParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDocumentParams' from JSON`,
  );
}
