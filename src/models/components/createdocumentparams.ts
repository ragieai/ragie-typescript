/*
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

import * as b64$ from "../../lib/base64.js";
import { remap as remap$ } from "../../lib/primitives.js";
import { blobLikeSchema } from "../../types/blobs.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * Partition strategy for the document. Options are `'hi_res'` or `'fast'`. Only applicable for rich documents such as word documents and PDFs. When set to `'hi_res'`, images and tables will be extracted from the document. `'fast'` will only extract text. `'fast'` may be up to 20x faster than `'hi_res'`.
 */
export const Mode = {
    HiRes: "hi_res",
    Fast: "fast",
} as const;
/**
 * Partition strategy for the document. Options are `'hi_res'` or `'fast'`. Only applicable for rich documents such as word documents and PDFs. When set to `'hi_res'`, images and tables will be extracted from the document. `'fast'` will only extract text. `'fast'` may be up to 20x faster than `'hi_res'`.
 */
export type Mode = ClosedEnum<typeof Mode>;

export type CreateDocumentParamsMetadata = string | number | boolean | Array<string>;

export type FileT = {
    fileName: string;
    content: Uint8Array | string;
};

export type CreateDocumentParams = {
    /**
     * The binary file to upload, extract, and index for retrieval. The following file types are supported: Plain Text: `.eml` `.html` `.json` `.md` `.msg` `.rst` `.rtf` `.txt` `.xml`
     *
     * @remarks
     * Images: `.png` `.webp` `.jpg` `.jpeg` `.tiff` `.bmp` `.heic`
     * Documents: `.csv` `.doc` `.docx` `.epub` `.odt` `.pdf` `.ppt` `.pptx` `.tsv` `.xlsx`.
     */
    file: FileT | Blob;
    /**
     * An optional identifier for the document. A common value might be an id in an external system or the URL where the source file may be found.
     */
    externalId?: string | undefined;
    /**
     * Metadata for the document. Keys must be strings. Values may be strings, numbers, booleans, or lists of strings. Numbers may be integers or floating point and will be converted to 64 bit floating point. 1000 total values are allowed. Each item in an array counts towards the total. The following keys are reserved for internal use: `document_id`, `document_type`, `document_source`, `document_name`, `document_uploaded_at`.
     */
    metadata?: { [k: string]: string | number | boolean | Array<string> } | undefined;
    /**
     * Partition strategy for the document. Options are `'hi_res'` or `'fast'`. Only applicable for rich documents such as word documents and PDFs. When set to `'hi_res'`, images and tables will be extracted from the document. `'fast'` will only extract text. `'fast'` may be up to 20x faster than `'hi_res'`.
     */
    mode?: Mode | undefined;
};

/** @internal */
export const Mode$inboundSchema: z.ZodNativeEnum<typeof Mode> = z.nativeEnum(Mode);

/** @internal */
export const Mode$outboundSchema: z.ZodNativeEnum<typeof Mode> = Mode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Mode$ {
    /** @deprecated use `Mode$inboundSchema` instead. */
    export const inboundSchema = Mode$inboundSchema;
    /** @deprecated use `Mode$outboundSchema` instead. */
    export const outboundSchema = Mode$outboundSchema;
}

/** @internal */
export const CreateDocumentParamsMetadata$inboundSchema: z.ZodType<
    CreateDocumentParamsMetadata,
    z.ZodTypeDef,
    unknown
> = z.union([z.string(), z.number(), z.boolean(), z.array(z.string())]);

/** @internal */
export type CreateDocumentParamsMetadata$Outbound = string | number | boolean | Array<string>;

/** @internal */
export const CreateDocumentParamsMetadata$outboundSchema: z.ZodType<
    CreateDocumentParamsMetadata$Outbound,
    z.ZodTypeDef,
    CreateDocumentParamsMetadata
> = z.union([z.string(), z.number(), z.boolean(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDocumentParamsMetadata$ {
    /** @deprecated use `CreateDocumentParamsMetadata$inboundSchema` instead. */
    export const inboundSchema = CreateDocumentParamsMetadata$inboundSchema;
    /** @deprecated use `CreateDocumentParamsMetadata$outboundSchema` instead. */
    export const outboundSchema = CreateDocumentParamsMetadata$outboundSchema;
    /** @deprecated use `CreateDocumentParamsMetadata$Outbound` instead. */
    export type Outbound = CreateDocumentParamsMetadata$Outbound;
}

/** @internal */
export const FileT$inboundSchema: z.ZodType<FileT, z.ZodTypeDef, unknown> = z.object({
    fileName: z.string(),
    content: b64$.zodInbound,
});

/** @internal */
export type FileT$Outbound = {
    fileName: string;
    content: Uint8Array;
};

/** @internal */
export const FileT$outboundSchema: z.ZodType<FileT$Outbound, z.ZodTypeDef, FileT> = z.object({
    fileName: z.string(),
    content: b64$.zodOutbound,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileT$ {
    /** @deprecated use `FileT$inboundSchema` instead. */
    export const inboundSchema = FileT$inboundSchema;
    /** @deprecated use `FileT$outboundSchema` instead. */
    export const outboundSchema = FileT$outboundSchema;
    /** @deprecated use `FileT$Outbound` instead. */
    export type Outbound = FileT$Outbound;
}

/** @internal */
export const CreateDocumentParams$inboundSchema: z.ZodType<
    CreateDocumentParams,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        file: z.lazy(() => FileT$inboundSchema),
        external_id: z.string().optional(),
        metadata: z
            .record(z.union([z.string(), z.number(), z.boolean(), z.array(z.string())]))
            .optional(),
        mode: Mode$inboundSchema.default("fast"),
    })
    .transform((v) => {
        return remap$(v, {
            external_id: "externalId",
        });
    });

/** @internal */
export type CreateDocumentParams$Outbound = {
    file: FileT$Outbound | Blob;
    external_id?: string | undefined;
    metadata?: { [k: string]: string | number | boolean | Array<string> } | undefined;
    mode: string;
};

/** @internal */
export const CreateDocumentParams$outboundSchema: z.ZodType<
    CreateDocumentParams$Outbound,
    z.ZodTypeDef,
    CreateDocumentParams
> = z
    .object({
        file: z.lazy(() => FileT$outboundSchema).or(blobLikeSchema),
        externalId: z.string().optional(),
        metadata: z
            .record(z.union([z.string(), z.number(), z.boolean(), z.array(z.string())]))
            .optional(),
        mode: Mode$outboundSchema.default("fast"),
    })
    .transform((v) => {
        return remap$(v, {
            externalId: "external_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDocumentParams$ {
    /** @deprecated use `CreateDocumentParams$inboundSchema` instead. */
    export const inboundSchema = CreateDocumentParams$inboundSchema;
    /** @deprecated use `CreateDocumentParams$outboundSchema` instead. */
    export const outboundSchema = CreateDocumentParams$outboundSchema;
    /** @deprecated use `CreateDocumentParams$Outbound` instead. */
    export type Outbound = CreateDocumentParams$Outbound;
}
