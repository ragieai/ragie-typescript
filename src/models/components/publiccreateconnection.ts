/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  MediaModeParam,
  MediaModeParam$inboundSchema,
  MediaModeParam$Outbound,
  MediaModeParam$outboundSchema,
} from "./mediamodeparam.js";
import {
  PublicBackblazeConnection,
  PublicBackblazeConnection$inboundSchema,
  PublicBackblazeConnection$Outbound,
  PublicBackblazeConnection$outboundSchema,
} from "./publicbackblazeconnection.js";
import {
  PublicFreshdeskConnection,
  PublicFreshdeskConnection$inboundSchema,
  PublicFreshdeskConnection$Outbound,
  PublicFreshdeskConnection$outboundSchema,
} from "./publicfreshdeskconnection.js";
import {
  PublicGCSConnection,
  PublicGCSConnection$inboundSchema,
  PublicGCSConnection$Outbound,
  PublicGCSConnection$outboundSchema,
} from "./publicgcsconnection.js";
import {
  PublicIntercomConnection,
  PublicIntercomConnection$inboundSchema,
  PublicIntercomConnection$Outbound,
  PublicIntercomConnection$outboundSchema,
} from "./publicintercomconnection.js";
import {
  PublicS3CompatibleConnection,
  PublicS3CompatibleConnection$inboundSchema,
  PublicS3CompatibleConnection$Outbound,
  PublicS3CompatibleConnection$outboundSchema,
} from "./publics3compatibleconnection.js";
import {
  PublicZendeskConnection,
  PublicZendeskConnection$inboundSchema,
  PublicZendeskConnection$Outbound,
  PublicZendeskConnection$outboundSchema,
} from "./publiczendeskconnection.js";

export type PublicCreateConnectionMetadata =
  | string
  | number
  | boolean
  | Array<string>;

export type PublicCreateConnectionConnection =
  | (PublicFreshdeskConnection & { provider: "freshdesk" })
  | (PublicBackblazeConnection & { provider: "backblaze" })
  | (PublicGCSConnection & { provider: "gcs" })
  | (PublicIntercomConnection & { provider: "intercom" })
  | (PublicS3CompatibleConnection & { provider: "s3" })
  | (PublicZendeskConnection & { provider: "zendesk" });

export type PublicCreateConnection = {
  partitionStrategy: MediaModeParam;
  partition?: string | null | undefined;
  pageLimit?: number | null | undefined;
  config?: { [k: string]: any } | null | undefined;
  /**
   * Metadata for the document. Keys must be strings. Values may be strings, numbers, booleans, or lists of strings. Numbers may be integers or floating point and will be converted to 64 bit floating point. 1000 total values are allowed. Each item in an array counts towards the total. The following keys are reserved for internal use: `document_id`, `document_type`, `document_source`, `document_name`, `document_uploaded_at`, `start_time`, `end_time`.
   */
  metadata?:
    | { [k: string]: string | number | boolean | Array<string> }
    | undefined;
  connection:
    | (PublicFreshdeskConnection & { provider: "freshdesk" })
    | (PublicBackblazeConnection & { provider: "backblaze" })
    | (PublicGCSConnection & { provider: "gcs" })
    | (PublicIntercomConnection & { provider: "intercom" })
    | (PublicS3CompatibleConnection & { provider: "s3" })
    | (PublicZendeskConnection & { provider: "zendesk" });
};

/** @internal */
export const PublicCreateConnectionMetadata$inboundSchema: z.ZodType<
  PublicCreateConnectionMetadata,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number().int(), z.boolean(), z.array(z.string())]);

/** @internal */
export type PublicCreateConnectionMetadata$Outbound =
  | string
  | number
  | boolean
  | Array<string>;

/** @internal */
export const PublicCreateConnectionMetadata$outboundSchema: z.ZodType<
  PublicCreateConnectionMetadata$Outbound,
  z.ZodTypeDef,
  PublicCreateConnectionMetadata
> = z.union([z.string(), z.number().int(), z.boolean(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublicCreateConnectionMetadata$ {
  /** @deprecated use `PublicCreateConnectionMetadata$inboundSchema` instead. */
  export const inboundSchema = PublicCreateConnectionMetadata$inboundSchema;
  /** @deprecated use `PublicCreateConnectionMetadata$outboundSchema` instead. */
  export const outboundSchema = PublicCreateConnectionMetadata$outboundSchema;
  /** @deprecated use `PublicCreateConnectionMetadata$Outbound` instead. */
  export type Outbound = PublicCreateConnectionMetadata$Outbound;
}

export function publicCreateConnectionMetadataToJSON(
  publicCreateConnectionMetadata: PublicCreateConnectionMetadata,
): string {
  return JSON.stringify(
    PublicCreateConnectionMetadata$outboundSchema.parse(
      publicCreateConnectionMetadata,
    ),
  );
}

export function publicCreateConnectionMetadataFromJSON(
  jsonString: string,
): SafeParseResult<PublicCreateConnectionMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PublicCreateConnectionMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PublicCreateConnectionMetadata' from JSON`,
  );
}

/** @internal */
export const PublicCreateConnectionConnection$inboundSchema: z.ZodType<
  PublicCreateConnectionConnection,
  z.ZodTypeDef,
  unknown
> = z.union([
  PublicFreshdeskConnection$inboundSchema.and(
    z.object({ provider: z.literal("freshdesk") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  PublicBackblazeConnection$inboundSchema.and(
    z.object({ provider: z.literal("backblaze") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  PublicGCSConnection$inboundSchema.and(
    z.object({ provider: z.literal("gcs") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  PublicIntercomConnection$inboundSchema.and(
    z.object({ provider: z.literal("intercom") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  PublicS3CompatibleConnection$inboundSchema.and(
    z.object({ provider: z.literal("s3") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  PublicZendeskConnection$inboundSchema.and(
    z.object({ provider: z.literal("zendesk") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
]);

/** @internal */
export type PublicCreateConnectionConnection$Outbound =
  | (PublicFreshdeskConnection$Outbound & { provider: "freshdesk" })
  | (PublicBackblazeConnection$Outbound & { provider: "backblaze" })
  | (PublicGCSConnection$Outbound & { provider: "gcs" })
  | (PublicIntercomConnection$Outbound & { provider: "intercom" })
  | (PublicS3CompatibleConnection$Outbound & { provider: "s3" })
  | (PublicZendeskConnection$Outbound & { provider: "zendesk" });

/** @internal */
export const PublicCreateConnectionConnection$outboundSchema: z.ZodType<
  PublicCreateConnectionConnection$Outbound,
  z.ZodTypeDef,
  PublicCreateConnectionConnection
> = z.union([
  PublicFreshdeskConnection$outboundSchema.and(
    z.object({ provider: z.literal("freshdesk") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  PublicBackblazeConnection$outboundSchema.and(
    z.object({ provider: z.literal("backblaze") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  PublicGCSConnection$outboundSchema.and(
    z.object({ provider: z.literal("gcs") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  PublicIntercomConnection$outboundSchema.and(
    z.object({ provider: z.literal("intercom") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  PublicS3CompatibleConnection$outboundSchema.and(
    z.object({ provider: z.literal("s3") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  PublicZendeskConnection$outboundSchema.and(
    z.object({ provider: z.literal("zendesk") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublicCreateConnectionConnection$ {
  /** @deprecated use `PublicCreateConnectionConnection$inboundSchema` instead. */
  export const inboundSchema = PublicCreateConnectionConnection$inboundSchema;
  /** @deprecated use `PublicCreateConnectionConnection$outboundSchema` instead. */
  export const outboundSchema = PublicCreateConnectionConnection$outboundSchema;
  /** @deprecated use `PublicCreateConnectionConnection$Outbound` instead. */
  export type Outbound = PublicCreateConnectionConnection$Outbound;
}

export function publicCreateConnectionConnectionToJSON(
  publicCreateConnectionConnection: PublicCreateConnectionConnection,
): string {
  return JSON.stringify(
    PublicCreateConnectionConnection$outboundSchema.parse(
      publicCreateConnectionConnection,
    ),
  );
}

export function publicCreateConnectionConnectionFromJSON(
  jsonString: string,
): SafeParseResult<PublicCreateConnectionConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PublicCreateConnectionConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PublicCreateConnectionConnection' from JSON`,
  );
}

/** @internal */
export const PublicCreateConnection$inboundSchema: z.ZodType<
  PublicCreateConnection,
  z.ZodTypeDef,
  unknown
> = z.object({
  partition_strategy: MediaModeParam$inboundSchema,
  partition: z.nullable(z.string()).optional(),
  page_limit: z.nullable(z.number().int()).optional(),
  config: z.nullable(z.record(z.any())).optional(),
  metadata: z.record(
    z.union([z.string(), z.number().int(), z.boolean(), z.array(z.string())]),
  ).optional(),
  connection: z.union([
    PublicFreshdeskConnection$inboundSchema.and(
      z.object({ provider: z.literal("freshdesk") }).transform((v) => ({
        provider: v.provider,
      })),
    ),
    PublicBackblazeConnection$inboundSchema.and(
      z.object({ provider: z.literal("backblaze") }).transform((v) => ({
        provider: v.provider,
      })),
    ),
    PublicGCSConnection$inboundSchema.and(
      z.object({ provider: z.literal("gcs") }).transform((v) => ({
        provider: v.provider,
      })),
    ),
    PublicIntercomConnection$inboundSchema.and(
      z.object({ provider: z.literal("intercom") }).transform((v) => ({
        provider: v.provider,
      })),
    ),
    PublicS3CompatibleConnection$inboundSchema.and(
      z.object({ provider: z.literal("s3") }).transform((v) => ({
        provider: v.provider,
      })),
    ),
    PublicZendeskConnection$inboundSchema.and(
      z.object({ provider: z.literal("zendesk") }).transform((v) => ({
        provider: v.provider,
      })),
    ),
  ]),
}).transform((v) => {
  return remap$(v, {
    "partition_strategy": "partitionStrategy",
    "page_limit": "pageLimit",
  });
});

/** @internal */
export type PublicCreateConnection$Outbound = {
  partition_strategy: MediaModeParam$Outbound;
  partition?: string | null | undefined;
  page_limit?: number | null | undefined;
  config?: { [k: string]: any } | null | undefined;
  metadata?:
    | { [k: string]: string | number | boolean | Array<string> }
    | undefined;
  connection:
    | (PublicFreshdeskConnection$Outbound & { provider: "freshdesk" })
    | (PublicBackblazeConnection$Outbound & { provider: "backblaze" })
    | (PublicGCSConnection$Outbound & { provider: "gcs" })
    | (PublicIntercomConnection$Outbound & { provider: "intercom" })
    | (PublicS3CompatibleConnection$Outbound & { provider: "s3" })
    | (PublicZendeskConnection$Outbound & { provider: "zendesk" });
};

/** @internal */
export const PublicCreateConnection$outboundSchema: z.ZodType<
  PublicCreateConnection$Outbound,
  z.ZodTypeDef,
  PublicCreateConnection
> = z.object({
  partitionStrategy: MediaModeParam$outboundSchema,
  partition: z.nullable(z.string()).optional(),
  pageLimit: z.nullable(z.number().int()).optional(),
  config: z.nullable(z.record(z.any())).optional(),
  metadata: z.record(
    z.union([z.string(), z.number().int(), z.boolean(), z.array(z.string())]),
  ).optional(),
  connection: z.union([
    PublicFreshdeskConnection$outboundSchema.and(
      z.object({ provider: z.literal("freshdesk") }).transform((v) => ({
        provider: v.provider,
      })),
    ),
    PublicBackblazeConnection$outboundSchema.and(
      z.object({ provider: z.literal("backblaze") }).transform((v) => ({
        provider: v.provider,
      })),
    ),
    PublicGCSConnection$outboundSchema.and(
      z.object({ provider: z.literal("gcs") }).transform((v) => ({
        provider: v.provider,
      })),
    ),
    PublicIntercomConnection$outboundSchema.and(
      z.object({ provider: z.literal("intercom") }).transform((v) => ({
        provider: v.provider,
      })),
    ),
    PublicS3CompatibleConnection$outboundSchema.and(
      z.object({ provider: z.literal("s3") }).transform((v) => ({
        provider: v.provider,
      })),
    ),
    PublicZendeskConnection$outboundSchema.and(
      z.object({ provider: z.literal("zendesk") }).transform((v) => ({
        provider: v.provider,
      })),
    ),
  ]),
}).transform((v) => {
  return remap$(v, {
    partitionStrategy: "partition_strategy",
    pageLimit: "page_limit",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublicCreateConnection$ {
  /** @deprecated use `PublicCreateConnection$inboundSchema` instead. */
  export const inboundSchema = PublicCreateConnection$inboundSchema;
  /** @deprecated use `PublicCreateConnection$outboundSchema` instead. */
  export const outboundSchema = PublicCreateConnection$outboundSchema;
  /** @deprecated use `PublicCreateConnection$Outbound` instead. */
  export type Outbound = PublicCreateConnection$Outbound;
}

export function publicCreateConnectionToJSON(
  publicCreateConnection: PublicCreateConnection,
): string {
  return JSON.stringify(
    PublicCreateConnection$outboundSchema.parse(publicCreateConnection),
  );
}

export function publicCreateConnectionFromJSON(
  jsonString: string,
): SafeParseResult<PublicCreateConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PublicCreateConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PublicCreateConnection' from JSON`,
  );
}
