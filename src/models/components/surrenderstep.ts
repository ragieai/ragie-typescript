/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Answer,
  Answer$inboundSchema,
  Answer$Outbound,
  Answer$outboundSchema,
} from "./answer.js";

export type SurrenderStep = {
  type?: "surrender" | undefined;
  think: string;
  currentQuestion: string;
  errored?: boolean | undefined;
  partialAnswer: Answer;
};

/** @internal */
export const SurrenderStep$inboundSchema: z.ZodType<
  SurrenderStep,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("surrender").default("surrender"),
  think: z.string(),
  current_question: z.string(),
  errored: z.boolean().default(false),
  partial_answer: Answer$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "current_question": "currentQuestion",
    "partial_answer": "partialAnswer",
  });
});

/** @internal */
export type SurrenderStep$Outbound = {
  type: "surrender";
  think: string;
  current_question: string;
  errored: boolean;
  partial_answer: Answer$Outbound;
};

/** @internal */
export const SurrenderStep$outboundSchema: z.ZodType<
  SurrenderStep$Outbound,
  z.ZodTypeDef,
  SurrenderStep
> = z.object({
  type: z.literal("surrender").default("surrender" as const),
  think: z.string(),
  currentQuestion: z.string(),
  errored: z.boolean().default(false),
  partialAnswer: Answer$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    currentQuestion: "current_question",
    partialAnswer: "partial_answer",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SurrenderStep$ {
  /** @deprecated use `SurrenderStep$inboundSchema` instead. */
  export const inboundSchema = SurrenderStep$inboundSchema;
  /** @deprecated use `SurrenderStep$outboundSchema` instead. */
  export const outboundSchema = SurrenderStep$outboundSchema;
  /** @deprecated use `SurrenderStep$Outbound` instead. */
  export type Outbound = SurrenderStep$Outbound;
}

export function surrenderStepToJSON(surrenderStep: SurrenderStep): string {
  return JSON.stringify(SurrenderStep$outboundSchema.parse(surrenderStep));
}

export function surrenderStepFromJSON(
  jsonString: string,
): SafeParseResult<SurrenderStep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SurrenderStep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SurrenderStep' from JSON`,
  );
}
