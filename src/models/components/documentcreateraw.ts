/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Metadata for the document. Keys must be strings. Values may be strings, numbers, booleans, or lists of strings. Numbers may be integers or floating point and will be converted to 64 bit floating point. 1000 total values are allowed. Each item in an array counts towards the total. The following keys are reserved for internal use: `document_id`, `document_type`, `document_source`, `document_name`, `document_uploaded_at`.
 */
export type DocumentCreateRawMetadata = {};

export type Two = {};

/**
 * Document data in a text or JSON format.
 */
export type Data = Two | string;

export type DocumentCreateRaw = {
    /**
     * Metadata for the document. Keys must be strings. Values may be strings, numbers, booleans, or lists of strings. Numbers may be integers or floating point and will be converted to 64 bit floating point. 1000 total values are allowed. Each item in an array counts towards the total. The following keys are reserved for internal use: `document_id`, `document_type`, `document_source`, `document_name`, `document_uploaded_at`.
     */
    metadata?: DocumentCreateRawMetadata | undefined;
    /**
     * Document data in a text or JSON format.
     */
    data: Two | string;
};

/** @internal */
export const DocumentCreateRawMetadata$inboundSchema: z.ZodType<
    DocumentCreateRawMetadata,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type DocumentCreateRawMetadata$Outbound = {};

/** @internal */
export const DocumentCreateRawMetadata$outboundSchema: z.ZodType<
    DocumentCreateRawMetadata$Outbound,
    z.ZodTypeDef,
    DocumentCreateRawMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateRawMetadata$ {
    /** @deprecated use `DocumentCreateRawMetadata$inboundSchema` instead. */
    export const inboundSchema = DocumentCreateRawMetadata$inboundSchema;
    /** @deprecated use `DocumentCreateRawMetadata$outboundSchema` instead. */
    export const outboundSchema = DocumentCreateRawMetadata$outboundSchema;
    /** @deprecated use `DocumentCreateRawMetadata$Outbound` instead. */
    export type Outbound = DocumentCreateRawMetadata$Outbound;
}

/** @internal */
export const Two$inboundSchema: z.ZodType<Two, z.ZodTypeDef, unknown> = z.object({});

/** @internal */
export type Two$Outbound = {};

/** @internal */
export const Two$outboundSchema: z.ZodType<Two$Outbound, z.ZodTypeDef, Two> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Two$ {
    /** @deprecated use `Two$inboundSchema` instead. */
    export const inboundSchema = Two$inboundSchema;
    /** @deprecated use `Two$outboundSchema` instead. */
    export const outboundSchema = Two$outboundSchema;
    /** @deprecated use `Two$Outbound` instead. */
    export type Outbound = Two$Outbound;
}

/** @internal */
export const Data$inboundSchema: z.ZodType<Data, z.ZodTypeDef, unknown> = z.union([
    z.lazy(() => Two$inboundSchema),
    z.string(),
]);

/** @internal */
export type Data$Outbound = Two$Outbound | string;

/** @internal */
export const Data$outboundSchema: z.ZodType<Data$Outbound, z.ZodTypeDef, Data> = z.union([
    z.lazy(() => Two$outboundSchema),
    z.string(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Data$ {
    /** @deprecated use `Data$inboundSchema` instead. */
    export const inboundSchema = Data$inboundSchema;
    /** @deprecated use `Data$outboundSchema` instead. */
    export const outboundSchema = Data$outboundSchema;
    /** @deprecated use `Data$Outbound` instead. */
    export type Outbound = Data$Outbound;
}

/** @internal */
export const DocumentCreateRaw$inboundSchema: z.ZodType<DocumentCreateRaw, z.ZodTypeDef, unknown> =
    z.object({
        metadata: z.lazy(() => DocumentCreateRawMetadata$inboundSchema).optional(),
        data: z.union([z.lazy(() => Two$inboundSchema), z.string()]),
    });

/** @internal */
export type DocumentCreateRaw$Outbound = {
    metadata?: DocumentCreateRawMetadata$Outbound | undefined;
    data: Two$Outbound | string;
};

/** @internal */
export const DocumentCreateRaw$outboundSchema: z.ZodType<
    DocumentCreateRaw$Outbound,
    z.ZodTypeDef,
    DocumentCreateRaw
> = z.object({
    metadata: z.lazy(() => DocumentCreateRawMetadata$outboundSchema).optional(),
    data: z.union([z.lazy(() => Two$outboundSchema), z.string()]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateRaw$ {
    /** @deprecated use `DocumentCreateRaw$inboundSchema` instead. */
    export const inboundSchema = DocumentCreateRaw$inboundSchema;
    /** @deprecated use `DocumentCreateRaw$outboundSchema` instead. */
    export const outboundSchema = DocumentCreateRaw$outboundSchema;
    /** @deprecated use `DocumentCreateRaw$Outbound` instead. */
    export type Outbound = DocumentCreateRaw$Outbound;
}
