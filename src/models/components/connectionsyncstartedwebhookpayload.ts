/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ConnectionSyncStartedWebhookPayload = {
  connectionId: string;
  syncId: string;
  partition: string;
  connectionMetadata: { [k: string]: any };
  createCount: number;
  updateContentCount: number;
  updateMetadataCount: number;
  deleteCount: number;
};

/** @internal */
export const ConnectionSyncStartedWebhookPayload$inboundSchema: z.ZodType<
  ConnectionSyncStartedWebhookPayload,
  z.ZodTypeDef,
  unknown
> = z.object({
  connection_id: z.string(),
  sync_id: z.string(),
  partition: z.string(),
  connection_metadata: z.record(z.any()),
  create_count: z.number().int(),
  update_content_count: z.number().int(),
  update_metadata_count: z.number().int(),
  delete_count: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "connection_id": "connectionId",
    "sync_id": "syncId",
    "connection_metadata": "connectionMetadata",
    "create_count": "createCount",
    "update_content_count": "updateContentCount",
    "update_metadata_count": "updateMetadataCount",
    "delete_count": "deleteCount",
  });
});

/** @internal */
export type ConnectionSyncStartedWebhookPayload$Outbound = {
  connection_id: string;
  sync_id: string;
  partition: string;
  connection_metadata: { [k: string]: any };
  create_count: number;
  update_content_count: number;
  update_metadata_count: number;
  delete_count: number;
};

/** @internal */
export const ConnectionSyncStartedWebhookPayload$outboundSchema: z.ZodType<
  ConnectionSyncStartedWebhookPayload$Outbound,
  z.ZodTypeDef,
  ConnectionSyncStartedWebhookPayload
> = z.object({
  connectionId: z.string(),
  syncId: z.string(),
  partition: z.string(),
  connectionMetadata: z.record(z.any()),
  createCount: z.number().int(),
  updateContentCount: z.number().int(),
  updateMetadataCount: z.number().int(),
  deleteCount: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    connectionId: "connection_id",
    syncId: "sync_id",
    connectionMetadata: "connection_metadata",
    createCount: "create_count",
    updateContentCount: "update_content_count",
    updateMetadataCount: "update_metadata_count",
    deleteCount: "delete_count",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConnectionSyncStartedWebhookPayload$ {
  /** @deprecated use `ConnectionSyncStartedWebhookPayload$inboundSchema` instead. */
  export const inboundSchema =
    ConnectionSyncStartedWebhookPayload$inboundSchema;
  /** @deprecated use `ConnectionSyncStartedWebhookPayload$outboundSchema` instead. */
  export const outboundSchema =
    ConnectionSyncStartedWebhookPayload$outboundSchema;
  /** @deprecated use `ConnectionSyncStartedWebhookPayload$Outbound` instead. */
  export type Outbound = ConnectionSyncStartedWebhookPayload$Outbound;
}

export function connectionSyncStartedWebhookPayloadToJSON(
  connectionSyncStartedWebhookPayload: ConnectionSyncStartedWebhookPayload,
): string {
  return JSON.stringify(
    ConnectionSyncStartedWebhookPayload$outboundSchema.parse(
      connectionSyncStartedWebhookPayload,
    ),
  );
}

export function connectionSyncStartedWebhookPayloadFromJSON(
  jsonString: string,
): SafeParseResult<ConnectionSyncStartedWebhookPayload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ConnectionSyncStartedWebhookPayload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConnectionSyncStartedWebhookPayload' from JSON`,
  );
}
