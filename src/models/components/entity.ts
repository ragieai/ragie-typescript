/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

/**
 * The entity data generated by the instruction.
 */
export type EntityData = {};

export type Entity = {
    id: string;
    createdAt: Date;
    updatedAt: Date;
    /**
     * The ID of the instruction which generated the entity.
     */
    instructionId: string;
    /**
     * The ID of the document which the entity was produced from.
     */
    documentId: string;
    /**
     * The entity data generated by the instruction.
     */
    data: EntityData;
};

/** @internal */
export const EntityData$inboundSchema: z.ZodType<EntityData, z.ZodTypeDef, unknown> = z.object({});

/** @internal */
export type EntityData$Outbound = {};

/** @internal */
export const EntityData$outboundSchema: z.ZodType<EntityData$Outbound, z.ZodTypeDef, EntityData> =
    z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityData$ {
    /** @deprecated use `EntityData$inboundSchema` instead. */
    export const inboundSchema = EntityData$inboundSchema;
    /** @deprecated use `EntityData$outboundSchema` instead. */
    export const outboundSchema = EntityData$outboundSchema;
    /** @deprecated use `EntityData$Outbound` instead. */
    export type Outbound = EntityData$Outbound;
}

/** @internal */
export const Entity$inboundSchema: z.ZodType<Entity, z.ZodTypeDef, unknown> = z
    .object({
        id: z.string(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        updated_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        instruction_id: z.string(),
        document_id: z.string(),
        data: z.lazy(() => EntityData$inboundSchema),
    })
    .transform((v) => {
        return remap$(v, {
            created_at: "createdAt",
            updated_at: "updatedAt",
            instruction_id: "instructionId",
            document_id: "documentId",
        });
    });

/** @internal */
export type Entity$Outbound = {
    id: string;
    created_at: string;
    updated_at: string;
    instruction_id: string;
    document_id: string;
    data: EntityData$Outbound;
};

/** @internal */
export const Entity$outboundSchema: z.ZodType<Entity$Outbound, z.ZodTypeDef, Entity> = z
    .object({
        id: z.string(),
        createdAt: z.date().transform((v) => v.toISOString()),
        updatedAt: z.date().transform((v) => v.toISOString()),
        instructionId: z.string(),
        documentId: z.string(),
        data: z.lazy(() => EntityData$outboundSchema),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created_at",
            updatedAt: "updated_at",
            instructionId: "instruction_id",
            documentId: "document_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Entity$ {
    /** @deprecated use `Entity$inboundSchema` instead. */
    export const inboundSchema = Entity$inboundSchema;
    /** @deprecated use `Entity$outboundSchema` instead. */
    export const outboundSchema = Entity$outboundSchema;
    /** @deprecated use `Entity$Outbound` instead. */
    export type Outbound = Entity$Outbound;
}
