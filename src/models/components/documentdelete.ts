/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DocumentDelete = {
  status: string;
};

/** @internal */
export const DocumentDelete$inboundSchema: z.ZodType<
  DocumentDelete,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: z.string(),
});

/** @internal */
export type DocumentDelete$Outbound = {
  status: string;
};

/** @internal */
export const DocumentDelete$outboundSchema: z.ZodType<
  DocumentDelete$Outbound,
  z.ZodTypeDef,
  DocumentDelete
> = z.object({
  status: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDelete$ {
  /** @deprecated use `DocumentDelete$inboundSchema` instead. */
  export const inboundSchema = DocumentDelete$inboundSchema;
  /** @deprecated use `DocumentDelete$outboundSchema` instead. */
  export const outboundSchema = DocumentDelete$outboundSchema;
  /** @deprecated use `DocumentDelete$Outbound` instead. */
  export type Outbound = DocumentDelete$Outbound;
}

export function documentDeleteToJSON(documentDelete: DocumentDelete): string {
  return JSON.stringify(DocumentDelete$outboundSchema.parse(documentDelete));
}

export function documentDeleteFromJSON(
  jsonString: string,
): SafeParseResult<DocumentDelete, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentDelete$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentDelete' from JSON`,
  );
}
