/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ZendeskCredentials,
  ZendeskCredentials$inboundSchema,
  ZendeskCredentials$Outbound,
  ZendeskCredentials$outboundSchema,
} from "./zendeskcredentials.js";
import {
  ZendeskData,
  ZendeskData$inboundSchema,
  ZendeskData$Outbound,
  ZendeskData$outboundSchema,
} from "./zendeskdata.js";

export type PublicZendeskConnection = {
  provider?: "zendesk" | undefined;
  data: ZendeskData;
  credentials: ZendeskCredentials;
};

/** @internal */
export const PublicZendeskConnection$inboundSchema: z.ZodType<
  PublicZendeskConnection,
  z.ZodTypeDef,
  unknown
> = z.object({
  provider: z.literal("zendesk").default("zendesk").optional(),
  data: ZendeskData$inboundSchema,
  credentials: ZendeskCredentials$inboundSchema,
});

/** @internal */
export type PublicZendeskConnection$Outbound = {
  provider: "zendesk";
  data: ZendeskData$Outbound;
  credentials: ZendeskCredentials$Outbound;
};

/** @internal */
export const PublicZendeskConnection$outboundSchema: z.ZodType<
  PublicZendeskConnection$Outbound,
  z.ZodTypeDef,
  PublicZendeskConnection
> = z.object({
  provider: z.literal("zendesk").default("zendesk" as const),
  data: ZendeskData$outboundSchema,
  credentials: ZendeskCredentials$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublicZendeskConnection$ {
  /** @deprecated use `PublicZendeskConnection$inboundSchema` instead. */
  export const inboundSchema = PublicZendeskConnection$inboundSchema;
  /** @deprecated use `PublicZendeskConnection$outboundSchema` instead. */
  export const outboundSchema = PublicZendeskConnection$outboundSchema;
  /** @deprecated use `PublicZendeskConnection$Outbound` instead. */
  export type Outbound = PublicZendeskConnection$Outbound;
}

export function publicZendeskConnectionToJSON(
  publicZendeskConnection: PublicZendeskConnection,
): string {
  return JSON.stringify(
    PublicZendeskConnection$outboundSchema.parse(publicZendeskConnection),
  );
}

export function publicZendeskConnectionFromJSON(
  jsonString: string,
): SafeParseResult<PublicZendeskConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PublicZendeskConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PublicZendeskConnection' from JSON`,
  );
}
