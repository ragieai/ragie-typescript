/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RetrieveParams = {
  /**
   * The query to search with when retrieving document chunks.
   */
  query: string;
  /**
   * The maximum number of chunks to return. Defaults to 8.
   */
  topK?: number | undefined;
  filter?: { [k: string]: any } | undefined;
  /**
   * Reranks the chunks for semantic relevancy post cosine similarity. Will be slower but returns a subset of highly relevant chunks. Best for reducing hallucinations and improving accuracy for LLM generation.
   */
  rerank?: boolean | undefined;
  /**
   * Maximum number of chunks to retrieve per document. Use this to increase the number of documents the final chunks are retrieved from. This feature is in beta and may change in the future.
   */
  maxChunksPerDocument?: number | undefined;
  /**
   * The partition to scope a retrieval to. If omitted, the retrieval will be scoped to the default partition, which includes any documents that have not been created in a partition.
   */
  partition?: string | undefined;
  /**
   * Enables recency bias which will favor more recent documents vs older documents. https://docs.ragie.ai/docs/retrievals-recency-bias
   */
  recencyBias?: boolean | undefined;
};

/** @internal */
export const RetrieveParams$inboundSchema: z.ZodType<
  RetrieveParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  query: z.string(),
  top_k: z.number().int().default(8),
  filter: z.record(z.any()).optional(),
  rerank: z.boolean().default(false),
  max_chunks_per_document: z.number().int().optional(),
  partition: z.string().optional(),
  recency_bias: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "top_k": "topK",
    "max_chunks_per_document": "maxChunksPerDocument",
    "recency_bias": "recencyBias",
  });
});

/** @internal */
export type RetrieveParams$Outbound = {
  query: string;
  top_k: number;
  filter?: { [k: string]: any } | undefined;
  rerank: boolean;
  max_chunks_per_document?: number | undefined;
  partition?: string | undefined;
  recency_bias: boolean;
};

/** @internal */
export const RetrieveParams$outboundSchema: z.ZodType<
  RetrieveParams$Outbound,
  z.ZodTypeDef,
  RetrieveParams
> = z.object({
  query: z.string(),
  topK: z.number().int().default(8),
  filter: z.record(z.any()).optional(),
  rerank: z.boolean().default(false),
  maxChunksPerDocument: z.number().int().optional(),
  partition: z.string().optional(),
  recencyBias: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    topK: "top_k",
    maxChunksPerDocument: "max_chunks_per_document",
    recencyBias: "recency_bias",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveParams$ {
  /** @deprecated use `RetrieveParams$inboundSchema` instead. */
  export const inboundSchema = RetrieveParams$inboundSchema;
  /** @deprecated use `RetrieveParams$outboundSchema` instead. */
  export const outboundSchema = RetrieveParams$outboundSchema;
  /** @deprecated use `RetrieveParams$Outbound` instead. */
  export type Outbound = RetrieveParams$Outbound;
}

export function retrieveParamsToJSON(retrieveParams: RetrieveParams): string {
  return JSON.stringify(RetrieveParams$outboundSchema.parse(retrieveParams));
}

export function retrieveParamsFromJSON(
  jsonString: string,
): SafeParseResult<RetrieveParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrieveParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrieveParams' from JSON`,
  );
}
