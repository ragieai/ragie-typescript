/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ConnectorSourceTypeInfo,
  ConnectorSourceTypeInfo$inboundSchema,
  ConnectorSourceTypeInfo$Outbound,
  ConnectorSourceTypeInfo$outboundSchema,
} from "./connectorsourcetypeinfo.js";

export type ListConnectorSourceTypeInfo = {
  connectors: Array<ConnectorSourceTypeInfo>;
};

/** @internal */
export const ListConnectorSourceTypeInfo$inboundSchema: z.ZodType<
  ListConnectorSourceTypeInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  connectors: z.array(ConnectorSourceTypeInfo$inboundSchema),
});

/** @internal */
export type ListConnectorSourceTypeInfo$Outbound = {
  connectors: Array<ConnectorSourceTypeInfo$Outbound>;
};

/** @internal */
export const ListConnectorSourceTypeInfo$outboundSchema: z.ZodType<
  ListConnectorSourceTypeInfo$Outbound,
  z.ZodTypeDef,
  ListConnectorSourceTypeInfo
> = z.object({
  connectors: z.array(ConnectorSourceTypeInfo$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListConnectorSourceTypeInfo$ {
  /** @deprecated use `ListConnectorSourceTypeInfo$inboundSchema` instead. */
  export const inboundSchema = ListConnectorSourceTypeInfo$inboundSchema;
  /** @deprecated use `ListConnectorSourceTypeInfo$outboundSchema` instead. */
  export const outboundSchema = ListConnectorSourceTypeInfo$outboundSchema;
  /** @deprecated use `ListConnectorSourceTypeInfo$Outbound` instead. */
  export type Outbound = ListConnectorSourceTypeInfo$Outbound;
}

export function listConnectorSourceTypeInfoToJSON(
  listConnectorSourceTypeInfo: ListConnectorSourceTypeInfo,
): string {
  return JSON.stringify(
    ListConnectorSourceTypeInfo$outboundSchema.parse(
      listConnectorSourceTypeInfo,
    ),
  );
}

export function listConnectorSourceTypeInfoFromJSON(
  jsonString: string,
): SafeParseResult<ListConnectorSourceTypeInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListConnectorSourceTypeInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListConnectorSourceTypeInfo' from JSON`,
  );
}
