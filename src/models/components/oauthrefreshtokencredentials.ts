/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type OAuthRefreshTokenCredentials = {
  refreshToken: string;
};

/** @internal */
export const OAuthRefreshTokenCredentials$inboundSchema: z.ZodType<
  OAuthRefreshTokenCredentials,
  z.ZodTypeDef,
  unknown
> = z.object({
  refresh_token: z.string(),
}).transform((v) => {
  return remap$(v, {
    "refresh_token": "refreshToken",
  });
});

/** @internal */
export type OAuthRefreshTokenCredentials$Outbound = {
  refresh_token: string;
};

/** @internal */
export const OAuthRefreshTokenCredentials$outboundSchema: z.ZodType<
  OAuthRefreshTokenCredentials$Outbound,
  z.ZodTypeDef,
  OAuthRefreshTokenCredentials
> = z.object({
  refreshToken: z.string(),
}).transform((v) => {
  return remap$(v, {
    refreshToken: "refresh_token",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OAuthRefreshTokenCredentials$ {
  /** @deprecated use `OAuthRefreshTokenCredentials$inboundSchema` instead. */
  export const inboundSchema = OAuthRefreshTokenCredentials$inboundSchema;
  /** @deprecated use `OAuthRefreshTokenCredentials$outboundSchema` instead. */
  export const outboundSchema = OAuthRefreshTokenCredentials$outboundSchema;
  /** @deprecated use `OAuthRefreshTokenCredentials$Outbound` instead. */
  export type Outbound = OAuthRefreshTokenCredentials$Outbound;
}

export function oAuthRefreshTokenCredentialsToJSON(
  oAuthRefreshTokenCredentials: OAuthRefreshTokenCredentials,
): string {
  return JSON.stringify(
    OAuthRefreshTokenCredentials$outboundSchema.parse(
      oAuthRefreshTokenCredentials,
    ),
  );
}

export function oAuthRefreshTokenCredentialsFromJSON(
  jsonString: string,
): SafeParseResult<OAuthRefreshTokenCredentials, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OAuthRefreshTokenCredentials$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OAuthRefreshTokenCredentials' from JSON`,
  );
}
