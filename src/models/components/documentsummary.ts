/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type DocumentSummary = {
    documentId: string;
    summary: string;
};

/** @internal */
export const DocumentSummary$inboundSchema: z.ZodType<DocumentSummary, z.ZodTypeDef, unknown> = z
    .object({
        document_id: z.string(),
        summary: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            document_id: "documentId",
        });
    });

/** @internal */
export type DocumentSummary$Outbound = {
    document_id: string;
    summary: string;
};

/** @internal */
export const DocumentSummary$outboundSchema: z.ZodType<
    DocumentSummary$Outbound,
    z.ZodTypeDef,
    DocumentSummary
> = z
    .object({
        documentId: z.string(),
        summary: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            documentId: "document_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentSummary$ {
    /** @deprecated use `DocumentSummary$inboundSchema` instead. */
    export const inboundSchema = DocumentSummary$inboundSchema;
    /** @deprecated use `DocumentSummary$outboundSchema` instead. */
    export const outboundSchema = DocumentSummary$outboundSchema;
    /** @deprecated use `DocumentSummary$Outbound` instead. */
    export type Outbound = DocumentSummary$Outbound;
}
