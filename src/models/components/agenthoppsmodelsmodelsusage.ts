/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ModelUsage,
  ModelUsage$inboundSchema,
  ModelUsage$Outbound,
  ModelUsage$outboundSchema,
} from "./modelusage.js";

export type AgentHoppsModelsModelsUsage = {
  models?: Array<ModelUsage> | undefined;
};

/** @internal */
export const AgentHoppsModelsModelsUsage$inboundSchema: z.ZodType<
  AgentHoppsModelsModelsUsage,
  z.ZodTypeDef,
  unknown
> = z.object({
  models: z.array(ModelUsage$inboundSchema).optional(),
});

/** @internal */
export type AgentHoppsModelsModelsUsage$Outbound = {
  models?: Array<ModelUsage$Outbound> | undefined;
};

/** @internal */
export const AgentHoppsModelsModelsUsage$outboundSchema: z.ZodType<
  AgentHoppsModelsModelsUsage$Outbound,
  z.ZodTypeDef,
  AgentHoppsModelsModelsUsage
> = z.object({
  models: z.array(ModelUsage$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentHoppsModelsModelsUsage$ {
  /** @deprecated use `AgentHoppsModelsModelsUsage$inboundSchema` instead. */
  export const inboundSchema = AgentHoppsModelsModelsUsage$inboundSchema;
  /** @deprecated use `AgentHoppsModelsModelsUsage$outboundSchema` instead. */
  export const outboundSchema = AgentHoppsModelsModelsUsage$outboundSchema;
  /** @deprecated use `AgentHoppsModelsModelsUsage$Outbound` instead. */
  export type Outbound = AgentHoppsModelsModelsUsage$Outbound;
}

export function agentHoppsModelsModelsUsageToJSON(
  agentHoppsModelsModelsUsage: AgentHoppsModelsModelsUsage,
): string {
  return JSON.stringify(
    AgentHoppsModelsModelsUsage$outboundSchema.parse(
      agentHoppsModelsModelsUsage,
    ),
  );
}

export function agentHoppsModelsModelsUsageFromJSON(
  jsonString: string,
): SafeParseResult<AgentHoppsModelsModelsUsage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AgentHoppsModelsModelsUsage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentHoppsModelsModelsUsage' from JSON`,
  );
}
