/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ConnectionLimitParams = {
  /**
   * The maximum number of pages a connection will sync. The connection will be disabled after this limit is reached. Some in process documents may continue processing. Remove the limit by setting to `null`.
   */
  pageLimit?: number | null | undefined;
};

/** @internal */
export const ConnectionLimitParams$inboundSchema: z.ZodType<
  ConnectionLimitParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  page_limit: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    "page_limit": "pageLimit",
  });
});

/** @internal */
export type ConnectionLimitParams$Outbound = {
  page_limit?: number | null | undefined;
};

/** @internal */
export const ConnectionLimitParams$outboundSchema: z.ZodType<
  ConnectionLimitParams$Outbound,
  z.ZodTypeDef,
  ConnectionLimitParams
> = z.object({
  pageLimit: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    pageLimit: "page_limit",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConnectionLimitParams$ {
  /** @deprecated use `ConnectionLimitParams$inboundSchema` instead. */
  export const inboundSchema = ConnectionLimitParams$inboundSchema;
  /** @deprecated use `ConnectionLimitParams$outboundSchema` instead. */
  export const outboundSchema = ConnectionLimitParams$outboundSchema;
  /** @deprecated use `ConnectionLimitParams$Outbound` instead. */
  export type Outbound = ConnectionLimitParams$Outbound;
}

export function connectionLimitParamsToJSON(
  connectionLimitParams: ConnectionLimitParams,
): string {
  return JSON.stringify(
    ConnectionLimitParams$outboundSchema.parse(connectionLimitParams),
  );
}

export function connectionLimitParamsFromJSON(
  jsonString: string,
): SafeParseResult<ConnectionLimitParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConnectionLimitParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConnectionLimitParams' from JSON`,
  );
}
