/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type HubspotData = {
  companies: boolean;
  contacts: boolean;
  contactNotes: boolean;
  deals: boolean;
  dealNotes: boolean;
  emails: boolean;
  tasks: boolean;
};

/** @internal */
export const HubspotData$inboundSchema: z.ZodType<
  HubspotData,
  z.ZodTypeDef,
  unknown
> = z.object({
  companies: z.boolean(),
  contacts: z.boolean(),
  contact_notes: z.boolean(),
  deals: z.boolean(),
  deal_notes: z.boolean(),
  emails: z.boolean(),
  tasks: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "contact_notes": "contactNotes",
    "deal_notes": "dealNotes",
  });
});

/** @internal */
export type HubspotData$Outbound = {
  companies: boolean;
  contacts: boolean;
  contact_notes: boolean;
  deals: boolean;
  deal_notes: boolean;
  emails: boolean;
  tasks: boolean;
};

/** @internal */
export const HubspotData$outboundSchema: z.ZodType<
  HubspotData$Outbound,
  z.ZodTypeDef,
  HubspotData
> = z.object({
  companies: z.boolean(),
  contacts: z.boolean(),
  contactNotes: z.boolean(),
  deals: z.boolean(),
  dealNotes: z.boolean(),
  emails: z.boolean(),
  tasks: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    contactNotes: "contact_notes",
    dealNotes: "deal_notes",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HubspotData$ {
  /** @deprecated use `HubspotData$inboundSchema` instead. */
  export const inboundSchema = HubspotData$inboundSchema;
  /** @deprecated use `HubspotData$outboundSchema` instead. */
  export const outboundSchema = HubspotData$outboundSchema;
  /** @deprecated use `HubspotData$Outbound` instead. */
  export type Outbound = HubspotData$Outbound;
}

export function hubspotDataToJSON(hubspotData: HubspotData): string {
  return JSON.stringify(HubspotData$outboundSchema.parse(hubspotData));
}

export function hubspotDataFromJSON(
  jsonString: string,
): SafeParseResult<HubspotData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HubspotData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HubspotData' from JSON`,
  );
}
