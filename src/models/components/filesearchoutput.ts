/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FileSearchResult,
  FileSearchResult$inboundSchema,
  FileSearchResult$Outbound,
  FileSearchResult$outboundSchema,
} from "./filesearchresult.js";

export const FileSearchOutputStatus = {
  InProgress: "in_progress",
  Searching: "searching",
  Incomplete: "incomplete",
  Completed: "completed",
  Failed: "failed",
} as const;
export type FileSearchOutputStatus = ClosedEnum<typeof FileSearchOutputStatus>;

export type FileSearchOutput = {
  id: string;
  /**
   * The queries used to search for files.
   */
  queries: Array<string>;
  status?: FileSearchOutputStatus | undefined;
  type?: "file_search_call" | undefined;
  /**
   * The results of the file search tool call.
   */
  results: Array<FileSearchResult>;
};

/** @internal */
export const FileSearchOutputStatus$inboundSchema: z.ZodNativeEnum<
  typeof FileSearchOutputStatus
> = z.nativeEnum(FileSearchOutputStatus);

/** @internal */
export const FileSearchOutputStatus$outboundSchema: z.ZodNativeEnum<
  typeof FileSearchOutputStatus
> = FileSearchOutputStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileSearchOutputStatus$ {
  /** @deprecated use `FileSearchOutputStatus$inboundSchema` instead. */
  export const inboundSchema = FileSearchOutputStatus$inboundSchema;
  /** @deprecated use `FileSearchOutputStatus$outboundSchema` instead. */
  export const outboundSchema = FileSearchOutputStatus$outboundSchema;
}

/** @internal */
export const FileSearchOutput$inboundSchema: z.ZodType<
  FileSearchOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  queries: z.array(z.string()),
  status: FileSearchOutputStatus$inboundSchema.default("searching"),
  type: z.literal("file_search_call").default("file_search_call").optional(),
  results: z.array(FileSearchResult$inboundSchema),
});

/** @internal */
export type FileSearchOutput$Outbound = {
  id: string;
  queries: Array<string>;
  status: string;
  type: "file_search_call";
  results: Array<FileSearchResult$Outbound>;
};

/** @internal */
export const FileSearchOutput$outboundSchema: z.ZodType<
  FileSearchOutput$Outbound,
  z.ZodTypeDef,
  FileSearchOutput
> = z.object({
  id: z.string(),
  queries: z.array(z.string()),
  status: FileSearchOutputStatus$outboundSchema.default("searching"),
  type: z.literal("file_search_call").default("file_search_call" as const),
  results: z.array(FileSearchResult$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileSearchOutput$ {
  /** @deprecated use `FileSearchOutput$inboundSchema` instead. */
  export const inboundSchema = FileSearchOutput$inboundSchema;
  /** @deprecated use `FileSearchOutput$outboundSchema` instead. */
  export const outboundSchema = FileSearchOutput$outboundSchema;
  /** @deprecated use `FileSearchOutput$Outbound` instead. */
  export type Outbound = FileSearchOutput$Outbound;
}

export function fileSearchOutputToJSON(
  fileSearchOutput: FileSearchOutput,
): string {
  return JSON.stringify(
    FileSearchOutput$outboundSchema.parse(fileSearchOutput),
  );
}

export function fileSearchOutputFromJSON(
  jsonString: string,
): SafeParseResult<FileSearchOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FileSearchOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FileSearchOutput' from JSON`,
  );
}
