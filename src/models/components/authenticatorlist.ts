/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  BaseGetAuthenticator,
  BaseGetAuthenticator$inboundSchema,
  BaseGetAuthenticator$Outbound,
  BaseGetAuthenticator$outboundSchema,
} from "./basegetauthenticator.js";
import {
  Pagination,
  Pagination$inboundSchema,
  Pagination$Outbound,
  Pagination$outboundSchema,
} from "./pagination.js";

export type AuthenticatorList = {
  pagination: Pagination;
  authenticators: Array<BaseGetAuthenticator>;
};

/** @internal */
export const AuthenticatorList$inboundSchema: z.ZodType<
  AuthenticatorList,
  z.ZodTypeDef,
  unknown
> = z.object({
  pagination: Pagination$inboundSchema,
  authenticators: z.array(BaseGetAuthenticator$inboundSchema),
});

/** @internal */
export type AuthenticatorList$Outbound = {
  pagination: Pagination$Outbound;
  authenticators: Array<BaseGetAuthenticator$Outbound>;
};

/** @internal */
export const AuthenticatorList$outboundSchema: z.ZodType<
  AuthenticatorList$Outbound,
  z.ZodTypeDef,
  AuthenticatorList
> = z.object({
  pagination: Pagination$outboundSchema,
  authenticators: z.array(BaseGetAuthenticator$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthenticatorList$ {
  /** @deprecated use `AuthenticatorList$inboundSchema` instead. */
  export const inboundSchema = AuthenticatorList$inboundSchema;
  /** @deprecated use `AuthenticatorList$outboundSchema` instead. */
  export const outboundSchema = AuthenticatorList$outboundSchema;
  /** @deprecated use `AuthenticatorList$Outbound` instead. */
  export type Outbound = AuthenticatorList$Outbound;
}

export function authenticatorListToJSON(
  authenticatorList: AuthenticatorList,
): string {
  return JSON.stringify(
    AuthenticatorList$outboundSchema.parse(authenticatorList),
  );
}

export function authenticatorListFromJSON(
  jsonString: string,
): SafeParseResult<AuthenticatorList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthenticatorList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthenticatorList' from JSON`,
  );
}
