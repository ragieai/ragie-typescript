/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Pagination,
  Pagination$inboundSchema,
  Pagination$Outbound,
  Pagination$outboundSchema,
} from "./pagination.js";
import {
  Partition,
  Partition$inboundSchema,
  Partition$Outbound,
  Partition$outboundSchema,
} from "./partition.js";

export type PartitionList = {
  pagination: Pagination;
  partitions: Array<Partition>;
};

/** @internal */
export const PartitionList$inboundSchema: z.ZodType<
  PartitionList,
  z.ZodTypeDef,
  unknown
> = z.object({
  pagination: Pagination$inboundSchema,
  partitions: z.array(Partition$inboundSchema),
});

/** @internal */
export type PartitionList$Outbound = {
  pagination: Pagination$Outbound;
  partitions: Array<Partition$Outbound>;
};

/** @internal */
export const PartitionList$outboundSchema: z.ZodType<
  PartitionList$Outbound,
  z.ZodTypeDef,
  PartitionList
> = z.object({
  pagination: Pagination$outboundSchema,
  partitions: z.array(Partition$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PartitionList$ {
  /** @deprecated use `PartitionList$inboundSchema` instead. */
  export const inboundSchema = PartitionList$inboundSchema;
  /** @deprecated use `PartitionList$outboundSchema` instead. */
  export const outboundSchema = PartitionList$outboundSchema;
  /** @deprecated use `PartitionList$Outbound` instead. */
  export type Outbound = PartitionList$Outbound;
}

export function partitionListToJSON(partitionList: PartitionList): string {
  return JSON.stringify(PartitionList$outboundSchema.parse(partitionList));
}

export function partitionListFromJSON(
  jsonString: string,
): SafeParseResult<PartitionList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PartitionList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PartitionList' from JSON`,
  );
}
