/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type DocumentGetMetadata = string | number | boolean | Array<string>;

export type DocumentGet = {
  id: string;
  createdAt: Date;
  updatedAt: Date;
  status: string;
  name: string;
  metadata: { [k: string]: string | number | boolean | Array<string> };
  partition: string;
  chunkCount?: number | null | undefined;
  externalId?: string | null | undefined;
  errors: Array<string>;
};

/** @internal */
export const DocumentGetMetadata$inboundSchema: z.ZodType<
  DocumentGetMetadata,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number().int(), z.boolean(), z.array(z.string())]);

/** @internal */
export type DocumentGetMetadata$Outbound =
  | string
  | number
  | boolean
  | Array<string>;

/** @internal */
export const DocumentGetMetadata$outboundSchema: z.ZodType<
  DocumentGetMetadata$Outbound,
  z.ZodTypeDef,
  DocumentGetMetadata
> = z.union([z.string(), z.number().int(), z.boolean(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetMetadata$ {
  /** @deprecated use `DocumentGetMetadata$inboundSchema` instead. */
  export const inboundSchema = DocumentGetMetadata$inboundSchema;
  /** @deprecated use `DocumentGetMetadata$outboundSchema` instead. */
  export const outboundSchema = DocumentGetMetadata$outboundSchema;
  /** @deprecated use `DocumentGetMetadata$Outbound` instead. */
  export type Outbound = DocumentGetMetadata$Outbound;
}

/** @internal */
export const DocumentGet$inboundSchema: z.ZodType<
  DocumentGet,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  status: z.string(),
  name: z.string(),
  metadata: z.record(
    z.union([z.string(), z.number().int(), z.boolean(), z.array(z.string())]),
  ),
  partition: z.string(),
  chunk_count: z.nullable(z.number().int()).optional(),
  external_id: z.nullable(z.string()).optional(),
  errors: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "chunk_count": "chunkCount",
    "external_id": "externalId",
  });
});

/** @internal */
export type DocumentGet$Outbound = {
  id: string;
  created_at: string;
  updated_at: string;
  status: string;
  name: string;
  metadata: { [k: string]: string | number | boolean | Array<string> };
  partition: string;
  chunk_count?: number | null | undefined;
  external_id?: string | null | undefined;
  errors: Array<string>;
};

/** @internal */
export const DocumentGet$outboundSchema: z.ZodType<
  DocumentGet$Outbound,
  z.ZodTypeDef,
  DocumentGet
> = z.object({
  id: z.string(),
  createdAt: z.date().transform(v => v.toISOString()),
  updatedAt: z.date().transform(v => v.toISOString()),
  status: z.string(),
  name: z.string(),
  metadata: z.record(
    z.union([z.string(), z.number().int(), z.boolean(), z.array(z.string())]),
  ),
  partition: z.string(),
  chunkCount: z.nullable(z.number().int()).optional(),
  externalId: z.nullable(z.string()).optional(),
  errors: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    updatedAt: "updated_at",
    chunkCount: "chunk_count",
    externalId: "external_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGet$ {
  /** @deprecated use `DocumentGet$inboundSchema` instead. */
  export const inboundSchema = DocumentGet$inboundSchema;
  /** @deprecated use `DocumentGet$outboundSchema` instead. */
  export const outboundSchema = DocumentGet$outboundSchema;
  /** @deprecated use `DocumentGet$Outbound` instead. */
  export type Outbound = DocumentGet$Outbound;
}
