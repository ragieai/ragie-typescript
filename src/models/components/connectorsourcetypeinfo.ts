/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ConnectorSource,
  ConnectorSource$inboundSchema,
  ConnectorSource$outboundSchema,
} from "./connectorsource.js";

export type ConnectorSourceTypeInfo = {
  sourceType: ConnectorSource;
  displayName: string;
  iconUrl: string;
  docsUrl: string;
};

/** @internal */
export const ConnectorSourceTypeInfo$inboundSchema: z.ZodType<
  ConnectorSourceTypeInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_type: ConnectorSource$inboundSchema,
  display_name: z.string(),
  icon_url: z.string(),
  docs_url: z.string(),
}).transform((v) => {
  return remap$(v, {
    "source_type": "sourceType",
    "display_name": "displayName",
    "icon_url": "iconUrl",
    "docs_url": "docsUrl",
  });
});

/** @internal */
export type ConnectorSourceTypeInfo$Outbound = {
  source_type: string;
  display_name: string;
  icon_url: string;
  docs_url: string;
};

/** @internal */
export const ConnectorSourceTypeInfo$outboundSchema: z.ZodType<
  ConnectorSourceTypeInfo$Outbound,
  z.ZodTypeDef,
  ConnectorSourceTypeInfo
> = z.object({
  sourceType: ConnectorSource$outboundSchema,
  displayName: z.string(),
  iconUrl: z.string(),
  docsUrl: z.string(),
}).transform((v) => {
  return remap$(v, {
    sourceType: "source_type",
    displayName: "display_name",
    iconUrl: "icon_url",
    docsUrl: "docs_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConnectorSourceTypeInfo$ {
  /** @deprecated use `ConnectorSourceTypeInfo$inboundSchema` instead. */
  export const inboundSchema = ConnectorSourceTypeInfo$inboundSchema;
  /** @deprecated use `ConnectorSourceTypeInfo$outboundSchema` instead. */
  export const outboundSchema = ConnectorSourceTypeInfo$outboundSchema;
  /** @deprecated use `ConnectorSourceTypeInfo$Outbound` instead. */
  export type Outbound = ConnectorSourceTypeInfo$Outbound;
}

export function connectorSourceTypeInfoToJSON(
  connectorSourceTypeInfo: ConnectorSourceTypeInfo,
): string {
  return JSON.stringify(
    ConnectorSourceTypeInfo$outboundSchema.parse(connectorSourceTypeInfo),
  );
}

export function connectorSourceTypeInfoFromJSON(
  jsonString: string,
): SafeParseResult<ConnectorSourceTypeInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConnectorSourceTypeInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConnectorSourceTypeInfo' from JSON`,
  );
}
