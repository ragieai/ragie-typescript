/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type DocumentMetadata = {};

export type ScoredChunkResponse = {
    text: string;
    score: number;
    documentId: string;
    documentMetadata: DocumentMetadata;
};

/** @internal */
export const DocumentMetadata$inboundSchema: z.ZodType<DocumentMetadata, z.ZodTypeDef, unknown> =
    z.object({});

/** @internal */
export type DocumentMetadata$Outbound = {};

/** @internal */
export const DocumentMetadata$outboundSchema: z.ZodType<
    DocumentMetadata$Outbound,
    z.ZodTypeDef,
    DocumentMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentMetadata$ {
    /** @deprecated use `DocumentMetadata$inboundSchema` instead. */
    export const inboundSchema = DocumentMetadata$inboundSchema;
    /** @deprecated use `DocumentMetadata$outboundSchema` instead. */
    export const outboundSchema = DocumentMetadata$outboundSchema;
    /** @deprecated use `DocumentMetadata$Outbound` instead. */
    export type Outbound = DocumentMetadata$Outbound;
}

/** @internal */
export const ScoredChunkResponse$inboundSchema: z.ZodType<
    ScoredChunkResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        text: z.string(),
        score: z.number(),
        document_id: z.string(),
        document_metadata: z.lazy(() => DocumentMetadata$inboundSchema),
    })
    .transform((v) => {
        return remap$(v, {
            document_id: "documentId",
            document_metadata: "documentMetadata",
        });
    });

/** @internal */
export type ScoredChunkResponse$Outbound = {
    text: string;
    score: number;
    document_id: string;
    document_metadata: DocumentMetadata$Outbound;
};

/** @internal */
export const ScoredChunkResponse$outboundSchema: z.ZodType<
    ScoredChunkResponse$Outbound,
    z.ZodTypeDef,
    ScoredChunkResponse
> = z
    .object({
        text: z.string(),
        score: z.number(),
        documentId: z.string(),
        documentMetadata: z.lazy(() => DocumentMetadata$outboundSchema),
    })
    .transform((v) => {
        return remap$(v, {
            documentId: "document_id",
            documentMetadata: "document_metadata",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScoredChunkResponse$ {
    /** @deprecated use `ScoredChunkResponse$inboundSchema` instead. */
    export const inboundSchema = ScoredChunkResponse$inboundSchema;
    /** @deprecated use `ScoredChunkResponse$outboundSchema` instead. */
    export const outboundSchema = ScoredChunkResponse$outboundSchema;
    /** @deprecated use `ScoredChunkResponse$Outbound` instead. */
    export type Outbound = ScoredChunkResponse$Outbound;
}
