/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type OutputTokenDetails = {
  reasoningTokens?: number | undefined;
};

/** @internal */
export const OutputTokenDetails$inboundSchema: z.ZodType<
  OutputTokenDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  reasoning_tokens: z.number().int().default(0),
}).transform((v) => {
  return remap$(v, {
    "reasoning_tokens": "reasoningTokens",
  });
});

/** @internal */
export type OutputTokenDetails$Outbound = {
  reasoning_tokens: number;
};

/** @internal */
export const OutputTokenDetails$outboundSchema: z.ZodType<
  OutputTokenDetails$Outbound,
  z.ZodTypeDef,
  OutputTokenDetails
> = z.object({
  reasoningTokens: z.number().int().default(0),
}).transform((v) => {
  return remap$(v, {
    reasoningTokens: "reasoning_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputTokenDetails$ {
  /** @deprecated use `OutputTokenDetails$inboundSchema` instead. */
  export const inboundSchema = OutputTokenDetails$inboundSchema;
  /** @deprecated use `OutputTokenDetails$outboundSchema` instead. */
  export const outboundSchema = OutputTokenDetails$outboundSchema;
  /** @deprecated use `OutputTokenDetails$Outbound` instead. */
  export type Outbound = OutputTokenDetails$Outbound;
}

export function outputTokenDetailsToJSON(
  outputTokenDetails: OutputTokenDetails,
): string {
  return JSON.stringify(
    OutputTokenDetails$outboundSchema.parse(outputTokenDetails),
  );
}

export function outputTokenDetailsFromJSON(
  jsonString: string,
): SafeParseResult<OutputTokenDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputTokenDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputTokenDetails' from JSON`,
  );
}
