/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const Effort = {
  Low: "low",
  Medium: "medium",
  High: "high",
} as const;
export type Effort = ClosedEnum<typeof Effort>;

export type Reasoning = {
  effort: Effort;
  summary?: any | null | undefined;
};

/** @internal */
export const Effort$inboundSchema: z.ZodNativeEnum<typeof Effort> = z
  .nativeEnum(Effort);

/** @internal */
export const Effort$outboundSchema: z.ZodNativeEnum<typeof Effort> =
  Effort$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Effort$ {
  /** @deprecated use `Effort$inboundSchema` instead. */
  export const inboundSchema = Effort$inboundSchema;
  /** @deprecated use `Effort$outboundSchema` instead. */
  export const outboundSchema = Effort$outboundSchema;
}

/** @internal */
export const Reasoning$inboundSchema: z.ZodType<
  Reasoning,
  z.ZodTypeDef,
  unknown
> = z.object({
  effort: Effort$inboundSchema,
  summary: z.nullable(z.any()).optional(),
});

/** @internal */
export type Reasoning$Outbound = {
  effort: string;
  summary?: any | null | undefined;
};

/** @internal */
export const Reasoning$outboundSchema: z.ZodType<
  Reasoning$Outbound,
  z.ZodTypeDef,
  Reasoning
> = z.object({
  effort: Effort$outboundSchema,
  summary: z.nullable(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Reasoning$ {
  /** @deprecated use `Reasoning$inboundSchema` instead. */
  export const inboundSchema = Reasoning$inboundSchema;
  /** @deprecated use `Reasoning$outboundSchema` instead. */
  export const outboundSchema = Reasoning$outboundSchema;
  /** @deprecated use `Reasoning$Outbound` instead. */
  export type Outbound = Reasoning$Outbound;
}

export function reasoningToJSON(reasoning: Reasoning): string {
  return JSON.stringify(Reasoning$outboundSchema.parse(reasoning));
}

export function reasoningFromJSON(
  jsonString: string,
): SafeParseResult<Reasoning, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Reasoning$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Reasoning' from JSON`,
  );
}
