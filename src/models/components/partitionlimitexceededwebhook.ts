/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PartitionLimitExceededWebhookPayload,
  PartitionLimitExceededWebhookPayload$inboundSchema,
  PartitionLimitExceededWebhookPayload$Outbound,
  PartitionLimitExceededWebhookPayload$outboundSchema,
} from "./partitionlimitexceededwebhookpayload.js";

export type PartitionLimitExceededWebhook = {
  nonce: string;
  type?: "partition_limit_exceeded" | undefined;
  payload: PartitionLimitExceededWebhookPayload;
};

/** @internal */
export const PartitionLimitExceededWebhook$inboundSchema: z.ZodType<
  PartitionLimitExceededWebhook,
  z.ZodTypeDef,
  unknown
> = z.object({
  nonce: z.string(),
  type: z.literal("partition_limit_exceeded").optional(),
  payload: PartitionLimitExceededWebhookPayload$inboundSchema,
});

/** @internal */
export type PartitionLimitExceededWebhook$Outbound = {
  nonce: string;
  type: "partition_limit_exceeded";
  payload: PartitionLimitExceededWebhookPayload$Outbound;
};

/** @internal */
export const PartitionLimitExceededWebhook$outboundSchema: z.ZodType<
  PartitionLimitExceededWebhook$Outbound,
  z.ZodTypeDef,
  PartitionLimitExceededWebhook
> = z.object({
  nonce: z.string(),
  type: z.literal("partition_limit_exceeded").default(
    "partition_limit_exceeded" as const,
  ),
  payload: PartitionLimitExceededWebhookPayload$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PartitionLimitExceededWebhook$ {
  /** @deprecated use `PartitionLimitExceededWebhook$inboundSchema` instead. */
  export const inboundSchema = PartitionLimitExceededWebhook$inboundSchema;
  /** @deprecated use `PartitionLimitExceededWebhook$outboundSchema` instead. */
  export const outboundSchema = PartitionLimitExceededWebhook$outboundSchema;
  /** @deprecated use `PartitionLimitExceededWebhook$Outbound` instead. */
  export type Outbound = PartitionLimitExceededWebhook$Outbound;
}

export function partitionLimitExceededWebhookToJSON(
  partitionLimitExceededWebhook: PartitionLimitExceededWebhook,
): string {
  return JSON.stringify(
    PartitionLimitExceededWebhook$outboundSchema.parse(
      partitionLimitExceededWebhook,
    ),
  );
}

export function partitionLimitExceededWebhookFromJSON(
  jsonString: string,
): SafeParseResult<PartitionLimitExceededWebhook, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PartitionLimitExceededWebhook$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PartitionLimitExceededWebhook' from JSON`,
  );
}
