/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ConnectionLimitExceededWebhookPayload = {
  connectionId: string;
  partition: string | null;
  connectionMetadata: { [k: string]: any };
  limitType?: "page_limit" | undefined;
};

/** @internal */
export const ConnectionLimitExceededWebhookPayload$inboundSchema: z.ZodType<
  ConnectionLimitExceededWebhookPayload,
  z.ZodTypeDef,
  unknown
> = z.object({
  connection_id: z.string(),
  partition: z.nullable(z.string()),
  connection_metadata: z.record(z.any()),
  limit_type: z.literal("page_limit").optional(),
}).transform((v) => {
  return remap$(v, {
    "connection_id": "connectionId",
    "connection_metadata": "connectionMetadata",
    "limit_type": "limitType",
  });
});

/** @internal */
export type ConnectionLimitExceededWebhookPayload$Outbound = {
  connection_id: string;
  partition: string | null;
  connection_metadata: { [k: string]: any };
  limit_type: "page_limit";
};

/** @internal */
export const ConnectionLimitExceededWebhookPayload$outboundSchema: z.ZodType<
  ConnectionLimitExceededWebhookPayload$Outbound,
  z.ZodTypeDef,
  ConnectionLimitExceededWebhookPayload
> = z.object({
  connectionId: z.string(),
  partition: z.nullable(z.string()),
  connectionMetadata: z.record(z.any()),
  limitType: z.literal("page_limit").default("page_limit" as const),
}).transform((v) => {
  return remap$(v, {
    connectionId: "connection_id",
    connectionMetadata: "connection_metadata",
    limitType: "limit_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConnectionLimitExceededWebhookPayload$ {
  /** @deprecated use `ConnectionLimitExceededWebhookPayload$inboundSchema` instead. */
  export const inboundSchema =
    ConnectionLimitExceededWebhookPayload$inboundSchema;
  /** @deprecated use `ConnectionLimitExceededWebhookPayload$outboundSchema` instead. */
  export const outboundSchema =
    ConnectionLimitExceededWebhookPayload$outboundSchema;
  /** @deprecated use `ConnectionLimitExceededWebhookPayload$Outbound` instead. */
  export type Outbound = ConnectionLimitExceededWebhookPayload$Outbound;
}

export function connectionLimitExceededWebhookPayloadToJSON(
  connectionLimitExceededWebhookPayload: ConnectionLimitExceededWebhookPayload,
): string {
  return JSON.stringify(
    ConnectionLimitExceededWebhookPayload$outboundSchema.parse(
      connectionLimitExceededWebhookPayload,
    ),
  );
}

export function connectionLimitExceededWebhookPayloadFromJSON(
  jsonString: string,
): SafeParseResult<ConnectionLimitExceededWebhookPayload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ConnectionLimitExceededWebhookPayload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConnectionLimitExceededWebhookPayload' from JSON`,
  );
}
