/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EventeventPostBody =
  | components.DocumentUpdateWebhook
  | components.DocumentDeleteWebhook
  | components.EntityExtractedWebhook
  | components.ConnectionSyncStartedWebhook
  | components.ConnectionSyncProgressWebhook
  | components.ConnectionSyncFinishedWebhook
  | components.ConnectionLimitExceededWebhook
  | components.PartitionLimitExceededWebhook;

/** @internal */
export const EventeventPostBody$inboundSchema: z.ZodType<
  EventeventPostBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.DocumentUpdateWebhook$inboundSchema,
  components.DocumentDeleteWebhook$inboundSchema,
  components.EntityExtractedWebhook$inboundSchema,
  components.ConnectionSyncStartedWebhook$inboundSchema,
  components.ConnectionSyncProgressWebhook$inboundSchema,
  components.ConnectionSyncFinishedWebhook$inboundSchema,
  components.ConnectionLimitExceededWebhook$inboundSchema,
  components.PartitionLimitExceededWebhook$inboundSchema,
]);

/** @internal */
export type EventeventPostBody$Outbound =
  | components.DocumentUpdateWebhook$Outbound
  | components.DocumentDeleteWebhook$Outbound
  | components.EntityExtractedWebhook$Outbound
  | components.ConnectionSyncStartedWebhook$Outbound
  | components.ConnectionSyncProgressWebhook$Outbound
  | components.ConnectionSyncFinishedWebhook$Outbound
  | components.ConnectionLimitExceededWebhook$Outbound
  | components.PartitionLimitExceededWebhook$Outbound;

/** @internal */
export const EventeventPostBody$outboundSchema: z.ZodType<
  EventeventPostBody$Outbound,
  z.ZodTypeDef,
  EventeventPostBody
> = z.union([
  components.DocumentUpdateWebhook$outboundSchema,
  components.DocumentDeleteWebhook$outboundSchema,
  components.EntityExtractedWebhook$outboundSchema,
  components.ConnectionSyncStartedWebhook$outboundSchema,
  components.ConnectionSyncProgressWebhook$outboundSchema,
  components.ConnectionSyncFinishedWebhook$outboundSchema,
  components.ConnectionLimitExceededWebhook$outboundSchema,
  components.PartitionLimitExceededWebhook$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventeventPostBody$ {
  /** @deprecated use `EventeventPostBody$inboundSchema` instead. */
  export const inboundSchema = EventeventPostBody$inboundSchema;
  /** @deprecated use `EventeventPostBody$outboundSchema` instead. */
  export const outboundSchema = EventeventPostBody$outboundSchema;
  /** @deprecated use `EventeventPostBody$Outbound` instead. */
  export type Outbound = EventeventPostBody$Outbound;
}

export function eventeventPostBodyToJSON(
  eventeventPostBody: EventeventPostBody,
): string {
  return JSON.stringify(
    EventeventPostBody$outboundSchema.parse(eventeventPostBody),
  );
}

export function eventeventPostBodyFromJSON(
  jsonString: string,
): SafeParseResult<EventeventPostBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventeventPostBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventeventPostBody' from JSON`,
  );
}
