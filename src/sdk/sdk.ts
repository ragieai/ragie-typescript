/*
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDKOptions, serverURLFromOptions } from "../lib/config.js";
import { HTTPClient } from "../lib/http.js";
import { ClientSDK } from "../lib/sdks.js";
import { Documents } from "./documents.js";
import { Entities } from "./entities.js";
import { Retrievals } from "./retrievals.js";

export class Ragie extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    private _documents?: Documents;
    get documents(): Documents {
        return (this._documents ??= new Documents(this.options$));
    }

    private _retrievals?: Retrievals;
    get retrievals(): Retrievals {
        return (this._retrievals ??= new Retrievals(this.options$));
    }

    private _entities?: Entities;
    get entities(): Entities {
        return (this._entities ??= new Entities(this.options$));
    }
}
