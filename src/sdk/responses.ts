/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { responsesCreate } from "../funcs/responsesCreate.js";
import { responsesGet } from "../funcs/responsesGet.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Responses extends ClientSDK {
  /**
   * Create Response
   *
   * @remarks
   * Create a response. This will generate an LLM or agentic response. At this time the only supported model is `deep-search`. Responses may be streamed or returned synchronously. The `retrieve` tool is currently the only supported tool, more tools will be added in the future. A single partition may be provided in the retrieve tool. If omitted the `default` partition is used.
   */
  async create(
    request: components.RequestT,
    options?: RequestOptions,
  ): Promise<components.ResponseT> {
    return unwrapAsync(responsesCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Response
   *
   * @remarks
   * Get a response by its ID. This will return the response and its status. If the response is still in progress, the status will be `in_progress`. If the response is completed, the status will be `completed`. If the response is failed, the status will be `failed`.
   */
  async get(
    request: operations.GetResponseResponsesResponseIdGetRequest,
    options?: RequestOptions,
  ): Promise<components.ResponseT> {
    return unwrapAsync(responsesGet(
      this,
      request,
      options,
    ));
  }
}
